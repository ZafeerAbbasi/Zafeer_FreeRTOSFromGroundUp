
001_Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c758  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  0800c9f8  0800c9f8  0001c9f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ce2c  0800ce2c  0001ce2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ce34  0800ce34  0001ce34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ce38  0800ce38  0001ce38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  24000000  0800ce3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  240001dc  0800d018  000201dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  2400023c  0800d078  0002023c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000523c  2400029c  0800d0d8  0002029c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240054d8  0800d0d8  000254d8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002029c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202ca  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002ae03  00000000  00000000  0002030d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005394  00000000  00000000  0004b110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ec8  00000000  00000000  000504a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000017ca  00000000  00000000  00052370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003d525  00000000  00000000  00053b3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002801f  00000000  00000000  0009105f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00177177  00000000  00000000  000b907e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000919c  00000000  00000000  002301f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000094  00000000  00000000  00239394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400029c 	.word	0x2400029c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c9e0 	.word	0x0800c9e0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002a0 	.word	0x240002a0
 80002dc:	0800c9e0 	.word	0x0800c9e0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000690:	4b1e      	ldr	r3, [pc, #120]	; (800070c <MX_ETH_Init+0x80>)
 8000692:	4a1f      	ldr	r2, [pc, #124]	; (8000710 <MX_ETH_Init+0x84>)
 8000694:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000696:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <MX_ETH_Init+0x88>)
 8000698:	2200      	movs	r2, #0
 800069a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800069c:	4b1d      	ldr	r3, [pc, #116]	; (8000714 <MX_ETH_Init+0x88>)
 800069e:	2280      	movs	r2, #128	; 0x80
 80006a0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006a2:	4b1c      	ldr	r3, [pc, #112]	; (8000714 <MX_ETH_Init+0x88>)
 80006a4:	22e1      	movs	r2, #225	; 0xe1
 80006a6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006a8:	4b1a      	ldr	r3, [pc, #104]	; (8000714 <MX_ETH_Init+0x88>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006ae:	4b19      	ldr	r3, [pc, #100]	; (8000714 <MX_ETH_Init+0x88>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006b4:	4b17      	ldr	r3, [pc, #92]	; (8000714 <MX_ETH_Init+0x88>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006ba:	4b14      	ldr	r3, [pc, #80]	; (800070c <MX_ETH_Init+0x80>)
 80006bc:	4a15      	ldr	r2, [pc, #84]	; (8000714 <MX_ETH_Init+0x88>)
 80006be:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <MX_ETH_Init+0x80>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_ETH_Init+0x80>)
 80006c8:	4a13      	ldr	r2, [pc, #76]	; (8000718 <MX_ETH_Init+0x8c>)
 80006ca:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <MX_ETH_Init+0x80>)
 80006ce:	4a13      	ldr	r2, [pc, #76]	; (800071c <MX_ETH_Init+0x90>)
 80006d0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MX_ETH_Init+0x80>)
 80006d4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80006d8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006da:	480c      	ldr	r0, [pc, #48]	; (800070c <MX_ETH_Init+0x80>)
 80006dc:	f000 ffea 	bl	80016b4 <HAL_ETH_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80006e6:	f000 fae3 	bl	8000cb0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006ea:	2238      	movs	r2, #56	; 0x38
 80006ec:	2100      	movs	r1, #0
 80006ee:	480c      	ldr	r0, [pc, #48]	; (8000720 <MX_ETH_Init+0x94>)
 80006f0:	f00a f8ad 	bl	800a84e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <MX_ETH_Init+0x94>)
 80006f6:	2221      	movs	r2, #33	; 0x21
 80006f8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_ETH_Init+0x94>)
 80006fc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000700:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000702:	4b07      	ldr	r3, [pc, #28]	; (8000720 <MX_ETH_Init+0x94>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	240002f0 	.word	0x240002f0
 8000710:	40028000 	.word	0x40028000
 8000714:	240003a0 	.word	0x240003a0
 8000718:	2400023c 	.word	0x2400023c
 800071c:	240001dc 	.word	0x240001dc
 8000720:	240002b8 	.word	0x240002b8

08000724 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08e      	sub	sp, #56	; 0x38
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a59      	ldr	r2, [pc, #356]	; (80008a8 <HAL_ETH_MspInit+0x184>)
 8000742:	4293      	cmp	r3, r2
 8000744:	f040 80ab 	bne.w	800089e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000748:	4b58      	ldr	r3, [pc, #352]	; (80008ac <HAL_ETH_MspInit+0x188>)
 800074a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800074e:	4a57      	ldr	r2, [pc, #348]	; (80008ac <HAL_ETH_MspInit+0x188>)
 8000750:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000754:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000758:	4b54      	ldr	r3, [pc, #336]	; (80008ac <HAL_ETH_MspInit+0x188>)
 800075a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800075e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000762:	623b      	str	r3, [r7, #32]
 8000764:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000766:	4b51      	ldr	r3, [pc, #324]	; (80008ac <HAL_ETH_MspInit+0x188>)
 8000768:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800076c:	4a4f      	ldr	r2, [pc, #316]	; (80008ac <HAL_ETH_MspInit+0x188>)
 800076e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000772:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000776:	4b4d      	ldr	r3, [pc, #308]	; (80008ac <HAL_ETH_MspInit+0x188>)
 8000778:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800077c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000780:	61fb      	str	r3, [r7, #28]
 8000782:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000784:	4b49      	ldr	r3, [pc, #292]	; (80008ac <HAL_ETH_MspInit+0x188>)
 8000786:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800078a:	4a48      	ldr	r2, [pc, #288]	; (80008ac <HAL_ETH_MspInit+0x188>)
 800078c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000790:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000794:	4b45      	ldr	r3, [pc, #276]	; (80008ac <HAL_ETH_MspInit+0x188>)
 8000796:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800079a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800079e:	61bb      	str	r3, [r7, #24]
 80007a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a2:	4b42      	ldr	r3, [pc, #264]	; (80008ac <HAL_ETH_MspInit+0x188>)
 80007a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a8:	4a40      	ldr	r2, [pc, #256]	; (80008ac <HAL_ETH_MspInit+0x188>)
 80007aa:	f043 0304 	orr.w	r3, r3, #4
 80007ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007b2:	4b3e      	ldr	r3, [pc, #248]	; (80008ac <HAL_ETH_MspInit+0x188>)
 80007b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007b8:	f003 0304 	and.w	r3, r3, #4
 80007bc:	617b      	str	r3, [r7, #20]
 80007be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c0:	4b3a      	ldr	r3, [pc, #232]	; (80008ac <HAL_ETH_MspInit+0x188>)
 80007c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007c6:	4a39      	ldr	r2, [pc, #228]	; (80008ac <HAL_ETH_MspInit+0x188>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007d0:	4b36      	ldr	r3, [pc, #216]	; (80008ac <HAL_ETH_MspInit+0x188>)
 80007d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	4b33      	ldr	r3, [pc, #204]	; (80008ac <HAL_ETH_MspInit+0x188>)
 80007e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007e4:	4a31      	ldr	r2, [pc, #196]	; (80008ac <HAL_ETH_MspInit+0x188>)
 80007e6:	f043 0302 	orr.w	r3, r3, #2
 80007ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007ee:	4b2f      	ldr	r3, [pc, #188]	; (80008ac <HAL_ETH_MspInit+0x188>)
 80007f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f4:	f003 0302 	and.w	r3, r3, #2
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80007fc:	4b2b      	ldr	r3, [pc, #172]	; (80008ac <HAL_ETH_MspInit+0x188>)
 80007fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000802:	4a2a      	ldr	r2, [pc, #168]	; (80008ac <HAL_ETH_MspInit+0x188>)
 8000804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000808:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800080c:	4b27      	ldr	r3, [pc, #156]	; (80008ac <HAL_ETH_MspInit+0x188>)
 800080e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800081a:	2332      	movs	r3, #50	; 0x32
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081e:	2302      	movs	r3, #2
 8000820:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800082a:	230b      	movs	r3, #11
 800082c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800082e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000832:	4619      	mov	r1, r3
 8000834:	481e      	ldr	r0, [pc, #120]	; (80008b0 <HAL_ETH_MspInit+0x18c>)
 8000836:	f001 fb61 	bl	8001efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800083a:	2386      	movs	r3, #134	; 0x86
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2302      	movs	r3, #2
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800084a:	230b      	movs	r3, #11
 800084c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000852:	4619      	mov	r1, r3
 8000854:	4817      	ldr	r0, [pc, #92]	; (80008b4 <HAL_ETH_MspInit+0x190>)
 8000856:	f001 fb51 	bl	8001efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800085a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000860:	2302      	movs	r3, #2
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800086c:	230b      	movs	r3, #11
 800086e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000874:	4619      	mov	r1, r3
 8000876:	4810      	ldr	r0, [pc, #64]	; (80008b8 <HAL_ETH_MspInit+0x194>)
 8000878:	f001 fb40 	bl	8001efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800087c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800088e:	230b      	movs	r3, #11
 8000890:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000896:	4619      	mov	r1, r3
 8000898:	4808      	ldr	r0, [pc, #32]	; (80008bc <HAL_ETH_MspInit+0x198>)
 800089a:	f001 fb2f 	bl	8001efc <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800089e:	bf00      	nop
 80008a0:	3738      	adds	r7, #56	; 0x38
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40028000 	.word	0x40028000
 80008ac:	58024400 	.word	0x58024400
 80008b0:	58020800 	.word	0x58020800
 80008b4:	58020000 	.word	0x58020000
 80008b8:	58020400 	.word	0x58020400
 80008bc:	58021800 	.word	0x58021800

080008c0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80008c4:	4a07      	ldr	r2, [pc, #28]	; (80008e4 <MX_FREERTOS_Init+0x24>)
 80008c6:	2100      	movs	r1, #0
 80008c8:	4807      	ldr	r0, [pc, #28]	; (80008e8 <MX_FREERTOS_Init+0x28>)
 80008ca:	f006 fc9d 	bl	8007208 <osThreadNew>
 80008ce:	4603      	mov	r3, r0
 80008d0:	4a06      	ldr	r2, [pc, #24]	; (80008ec <MX_FREERTOS_Init+0x2c>)
 80008d2:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of BeastmodeEvent */
  BeastmodeEventHandle = osEventFlagsNew(&BeastmodeEvent_attributes);
 80008d4:	4806      	ldr	r0, [pc, #24]	; (80008f0 <MX_FREERTOS_Init+0x30>)
 80008d6:	f006 fd44 	bl	8007362 <osEventFlagsNew>
 80008da:	4603      	mov	r3, r0
 80008dc:	4a05      	ldr	r2, [pc, #20]	; (80008f4 <MX_FREERTOS_Init+0x34>)
 80008de:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	0800ca4c 	.word	0x0800ca4c
 80008e8:	080008f9 	.word	0x080008f9
 80008ec:	240003a8 	.word	0x240003a8
 80008f0:	0800ca70 	.word	0x0800ca70
 80008f4:	240003ac 	.word	0x240003ac

080008f8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b090      	sub	sp, #64	; 0x40
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN StartDefaultTask */
    /* Infinite loop */
	char msg[ 50 ];
	float beast = 655.22;
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <StartDefaultTask+0x48>)
 8000902:	63fb      	str	r3, [r7, #60]	; 0x3c
	sprintf( msg, "Example Floating Point: %f\r\n", beast);
 8000904:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000908:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800090c:	f107 0008 	add.w	r0, r7, #8
 8000910:	ec53 2b17 	vmov	r2, r3, d7
 8000914:	490b      	ldr	r1, [pc, #44]	; (8000944 <StartDefaultTask+0x4c>)
 8000916:	f009 ff37 	bl	800a788 <siprintf>
    for(;;)
    {
		HAL_UART_Transmit( &huart3, ( uint8_t * )msg, strlen( msg ), 1000 );
 800091a:	f107 0308 	add.w	r3, r7, #8
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff fd2e 	bl	8000380 <strlen>
 8000924:	4603      	mov	r3, r0
 8000926:	b29a      	uxth	r2, r3
 8000928:	f107 0108 	add.w	r1, r7, #8
 800092c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000930:	4805      	ldr	r0, [pc, #20]	; (8000948 <StartDefaultTask+0x50>)
 8000932:	f004 ffbd 	bl	80058b0 <HAL_UART_Transmit>
        osDelay( 500 );
 8000936:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800093a:	f006 fcf7 	bl	800732c <osDelay>
		HAL_UART_Transmit( &huart3, ( uint8_t * )msg, strlen( msg ), 1000 );
 800093e:	e7ec      	b.n	800091a <StartDefaultTask+0x22>
 8000940:	4423ce14 	.word	0x4423ce14
 8000944:	0800ca14 	.word	0x0800ca14
 8000948:	24000400 	.word	0x24000400

0800094c <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08c      	sub	sp, #48	; 0x30
 8000950:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
 8000960:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000962:	4b62      	ldr	r3, [pc, #392]	; (8000aec <MX_GPIO_Init+0x1a0>)
 8000964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000968:	4a60      	ldr	r2, [pc, #384]	; (8000aec <MX_GPIO_Init+0x1a0>)
 800096a:	f043 0304 	orr.w	r3, r3, #4
 800096e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000972:	4b5e      	ldr	r3, [pc, #376]	; (8000aec <MX_GPIO_Init+0x1a0>)
 8000974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000978:	f003 0304 	and.w	r3, r3, #4
 800097c:	61bb      	str	r3, [r7, #24]
 800097e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000980:	4b5a      	ldr	r3, [pc, #360]	; (8000aec <MX_GPIO_Init+0x1a0>)
 8000982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000986:	4a59      	ldr	r2, [pc, #356]	; (8000aec <MX_GPIO_Init+0x1a0>)
 8000988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800098c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000990:	4b56      	ldr	r3, [pc, #344]	; (8000aec <MX_GPIO_Init+0x1a0>)
 8000992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800099a:	617b      	str	r3, [r7, #20]
 800099c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	4b53      	ldr	r3, [pc, #332]	; (8000aec <MX_GPIO_Init+0x1a0>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	4a51      	ldr	r2, [pc, #324]	; (8000aec <MX_GPIO_Init+0x1a0>)
 80009a6:	f043 0301 	orr.w	r3, r3, #1
 80009aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ae:	4b4f      	ldr	r3, [pc, #316]	; (8000aec <MX_GPIO_Init+0x1a0>)
 80009b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b4:	f003 0301 	and.w	r3, r3, #1
 80009b8:	613b      	str	r3, [r7, #16]
 80009ba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009bc:	4b4b      	ldr	r3, [pc, #300]	; (8000aec <MX_GPIO_Init+0x1a0>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	4a4a      	ldr	r2, [pc, #296]	; (8000aec <MX_GPIO_Init+0x1a0>)
 80009c4:	f043 0302 	orr.w	r3, r3, #2
 80009c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009cc:	4b47      	ldr	r3, [pc, #284]	; (8000aec <MX_GPIO_Init+0x1a0>)
 80009ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009da:	4b44      	ldr	r3, [pc, #272]	; (8000aec <MX_GPIO_Init+0x1a0>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	4a42      	ldr	r2, [pc, #264]	; (8000aec <MX_GPIO_Init+0x1a0>)
 80009e2:	f043 0308 	orr.w	r3, r3, #8
 80009e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ea:	4b40      	ldr	r3, [pc, #256]	; (8000aec <MX_GPIO_Init+0x1a0>)
 80009ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f0:	f003 0308 	and.w	r3, r3, #8
 80009f4:	60bb      	str	r3, [r7, #8]
 80009f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009f8:	4b3c      	ldr	r3, [pc, #240]	; (8000aec <MX_GPIO_Init+0x1a0>)
 80009fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009fe:	4a3b      	ldr	r2, [pc, #236]	; (8000aec <MX_GPIO_Init+0x1a0>)
 8000a00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a08:	4b38      	ldr	r3, [pc, #224]	; (8000aec <MX_GPIO_Init+0x1a0>)
 8000a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a16:	4b35      	ldr	r3, [pc, #212]	; (8000aec <MX_GPIO_Init+0x1a0>)
 8000a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a1c:	4a33      	ldr	r2, [pc, #204]	; (8000aec <MX_GPIO_Init+0x1a0>)
 8000a1e:	f043 0310 	orr.w	r3, r3, #16
 8000a22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a26:	4b31      	ldr	r3, [pc, #196]	; (8000aec <MX_GPIO_Init+0x1a0>)
 8000a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a2c:	f003 0310 	and.w	r3, r3, #16
 8000a30:	603b      	str	r3, [r7, #0]
 8000a32:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a34:	2200      	movs	r2, #0
 8000a36:	f244 0101 	movw	r1, #16385	; 0x4001
 8000a3a:	482d      	ldr	r0, [pc, #180]	; (8000af0 <MX_GPIO_Init+0x1a4>)
 8000a3c:	f001 fc0e 	bl	800225c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a46:	482b      	ldr	r0, [pc, #172]	; (8000af4 <MX_GPIO_Init+0x1a8>)
 8000a48:	f001 fc08 	bl	800225c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2102      	movs	r1, #2
 8000a50:	4829      	ldr	r0, [pc, #164]	; (8000af8 <MX_GPIO_Init+0x1ac>)
 8000a52:	f001 fc03 	bl	800225c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a64:	f107 031c 	add.w	r3, r7, #28
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4824      	ldr	r0, [pc, #144]	; (8000afc <MX_GPIO_Init+0x1b0>)
 8000a6c:	f001 fa46 	bl	8001efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000a70:	f244 0301 	movw	r3, #16385	; 0x4001
 8000a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a76:	2301      	movs	r3, #1
 8000a78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a82:	f107 031c 	add.w	r3, r7, #28
 8000a86:	4619      	mov	r1, r3
 8000a88:	4819      	ldr	r0, [pc, #100]	; (8000af0 <MX_GPIO_Init+0x1a4>)
 8000a8a:	f001 fa37 	bl	8001efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000a8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a94:	2301      	movs	r3, #1
 8000a96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000aa0:	f107 031c 	add.w	r3, r7, #28
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4813      	ldr	r0, [pc, #76]	; (8000af4 <MX_GPIO_Init+0x1a8>)
 8000aa8:	f001 fa28 	bl	8001efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000aac:	2380      	movs	r3, #128	; 0x80
 8000aae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ab0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ab4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000aba:	f107 031c 	add.w	r3, r7, #28
 8000abe:	4619      	mov	r1, r3
 8000ac0:	480f      	ldr	r0, [pc, #60]	; (8000b00 <MX_GPIO_Init+0x1b4>)
 8000ac2:	f001 fa1b 	bl	8001efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aca:	2301      	movs	r3, #1
 8000acc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ad6:	f107 031c 	add.w	r3, r7, #28
 8000ada:	4619      	mov	r1, r3
 8000adc:	4806      	ldr	r0, [pc, #24]	; (8000af8 <MX_GPIO_Init+0x1ac>)
 8000ade:	f001 fa0d 	bl	8001efc <HAL_GPIO_Init>

}
 8000ae2:	bf00      	nop
 8000ae4:	3730      	adds	r7, #48	; 0x30
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	58024400 	.word	0x58024400
 8000af0:	58020400 	.word	0x58020400
 8000af4:	58020c00 	.word	0x58020c00
 8000af8:	58021000 	.word	0x58021000
 8000afc:	58020800 	.word	0x58020800
 8000b00:	58021800 	.word	0x58021800

08000b04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b08:	f000 fc54 	bl	80013b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b0c:	f000 f810 	bl	8000b30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b10:	f7ff ff1c 	bl	800094c <MX_GPIO_Init>
  MX_ETH_Init();
 8000b14:	f7ff fdba 	bl	800068c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000b18:	f000 fabe 	bl	8001098 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000b1c:	f000 fb72 	bl	8001204 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b20:	f006 fb28 	bl	8007174 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000b24:	f7ff fecc 	bl	80008c0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000b28:	f006 fb48 	bl	80071bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <main+0x28>
	...

08000b30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b09e      	sub	sp, #120	; 0x78
 8000b34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b3a:	224c      	movs	r2, #76	; 0x4c
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f009 fe85 	bl	800a84e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b44:	f107 030c 	add.w	r3, r7, #12
 8000b48:	2220      	movs	r2, #32
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f009 fe7e 	bl	800a84e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b52:	2002      	movs	r0, #2
 8000b54:	f001 fce4 	bl	8002520 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	4b48      	ldr	r3, [pc, #288]	; (8000c80 <SystemClock_Config+0x150>)
 8000b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b60:	4a47      	ldr	r2, [pc, #284]	; (8000c80 <SystemClock_Config+0x150>)
 8000b62:	f023 0301 	bic.w	r3, r3, #1
 8000b66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b68:	4b45      	ldr	r3, [pc, #276]	; (8000c80 <SystemClock_Config+0x150>)
 8000b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b6c:	f003 0301 	and.w	r3, r3, #1
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	4b44      	ldr	r3, [pc, #272]	; (8000c84 <SystemClock_Config+0x154>)
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	4a43      	ldr	r2, [pc, #268]	; (8000c84 <SystemClock_Config+0x154>)
 8000b78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b7c:	6193      	str	r3, [r2, #24]
 8000b7e:	4b41      	ldr	r3, [pc, #260]	; (8000c84 <SystemClock_Config+0x154>)
 8000b80:	699b      	ldr	r3, [r3, #24]
 8000b82:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b8a:	bf00      	nop
 8000b8c:	4b3d      	ldr	r3, [pc, #244]	; (8000c84 <SystemClock_Config+0x154>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b98:	d1f8      	bne.n	8000b8c <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9a:	4b3b      	ldr	r3, [pc, #236]	; (8000c88 <SystemClock_Config+0x158>)
 8000b9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ba0:	4a39      	ldr	r2, [pc, #228]	; (8000c88 <SystemClock_Config+0x158>)
 8000ba2:	f043 0302 	orr.w	r3, r3, #2
 8000ba6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000baa:	4b37      	ldr	r3, [pc, #220]	; (8000c88 <SystemClock_Config+0x158>)
 8000bac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bb0:	f003 0302 	and.w	r3, r3, #2
 8000bb4:	607b      	str	r3, [r7, #4]
 8000bb6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000bb8:	2300      	movs	r3, #0
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	4b31      	ldr	r3, [pc, #196]	; (8000c84 <SystemClock_Config+0x154>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	4a30      	ldr	r2, [pc, #192]	; (8000c84 <SystemClock_Config+0x154>)
 8000bc2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bc6:	6193      	str	r3, [r2, #24]
 8000bc8:	4b2e      	ldr	r3, [pc, #184]	; (8000c84 <SystemClock_Config+0x154>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bd0:	603b      	str	r3, [r7, #0]
 8000bd2:	4b2b      	ldr	r3, [pc, #172]	; (8000c80 <SystemClock_Config+0x150>)
 8000bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bd6:	4a2a      	ldr	r2, [pc, #168]	; (8000c80 <SystemClock_Config+0x150>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000bde:	4b28      	ldr	r3, [pc, #160]	; (8000c80 <SystemClock_Config+0x150>)
 8000be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	603b      	str	r3, [r7, #0]
 8000be8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bea:	bf00      	nop
 8000bec:	4b25      	ldr	r3, [pc, #148]	; (8000c84 <SystemClock_Config+0x154>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bf8:	d1f8      	bne.n	8000bec <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000bfe:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c02:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c04:	2302      	movs	r3, #2
 8000c06:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000c10:	2378      	movs	r3, #120	; 0x78
 8000c12:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c14:	2302      	movs	r3, #2
 8000c16:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8000c18:	230f      	movs	r3, #15
 8000c1a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c20:	230c      	movs	r3, #12
 8000c22:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c24:	2300      	movs	r3, #0
 8000c26:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c30:	4618      	mov	r0, r3
 8000c32:	f001 fcbf 	bl	80025b4 <HAL_RCC_OscConfig>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000c3c:	f000 f838 	bl	8000cb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c40:	233f      	movs	r3, #63	; 0x3f
 8000c42:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c44:	2303      	movs	r3, #3
 8000c46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c4c:	2308      	movs	r3, #8
 8000c4e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c50:	2340      	movs	r3, #64	; 0x40
 8000c52:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c54:	2340      	movs	r3, #64	; 0x40
 8000c56:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c5e:	2340      	movs	r3, #64	; 0x40
 8000c60:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c62:	f107 030c 	add.w	r3, r7, #12
 8000c66:	2104      	movs	r1, #4
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f002 f8fd 	bl	8002e68 <HAL_RCC_ClockConfig>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000c74:	f000 f81c 	bl	8000cb0 <Error_Handler>
  }
}
 8000c78:	bf00      	nop
 8000c7a:	3778      	adds	r7, #120	; 0x78
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	58000400 	.word	0x58000400
 8000c84:	58024800 	.word	0x58024800
 8000c88:	58024400 	.word	0x58024400

08000c8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a04      	ldr	r2, [pc, #16]	; (8000cac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d101      	bne.n	8000ca2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c9e:	f000 fbc5 	bl	800142c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40010000 	.word	0x40010000

08000cb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb4:	b672      	cpsid	i
}
 8000cb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <Error_Handler+0x8>
	...

08000cbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc2:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <HAL_MspInit+0x38>)
 8000cc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cc8:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <HAL_MspInit+0x38>)
 8000cca:	f043 0302 	orr.w	r3, r3, #2
 8000cce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000cd2:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <HAL_MspInit+0x38>)
 8000cd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cd8:	f003 0302 	and.w	r3, r3, #2
 8000cdc:	607b      	str	r3, [r7, #4]
 8000cde:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	210f      	movs	r1, #15
 8000ce4:	f06f 0001 	mvn.w	r0, #1
 8000ce8:	f000 fcbc 	bl	8001664 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	58024400 	.word	0x58024400

08000cf8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08e      	sub	sp, #56	; 0x38
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2b0f      	cmp	r3, #15
 8000d04:	d844      	bhi.n	8000d90 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8000d06:	2200      	movs	r2, #0
 8000d08:	6879      	ldr	r1, [r7, #4]
 8000d0a:	2019      	movs	r0, #25
 8000d0c:	f000 fcaa 	bl	8001664 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000d10:	2019      	movs	r0, #25
 8000d12:	f000 fcc1 	bl	8001698 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000d16:	4a24      	ldr	r2, [pc, #144]	; (8000da8 <HAL_InitTick+0xb0>)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d1c:	4b23      	ldr	r3, [pc, #140]	; (8000dac <HAL_InitTick+0xb4>)
 8000d1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d22:	4a22      	ldr	r2, [pc, #136]	; (8000dac <HAL_InitTick+0xb4>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000d2c:	4b1f      	ldr	r3, [pc, #124]	; (8000dac <HAL_InitTick+0xb4>)
 8000d2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d3a:	f107 020c 	add.w	r2, r7, #12
 8000d3e:	f107 0310 	add.w	r3, r7, #16
 8000d42:	4611      	mov	r1, r2
 8000d44:	4618      	mov	r0, r3
 8000d46:	f002 fc1b 	bl	8003580 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000d4a:	f002 fc03 	bl	8003554 <HAL_RCC_GetPCLK2Freq>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d56:	4a16      	ldr	r2, [pc, #88]	; (8000db0 <HAL_InitTick+0xb8>)
 8000d58:	fba2 2303 	umull	r2, r3, r2, r3
 8000d5c:	0c9b      	lsrs	r3, r3, #18
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d62:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <HAL_InitTick+0xbc>)
 8000d64:	4a14      	ldr	r2, [pc, #80]	; (8000db8 <HAL_InitTick+0xc0>)
 8000d66:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <HAL_InitTick+0xbc>)
 8000d6a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d6e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d70:	4a10      	ldr	r2, [pc, #64]	; (8000db4 <HAL_InitTick+0xbc>)
 8000d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d74:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d76:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <HAL_InitTick+0xbc>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d7c:	4b0d      	ldr	r3, [pc, #52]	; (8000db4 <HAL_InitTick+0xbc>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000d82:	480c      	ldr	r0, [pc, #48]	; (8000db4 <HAL_InitTick+0xbc>)
 8000d84:	f004 fa6a 	bl	800525c <HAL_TIM_Base_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d107      	bne.n	8000d9e <HAL_InitTick+0xa6>
 8000d8e:	e001      	b.n	8000d94 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8000d90:	2301      	movs	r3, #1
 8000d92:	e005      	b.n	8000da0 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000d94:	4807      	ldr	r0, [pc, #28]	; (8000db4 <HAL_InitTick+0xbc>)
 8000d96:	f004 fac3 	bl	8005320 <HAL_TIM_Base_Start_IT>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	e000      	b.n	8000da0 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3738      	adds	r7, #56	; 0x38
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	24000008 	.word	0x24000008
 8000dac:	58024400 	.word	0x58024400
 8000db0:	431bde83 	.word	0x431bde83
 8000db4:	240003b0 	.word	0x240003b0
 8000db8:	40010000 	.word	0x40010000

08000dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <NMI_Handler+0x4>

08000dc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <HardFault_Handler+0x4>

08000dc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <MemManage_Handler+0x4>

08000dce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd2:	e7fe      	b.n	8000dd2 <BusFault_Handler+0x4>

08000dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <UsageFault_Handler+0x4>

08000dda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000dec:	4802      	ldr	r0, [pc, #8]	; (8000df8 <TIM1_UP_IRQHandler+0x10>)
 8000dee:	f004 fb0f 	bl	8005410 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	240003b0 	.word	0x240003b0

08000dfc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return 1;
 8000e00:	2301      	movs	r3, #1
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <_kill>:

int _kill(int pid, int sig)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e16:	f009 fdc3 	bl	800a9a0 <__errno>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2216      	movs	r2, #22
 8000e1e:	601a      	str	r2, [r3, #0]
  return -1;
 8000e20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <_exit>:

void _exit (int status)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e34:	f04f 31ff 	mov.w	r1, #4294967295
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f7ff ffe7 	bl	8000e0c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e3e:	e7fe      	b.n	8000e3e <_exit+0x12>

08000e40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
 8000e50:	e00a      	b.n	8000e68 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e52:	f3af 8000 	nop.w
 8000e56:	4601      	mov	r1, r0
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	1c5a      	adds	r2, r3, #1
 8000e5c:	60ba      	str	r2, [r7, #8]
 8000e5e:	b2ca      	uxtb	r2, r1
 8000e60:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	3301      	adds	r3, #1
 8000e66:	617b      	str	r3, [r7, #20]
 8000e68:	697a      	ldr	r2, [r7, #20]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	dbf0      	blt.n	8000e52 <_read+0x12>
  }

  return len;
 8000e70:	687b      	ldr	r3, [r7, #4]
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3718      	adds	r7, #24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b086      	sub	sp, #24
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	60f8      	str	r0, [r7, #12]
 8000e82:	60b9      	str	r1, [r7, #8]
 8000e84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
 8000e8a:	e009      	b.n	8000ea0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	1c5a      	adds	r2, r3, #1
 8000e90:	60ba      	str	r2, [r7, #8]
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	697a      	ldr	r2, [r7, #20]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	dbf1      	blt.n	8000e8c <_write+0x12>
  }
  return len;
 8000ea8:	687b      	ldr	r3, [r7, #4]
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3718      	adds	r7, #24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <_close>:

int _close(int file)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	b083      	sub	sp, #12
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000eba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	b083      	sub	sp, #12
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
 8000ed2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000eda:	605a      	str	r2, [r3, #4]
  return 0;
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <_isatty>:

int _isatty(int file)
{
 8000eea:	b480      	push	{r7}
 8000eec:	b083      	sub	sp, #12
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ef2:	2301      	movs	r3, #1
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3714      	adds	r7, #20
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
	...

08000f1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f24:	4a14      	ldr	r2, [pc, #80]	; (8000f78 <_sbrk+0x5c>)
 8000f26:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <_sbrk+0x60>)
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f30:	4b13      	ldr	r3, [pc, #76]	; (8000f80 <_sbrk+0x64>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d102      	bne.n	8000f3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f38:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <_sbrk+0x64>)
 8000f3a:	4a12      	ldr	r2, [pc, #72]	; (8000f84 <_sbrk+0x68>)
 8000f3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f3e:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <_sbrk+0x64>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4413      	add	r3, r2
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d207      	bcs.n	8000f5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f4c:	f009 fd28 	bl	800a9a0 <__errno>
 8000f50:	4603      	mov	r3, r0
 8000f52:	220c      	movs	r2, #12
 8000f54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f56:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5a:	e009      	b.n	8000f70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f5c:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <_sbrk+0x64>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f62:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <_sbrk+0x64>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4413      	add	r3, r2
 8000f6a:	4a05      	ldr	r2, [pc, #20]	; (8000f80 <_sbrk+0x64>)
 8000f6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3718      	adds	r7, #24
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	24080000 	.word	0x24080000
 8000f7c:	00000400 	.word	0x00000400
 8000f80:	240003fc 	.word	0x240003fc
 8000f84:	240054d8 	.word	0x240054d8

08000f88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f8c:	4b37      	ldr	r3, [pc, #220]	; (800106c <SystemInit+0xe4>)
 8000f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f92:	4a36      	ldr	r2, [pc, #216]	; (800106c <SystemInit+0xe4>)
 8000f94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f9c:	4b34      	ldr	r3, [pc, #208]	; (8001070 <SystemInit+0xe8>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f003 030f 	and.w	r3, r3, #15
 8000fa4:	2b06      	cmp	r3, #6
 8000fa6:	d807      	bhi.n	8000fb8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fa8:	4b31      	ldr	r3, [pc, #196]	; (8001070 <SystemInit+0xe8>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f023 030f 	bic.w	r3, r3, #15
 8000fb0:	4a2f      	ldr	r2, [pc, #188]	; (8001070 <SystemInit+0xe8>)
 8000fb2:	f043 0307 	orr.w	r3, r3, #7
 8000fb6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000fb8:	4b2e      	ldr	r3, [pc, #184]	; (8001074 <SystemInit+0xec>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a2d      	ldr	r2, [pc, #180]	; (8001074 <SystemInit+0xec>)
 8000fbe:	f043 0301 	orr.w	r3, r3, #1
 8000fc2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000fc4:	4b2b      	ldr	r3, [pc, #172]	; (8001074 <SystemInit+0xec>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000fca:	4b2a      	ldr	r3, [pc, #168]	; (8001074 <SystemInit+0xec>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	4929      	ldr	r1, [pc, #164]	; (8001074 <SystemInit+0xec>)
 8000fd0:	4b29      	ldr	r3, [pc, #164]	; (8001078 <SystemInit+0xf0>)
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fd6:	4b26      	ldr	r3, [pc, #152]	; (8001070 <SystemInit+0xe8>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f003 0308 	and.w	r3, r3, #8
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d007      	beq.n	8000ff2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fe2:	4b23      	ldr	r3, [pc, #140]	; (8001070 <SystemInit+0xe8>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f023 030f 	bic.w	r3, r3, #15
 8000fea:	4a21      	ldr	r2, [pc, #132]	; (8001070 <SystemInit+0xe8>)
 8000fec:	f043 0307 	orr.w	r3, r3, #7
 8000ff0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ff2:	4b20      	ldr	r3, [pc, #128]	; (8001074 <SystemInit+0xec>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ff8:	4b1e      	ldr	r3, [pc, #120]	; (8001074 <SystemInit+0xec>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000ffe:	4b1d      	ldr	r3, [pc, #116]	; (8001074 <SystemInit+0xec>)
 8001000:	2200      	movs	r2, #0
 8001002:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001004:	4b1b      	ldr	r3, [pc, #108]	; (8001074 <SystemInit+0xec>)
 8001006:	4a1d      	ldr	r2, [pc, #116]	; (800107c <SystemInit+0xf4>)
 8001008:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800100a:	4b1a      	ldr	r3, [pc, #104]	; (8001074 <SystemInit+0xec>)
 800100c:	4a1c      	ldr	r2, [pc, #112]	; (8001080 <SystemInit+0xf8>)
 800100e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001010:	4b18      	ldr	r3, [pc, #96]	; (8001074 <SystemInit+0xec>)
 8001012:	4a1c      	ldr	r2, [pc, #112]	; (8001084 <SystemInit+0xfc>)
 8001014:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001016:	4b17      	ldr	r3, [pc, #92]	; (8001074 <SystemInit+0xec>)
 8001018:	2200      	movs	r2, #0
 800101a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800101c:	4b15      	ldr	r3, [pc, #84]	; (8001074 <SystemInit+0xec>)
 800101e:	4a19      	ldr	r2, [pc, #100]	; (8001084 <SystemInit+0xfc>)
 8001020:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001022:	4b14      	ldr	r3, [pc, #80]	; (8001074 <SystemInit+0xec>)
 8001024:	2200      	movs	r2, #0
 8001026:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <SystemInit+0xec>)
 800102a:	4a16      	ldr	r2, [pc, #88]	; (8001084 <SystemInit+0xfc>)
 800102c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800102e:	4b11      	ldr	r3, [pc, #68]	; (8001074 <SystemInit+0xec>)
 8001030:	2200      	movs	r2, #0
 8001032:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001034:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <SystemInit+0xec>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a0e      	ldr	r2, [pc, #56]	; (8001074 <SystemInit+0xec>)
 800103a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800103e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <SystemInit+0xec>)
 8001042:	2200      	movs	r2, #0
 8001044:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001046:	4b10      	ldr	r3, [pc, #64]	; (8001088 <SystemInit+0x100>)
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	4b10      	ldr	r3, [pc, #64]	; (800108c <SystemInit+0x104>)
 800104c:	4013      	ands	r3, r2
 800104e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001052:	d202      	bcs.n	800105a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001054:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <SystemInit+0x108>)
 8001056:	2201      	movs	r2, #1
 8001058:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <SystemInit+0x10c>)
 800105c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001060:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001062:	bf00      	nop
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000ed00 	.word	0xe000ed00
 8001070:	52002000 	.word	0x52002000
 8001074:	58024400 	.word	0x58024400
 8001078:	eaf6ed7f 	.word	0xeaf6ed7f
 800107c:	02020200 	.word	0x02020200
 8001080:	01ff0000 	.word	0x01ff0000
 8001084:	01010280 	.word	0x01010280
 8001088:	5c001000 	.word	0x5c001000
 800108c:	ffff0000 	.word	0xffff0000
 8001090:	51008108 	.word	0x51008108
 8001094:	52004000 	.word	0x52004000

08001098 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800109c:	4b22      	ldr	r3, [pc, #136]	; (8001128 <MX_USART3_UART_Init+0x90>)
 800109e:	4a23      	ldr	r2, [pc, #140]	; (800112c <MX_USART3_UART_Init+0x94>)
 80010a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010a2:	4b21      	ldr	r3, [pc, #132]	; (8001128 <MX_USART3_UART_Init+0x90>)
 80010a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010aa:	4b1f      	ldr	r3, [pc, #124]	; (8001128 <MX_USART3_UART_Init+0x90>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010b0:	4b1d      	ldr	r3, [pc, #116]	; (8001128 <MX_USART3_UART_Init+0x90>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010b6:	4b1c      	ldr	r3, [pc, #112]	; (8001128 <MX_USART3_UART_Init+0x90>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010bc:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <MX_USART3_UART_Init+0x90>)
 80010be:	220c      	movs	r2, #12
 80010c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010c2:	4b19      	ldr	r3, [pc, #100]	; (8001128 <MX_USART3_UART_Init+0x90>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c8:	4b17      	ldr	r3, [pc, #92]	; (8001128 <MX_USART3_UART_Init+0x90>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ce:	4b16      	ldr	r3, [pc, #88]	; (8001128 <MX_USART3_UART_Init+0x90>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010d4:	4b14      	ldr	r3, [pc, #80]	; (8001128 <MX_USART3_UART_Init+0x90>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010da:	4b13      	ldr	r3, [pc, #76]	; (8001128 <MX_USART3_UART_Init+0x90>)
 80010dc:	2200      	movs	r2, #0
 80010de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010e0:	4811      	ldr	r0, [pc, #68]	; (8001128 <MX_USART3_UART_Init+0x90>)
 80010e2:	f004 fb95 	bl	8005810 <HAL_UART_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80010ec:	f7ff fde0 	bl	8000cb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010f0:	2100      	movs	r1, #0
 80010f2:	480d      	ldr	r0, [pc, #52]	; (8001128 <MX_USART3_UART_Init+0x90>)
 80010f4:	f005 fc25 	bl	8006942 <HAL_UARTEx_SetTxFifoThreshold>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80010fe:	f7ff fdd7 	bl	8000cb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001102:	2100      	movs	r1, #0
 8001104:	4808      	ldr	r0, [pc, #32]	; (8001128 <MX_USART3_UART_Init+0x90>)
 8001106:	f005 fc5a 	bl	80069be <HAL_UARTEx_SetRxFifoThreshold>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001110:	f7ff fdce 	bl	8000cb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001114:	4804      	ldr	r0, [pc, #16]	; (8001128 <MX_USART3_UART_Init+0x90>)
 8001116:	f005 fbdb 	bl	80068d0 <HAL_UARTEx_DisableFifoMode>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001120:	f7ff fdc6 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	24000400 	.word	0x24000400
 800112c:	40004800 	.word	0x40004800

08001130 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b0ba      	sub	sp, #232	; 0xe8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001148:	f107 0310 	add.w	r3, r7, #16
 800114c:	22c0      	movs	r2, #192	; 0xc0
 800114e:	2100      	movs	r1, #0
 8001150:	4618      	mov	r0, r3
 8001152:	f009 fb7c 	bl	800a84e <memset>
  if(uartHandle->Instance==USART3)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a27      	ldr	r2, [pc, #156]	; (80011f8 <HAL_UART_MspInit+0xc8>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d146      	bne.n	80011ee <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001160:	f04f 0202 	mov.w	r2, #2
 8001164:	f04f 0300 	mov.w	r3, #0
 8001168:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800116c:	2300      	movs	r3, #0
 800116e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001172:	f107 0310 	add.w	r3, r7, #16
 8001176:	4618      	mov	r0, r3
 8001178:	f002 fa44 	bl	8003604 <HAL_RCCEx_PeriphCLKConfig>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001182:	f7ff fd95 	bl	8000cb0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001186:	4b1d      	ldr	r3, [pc, #116]	; (80011fc <HAL_UART_MspInit+0xcc>)
 8001188:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800118c:	4a1b      	ldr	r2, [pc, #108]	; (80011fc <HAL_UART_MspInit+0xcc>)
 800118e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001192:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001196:	4b19      	ldr	r3, [pc, #100]	; (80011fc <HAL_UART_MspInit+0xcc>)
 8001198:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800119c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a4:	4b15      	ldr	r3, [pc, #84]	; (80011fc <HAL_UART_MspInit+0xcc>)
 80011a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011aa:	4a14      	ldr	r2, [pc, #80]	; (80011fc <HAL_UART_MspInit+0xcc>)
 80011ac:	f043 0308 	orr.w	r3, r3, #8
 80011b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011b4:	4b11      	ldr	r3, [pc, #68]	; (80011fc <HAL_UART_MspInit+0xcc>)
 80011b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ba:	f003 0308 	and.w	r3, r3, #8
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80011c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	2302      	movs	r3, #2
 80011cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2300      	movs	r3, #0
 80011d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011dc:	2307      	movs	r3, #7
 80011de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011e2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011e6:	4619      	mov	r1, r3
 80011e8:	4805      	ldr	r0, [pc, #20]	; (8001200 <HAL_UART_MspInit+0xd0>)
 80011ea:	f000 fe87 	bl	8001efc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80011ee:	bf00      	nop
 80011f0:	37e8      	adds	r7, #232	; 0xe8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40004800 	.word	0x40004800
 80011fc:	58024400 	.word	0x58024400
 8001200:	58020c00 	.word	0x58020c00

08001204 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001208:	4b15      	ldr	r3, [pc, #84]	; (8001260 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800120a:	4a16      	ldr	r2, [pc, #88]	; (8001264 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800120c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800120e:	4b14      	ldr	r3, [pc, #80]	; (8001260 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001210:	2209      	movs	r2, #9
 8001212:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001214:	4b12      	ldr	r3, [pc, #72]	; (8001260 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001216:	2202      	movs	r2, #2
 8001218:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800121a:	4b11      	ldr	r3, [pc, #68]	; (8001260 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800121c:	2200      	movs	r2, #0
 800121e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001220:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001222:	2202      	movs	r2, #2
 8001224:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001226:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001228:	2201      	movs	r2, #1
 800122a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800122e:	2200      	movs	r2, #0
 8001230:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001232:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001234:	2200      	movs	r2, #0
 8001236:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001238:	4b09      	ldr	r3, [pc, #36]	; (8001260 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800123a:	2201      	movs	r2, #1
 800123c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800123e:	4b08      	ldr	r3, [pc, #32]	; (8001260 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001240:	2201      	movs	r2, #1
 8001242:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001244:	4b06      	ldr	r3, [pc, #24]	; (8001260 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001246:	2200      	movs	r2, #0
 8001248:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800124a:	4805      	ldr	r0, [pc, #20]	; (8001260 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800124c:	f001 f81f 	bl	800228e <HAL_PCD_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001256:	f7ff fd2b 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	24000494 	.word	0x24000494
 8001264:	40080000 	.word	0x40080000

08001268 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b0ba      	sub	sp, #232	; 0xe8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001280:	f107 0310 	add.w	r3, r7, #16
 8001284:	22c0      	movs	r2, #192	; 0xc0
 8001286:	2100      	movs	r1, #0
 8001288:	4618      	mov	r0, r3
 800128a:	f009 fae0 	bl	800a84e <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a30      	ldr	r2, [pc, #192]	; (8001354 <HAL_PCD_MspInit+0xec>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d159      	bne.n	800134c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001298:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800129c:	f04f 0300 	mov.w	r3, #0
 80012a0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80012a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80012a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ac:	f107 0310 	add.w	r3, r7, #16
 80012b0:	4618      	mov	r0, r3
 80012b2:	f002 f9a7 	bl	8003604 <HAL_RCCEx_PeriphCLKConfig>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80012bc:	f7ff fcf8 	bl	8000cb0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80012c0:	f001 f968 	bl	8002594 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c4:	4b24      	ldr	r3, [pc, #144]	; (8001358 <HAL_PCD_MspInit+0xf0>)
 80012c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ca:	4a23      	ldr	r2, [pc, #140]	; (8001358 <HAL_PCD_MspInit+0xf0>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012d4:	4b20      	ldr	r3, [pc, #128]	; (8001358 <HAL_PCD_MspInit+0xf0>)
 80012d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80012e2:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80012e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ea:	2302      	movs	r3, #2
 80012ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2300      	movs	r3, #0
 80012f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80012fc:	230a      	movs	r3, #10
 80012fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001302:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001306:	4619      	mov	r1, r3
 8001308:	4814      	ldr	r0, [pc, #80]	; (800135c <HAL_PCD_MspInit+0xf4>)
 800130a:	f000 fdf7 	bl	8001efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800130e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001312:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001316:	2300      	movs	r3, #0
 8001318:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001322:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001326:	4619      	mov	r1, r3
 8001328:	480c      	ldr	r0, [pc, #48]	; (800135c <HAL_PCD_MspInit+0xf4>)
 800132a:	f000 fde7 	bl	8001efc <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800132e:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <HAL_PCD_MspInit+0xf0>)
 8001330:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001334:	4a08      	ldr	r2, [pc, #32]	; (8001358 <HAL_PCD_MspInit+0xf0>)
 8001336:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800133a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <HAL_PCD_MspInit+0xf0>)
 8001340:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001344:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800134c:	bf00      	nop
 800134e:	37e8      	adds	r7, #232	; 0xe8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40080000 	.word	0x40080000
 8001358:	58024400 	.word	0x58024400
 800135c:	58020000 	.word	0x58020000

08001360 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001360:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001398 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001364:	f7ff fe10 	bl	8000f88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001368:	480c      	ldr	r0, [pc, #48]	; (800139c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800136a:	490d      	ldr	r1, [pc, #52]	; (80013a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800136c:	4a0d      	ldr	r2, [pc, #52]	; (80013a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001370:	e002      	b.n	8001378 <LoopCopyDataInit>

08001372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001376:	3304      	adds	r3, #4

08001378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800137a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800137c:	d3f9      	bcc.n	8001372 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800137e:	4a0a      	ldr	r2, [pc, #40]	; (80013a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001380:	4c0a      	ldr	r4, [pc, #40]	; (80013ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001384:	e001      	b.n	800138a <LoopFillZerobss>

08001386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001388:	3204      	adds	r2, #4

0800138a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800138a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800138c:	d3fb      	bcc.n	8001386 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800138e:	f009 fb0d 	bl	800a9ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001392:	f7ff fbb7 	bl	8000b04 <main>
  bx  lr
 8001396:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001398:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800139c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80013a0:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 80013a4:	0800ce3c 	.word	0x0800ce3c
  ldr r2, =_sbss
 80013a8:	2400029c 	.word	0x2400029c
  ldr r4, =_ebss
 80013ac:	240054d8 	.word	0x240054d8

080013b0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013b0:	e7fe      	b.n	80013b0 <ADC3_IRQHandler>
	...

080013b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ba:	2003      	movs	r0, #3
 80013bc:	f000 f947 	bl	800164e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80013c0:	f001 ff08 	bl	80031d4 <HAL_RCC_GetSysClockFreq>
 80013c4:	4602      	mov	r2, r0
 80013c6:	4b15      	ldr	r3, [pc, #84]	; (800141c <HAL_Init+0x68>)
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	0a1b      	lsrs	r3, r3, #8
 80013cc:	f003 030f 	and.w	r3, r3, #15
 80013d0:	4913      	ldr	r1, [pc, #76]	; (8001420 <HAL_Init+0x6c>)
 80013d2:	5ccb      	ldrb	r3, [r1, r3]
 80013d4:	f003 031f 	and.w	r3, r3, #31
 80013d8:	fa22 f303 	lsr.w	r3, r2, r3
 80013dc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013de:	4b0f      	ldr	r3, [pc, #60]	; (800141c <HAL_Init+0x68>)
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	f003 030f 	and.w	r3, r3, #15
 80013e6:	4a0e      	ldr	r2, [pc, #56]	; (8001420 <HAL_Init+0x6c>)
 80013e8:	5cd3      	ldrb	r3, [r2, r3]
 80013ea:	f003 031f 	and.w	r3, r3, #31
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	fa22 f303 	lsr.w	r3, r2, r3
 80013f4:	4a0b      	ldr	r2, [pc, #44]	; (8001424 <HAL_Init+0x70>)
 80013f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013f8:	4a0b      	ldr	r2, [pc, #44]	; (8001428 <HAL_Init+0x74>)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013fe:	200f      	movs	r0, #15
 8001400:	f7ff fc7a 	bl	8000cf8 <HAL_InitTick>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e002      	b.n	8001414 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800140e:	f7ff fc55 	bl	8000cbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001412:	2300      	movs	r3, #0
}
 8001414:	4618      	mov	r0, r3
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	58024400 	.word	0x58024400
 8001420:	0800ca80 	.word	0x0800ca80
 8001424:	24000004 	.word	0x24000004
 8001428:	24000000 	.word	0x24000000

0800142c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001430:	4b06      	ldr	r3, [pc, #24]	; (800144c <HAL_IncTick+0x20>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	461a      	mov	r2, r3
 8001436:	4b06      	ldr	r3, [pc, #24]	; (8001450 <HAL_IncTick+0x24>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4413      	add	r3, r2
 800143c:	4a04      	ldr	r2, [pc, #16]	; (8001450 <HAL_IncTick+0x24>)
 800143e:	6013      	str	r3, [r2, #0]
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	2400000c 	.word	0x2400000c
 8001450:	240009a0 	.word	0x240009a0

08001454 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  return uwTick;
 8001458:	4b03      	ldr	r3, [pc, #12]	; (8001468 <HAL_GetTick+0x14>)
 800145a:	681b      	ldr	r3, [r3, #0]
}
 800145c:	4618      	mov	r0, r3
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	240009a0 	.word	0x240009a0

0800146c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001474:	f7ff ffee 	bl	8001454 <HAL_GetTick>
 8001478:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001484:	d005      	beq.n	8001492 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001486:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <HAL_Delay+0x44>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	461a      	mov	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	4413      	add	r3, r2
 8001490:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001492:	bf00      	nop
 8001494:	f7ff ffde 	bl	8001454 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d8f7      	bhi.n	8001494 <HAL_Delay+0x28>
  {
  }
}
 80014a4:	bf00      	nop
 80014a6:	bf00      	nop
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	2400000c 	.word	0x2400000c

080014b4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80014b8:	4b03      	ldr	r3, [pc, #12]	; (80014c8 <HAL_GetREVID+0x14>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	0c1b      	lsrs	r3, r3, #16
}
 80014be:	4618      	mov	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	5c001000 	.word	0x5c001000

080014cc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80014dc:	4904      	ldr	r1, [pc, #16]	; (80014f0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	604b      	str	r3, [r1, #4]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	58000400 	.word	0x58000400

080014f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001504:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <__NVIC_SetPriorityGrouping+0x40>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001510:	4013      	ands	r3, r2
 8001512:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <__NVIC_SetPriorityGrouping+0x44>)
 800151e:	4313      	orrs	r3, r2
 8001520:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001522:	4a04      	ldr	r2, [pc, #16]	; (8001534 <__NVIC_SetPriorityGrouping+0x40>)
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	60d3      	str	r3, [r2, #12]
}
 8001528:	bf00      	nop
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	e000ed00 	.word	0xe000ed00
 8001538:	05fa0000 	.word	0x05fa0000

0800153c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001540:	4b04      	ldr	r3, [pc, #16]	; (8001554 <__NVIC_GetPriorityGrouping+0x18>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	0a1b      	lsrs	r3, r3, #8
 8001546:	f003 0307 	and.w	r3, r3, #7
}
 800154a:	4618      	mov	r0, r3
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001562:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001566:	2b00      	cmp	r3, #0
 8001568:	db0b      	blt.n	8001582 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800156a:	88fb      	ldrh	r3, [r7, #6]
 800156c:	f003 021f 	and.w	r2, r3, #31
 8001570:	4907      	ldr	r1, [pc, #28]	; (8001590 <__NVIC_EnableIRQ+0x38>)
 8001572:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001576:	095b      	lsrs	r3, r3, #5
 8001578:	2001      	movs	r0, #1
 800157a:	fa00 f202 	lsl.w	r2, r0, r2
 800157e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	e000e100 	.word	0xe000e100

08001594 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	6039      	str	r1, [r7, #0]
 800159e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	db0a      	blt.n	80015be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	490c      	ldr	r1, [pc, #48]	; (80015e0 <__NVIC_SetPriority+0x4c>)
 80015ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015b2:	0112      	lsls	r2, r2, #4
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	440b      	add	r3, r1
 80015b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015bc:	e00a      	b.n	80015d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	4908      	ldr	r1, [pc, #32]	; (80015e4 <__NVIC_SetPriority+0x50>)
 80015c4:	88fb      	ldrh	r3, [r7, #6]
 80015c6:	f003 030f 	and.w	r3, r3, #15
 80015ca:	3b04      	subs	r3, #4
 80015cc:	0112      	lsls	r2, r2, #4
 80015ce:	b2d2      	uxtb	r2, r2
 80015d0:	440b      	add	r3, r1
 80015d2:	761a      	strb	r2, [r3, #24]
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	e000e100 	.word	0xe000e100
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b089      	sub	sp, #36	; 0x24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f1c3 0307 	rsb	r3, r3, #7
 8001602:	2b04      	cmp	r3, #4
 8001604:	bf28      	it	cs
 8001606:	2304      	movcs	r3, #4
 8001608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3304      	adds	r3, #4
 800160e:	2b06      	cmp	r3, #6
 8001610:	d902      	bls.n	8001618 <NVIC_EncodePriority+0x30>
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3b03      	subs	r3, #3
 8001616:	e000      	b.n	800161a <NVIC_EncodePriority+0x32>
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800161c:	f04f 32ff 	mov.w	r2, #4294967295
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43da      	mvns	r2, r3
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	401a      	ands	r2, r3
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001630:	f04f 31ff 	mov.w	r1, #4294967295
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	fa01 f303 	lsl.w	r3, r1, r3
 800163a:	43d9      	mvns	r1, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001640:	4313      	orrs	r3, r2
         );
}
 8001642:	4618      	mov	r0, r3
 8001644:	3724      	adds	r7, #36	; 0x24
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b082      	sub	sp, #8
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f7ff ff4c 	bl	80014f4 <__NVIC_SetPriorityGrouping>
}
 800165c:	bf00      	nop
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
 8001670:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001672:	f7ff ff63 	bl	800153c <__NVIC_GetPriorityGrouping>
 8001676:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	68b9      	ldr	r1, [r7, #8]
 800167c:	6978      	ldr	r0, [r7, #20]
 800167e:	f7ff ffb3 	bl	80015e8 <NVIC_EncodePriority>
 8001682:	4602      	mov	r2, r0
 8001684:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001688:	4611      	mov	r1, r2
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff ff82 	bl	8001594 <__NVIC_SetPriority>
}
 8001690:	bf00      	nop
 8001692:	3718      	adds	r7, #24
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff ff56 	bl	8001558 <__NVIC_EnableIRQ>
}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d101      	bne.n	80016c6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e0cf      	b.n	8001866 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d106      	bne.n	80016de <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2223      	movs	r2, #35	; 0x23
 80016d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f7ff f823 	bl	8000724 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016de:	4b64      	ldr	r3, [pc, #400]	; (8001870 <HAL_ETH_Init+0x1bc>)
 80016e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016e4:	4a62      	ldr	r2, [pc, #392]	; (8001870 <HAL_ETH_Init+0x1bc>)
 80016e6:	f043 0302 	orr.w	r3, r3, #2
 80016ea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80016ee:	4b60      	ldr	r3, [pc, #384]	; (8001870 <HAL_ETH_Init+0x1bc>)
 80016f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	60bb      	str	r3, [r7, #8]
 80016fa:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	7a1b      	ldrb	r3, [r3, #8]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d103      	bne.n	800170c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001704:	2000      	movs	r0, #0
 8001706:	f7ff fee1 	bl	80014cc <HAL_SYSCFG_ETHInterfaceSelect>
 800170a:	e003      	b.n	8001714 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800170c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001710:	f7ff fedc 	bl	80014cc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001714:	4b57      	ldr	r3, [pc, #348]	; (8001874 <HAL_ETH_Init+0x1c0>)
 8001716:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	6812      	ldr	r2, [r2, #0]
 8001726:	f043 0301 	orr.w	r3, r3, #1
 800172a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800172e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001730:	f7ff fe90 	bl	8001454 <HAL_GetTick>
 8001734:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001736:	e011      	b.n	800175c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001738:	f7ff fe8c 	bl	8001454 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001746:	d909      	bls.n	800175c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2204      	movs	r2, #4
 800174c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	22e0      	movs	r2, #224	; 0xe0
 8001754:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e084      	b.n	8001866 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1e4      	bne.n	8001738 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f000 f886 	bl	8001880 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001774:	f001 fea8 	bl	80034c8 <HAL_RCC_GetHCLKFreq>
 8001778:	4603      	mov	r3, r0
 800177a:	4a3f      	ldr	r2, [pc, #252]	; (8001878 <HAL_ETH_Init+0x1c4>)
 800177c:	fba2 2303 	umull	r2, r3, r2, r3
 8001780:	0c9a      	lsrs	r2, r3, #18
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	3a01      	subs	r2, #1
 8001788:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f000 fa71 	bl	8001c74 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800179a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800179e:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	6812      	ldr	r2, [r2, #0]
 80017a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80017aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017ae:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	f003 0303 	and.w	r3, r3, #3
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d009      	beq.n	80017d2 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2201      	movs	r2, #1
 80017c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	22e0      	movs	r2, #224	; 0xe0
 80017ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e049      	b.n	8001866 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017da:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80017de:	4b27      	ldr	r3, [pc, #156]	; (800187c <HAL_ETH_Init+0x1c8>)
 80017e0:	4013      	ands	r3, r2
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	6952      	ldr	r2, [r2, #20]
 80017e6:	0051      	lsls	r1, r2, #1
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	6812      	ldr	r2, [r2, #0]
 80017ec:	430b      	orrs	r3, r1
 80017ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017f2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f000 fad9 	bl	8001dae <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f000 fb1f 	bl	8001e40 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	3305      	adds	r3, #5
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	021a      	lsls	r2, r3, #8
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	3304      	adds	r3, #4
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	4619      	mov	r1, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	430a      	orrs	r2, r1
 800181c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	3303      	adds	r3, #3
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	061a      	lsls	r2, r3, #24
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	3302      	adds	r3, #2
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	041b      	lsls	r3, r3, #16
 8001834:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	3301      	adds	r3, #1
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001840:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800184e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001850:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2210      	movs	r2, #16
 8001860:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	58024400 	.word	0x58024400
 8001874:	58000400 	.word	0x58000400
 8001878:	431bde83 	.word	0x431bde83
 800187c:	ffff8001 	.word	0xffff8001

08001880 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001890:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001898:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800189a:	f001 fe15 	bl	80034c8 <HAL_RCC_GetHCLKFreq>
 800189e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	4a1e      	ldr	r2, [pc, #120]	; (800191c <HAL_ETH_SetMDIOClockRange+0x9c>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d908      	bls.n	80018ba <HAL_ETH_SetMDIOClockRange+0x3a>
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	4a1d      	ldr	r2, [pc, #116]	; (8001920 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d804      	bhi.n	80018ba <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	e027      	b.n	800190a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	4a18      	ldr	r2, [pc, #96]	; (8001920 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d908      	bls.n	80018d4 <HAL_ETH_SetMDIOClockRange+0x54>
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	4a17      	ldr	r2, [pc, #92]	; (8001924 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d204      	bcs.n	80018d4 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	e01a      	b.n	800190a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	4a13      	ldr	r2, [pc, #76]	; (8001924 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d303      	bcc.n	80018e4 <HAL_ETH_SetMDIOClockRange+0x64>
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	4a12      	ldr	r2, [pc, #72]	; (8001928 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d911      	bls.n	8001908 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	4a10      	ldr	r2, [pc, #64]	; (8001928 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d908      	bls.n	80018fe <HAL_ETH_SetMDIOClockRange+0x7e>
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	4a0f      	ldr	r2, [pc, #60]	; (800192c <HAL_ETH_SetMDIOClockRange+0xac>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d804      	bhi.n	80018fe <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	e005      	b.n	800190a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	e000      	b.n	800190a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001908:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001914:	bf00      	nop
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	01312cff 	.word	0x01312cff
 8001920:	02160ebf 	.word	0x02160ebf
 8001924:	03938700 	.word	0x03938700
 8001928:	05f5e0ff 	.word	0x05f5e0ff
 800192c:	08f0d17f 	.word	0x08f0d17f

08001930 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001942:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	791b      	ldrb	r3, [r3, #4]
 8001948:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800194a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	7b1b      	ldrb	r3, [r3, #12]
 8001950:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001952:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	7b5b      	ldrb	r3, [r3, #13]
 8001958:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800195a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	7b9b      	ldrb	r3, [r3, #14]
 8001960:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001962:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	7bdb      	ldrb	r3, [r3, #15]
 8001968:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800196a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	7c12      	ldrb	r2, [r2, #16]
 8001970:	2a00      	cmp	r2, #0
 8001972:	d102      	bne.n	800197a <ETH_SetMACConfig+0x4a>
 8001974:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001978:	e000      	b.n	800197c <ETH_SetMACConfig+0x4c>
 800197a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800197c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	7c52      	ldrb	r2, [r2, #17]
 8001982:	2a00      	cmp	r2, #0
 8001984:	d102      	bne.n	800198c <ETH_SetMACConfig+0x5c>
 8001986:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800198a:	e000      	b.n	800198e <ETH_SetMACConfig+0x5e>
 800198c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800198e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	7c9b      	ldrb	r3, [r3, #18]
 8001994:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001996:	431a      	orrs	r2, r3
               macconf->Speed |
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800199c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80019a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	7f1b      	ldrb	r3, [r3, #28]
 80019a8:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80019aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	7f5b      	ldrb	r3, [r3, #29]
 80019b0:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80019b2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	7f92      	ldrb	r2, [r2, #30]
 80019b8:	2a00      	cmp	r2, #0
 80019ba:	d102      	bne.n	80019c2 <ETH_SetMACConfig+0x92>
 80019bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019c0:	e000      	b.n	80019c4 <ETH_SetMACConfig+0x94>
 80019c2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80019c4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	7fdb      	ldrb	r3, [r3, #31]
 80019ca:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80019cc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80019ce:	683a      	ldr	r2, [r7, #0]
 80019d0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80019d4:	2a00      	cmp	r2, #0
 80019d6:	d102      	bne.n	80019de <ETH_SetMACConfig+0xae>
 80019d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019dc:	e000      	b.n	80019e0 <ETH_SetMACConfig+0xb0>
 80019de:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80019e0:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80019e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80019ee:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80019f0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80019f6:	4313      	orrs	r3, r2
 80019f8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	4b56      	ldr	r3, [pc, #344]	; (8001b5c <ETH_SetMACConfig+0x22c>)
 8001a02:	4013      	ands	r3, r2
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	6812      	ldr	r2, [r2, #0]
 8001a08:	68f9      	ldr	r1, [r7, #12]
 8001a0a:	430b      	orrs	r3, r1
 8001a0c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a12:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a1a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001a1c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a24:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001a26:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001a2e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001a30:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001a38:	2a00      	cmp	r2, #0
 8001a3a:	d102      	bne.n	8001a42 <ETH_SetMACConfig+0x112>
 8001a3c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a40:	e000      	b.n	8001a44 <ETH_SetMACConfig+0x114>
 8001a42:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001a44:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	4b42      	ldr	r3, [pc, #264]	; (8001b60 <ETH_SetMACConfig+0x230>)
 8001a56:	4013      	ands	r3, r2
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	6812      	ldr	r2, [r2, #0]
 8001a5c:	68f9      	ldr	r1, [r7, #12]
 8001a5e:	430b      	orrs	r3, r1
 8001a60:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a68:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	68da      	ldr	r2, [r3, #12]
 8001a78:	4b3a      	ldr	r3, [pc, #232]	; (8001b64 <ETH_SetMACConfig+0x234>)
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	6812      	ldr	r2, [r2, #0]
 8001a80:	68f9      	ldr	r1, [r7, #12]
 8001a82:	430b      	orrs	r3, r1
 8001a84:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001a8c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001a92:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001a9a:	2a00      	cmp	r2, #0
 8001a9c:	d101      	bne.n	8001aa2 <ETH_SetMACConfig+0x172>
 8001a9e:	2280      	movs	r2, #128	; 0x80
 8001aa0:	e000      	b.n	8001aa4 <ETH_SetMACConfig+0x174>
 8001aa2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001aa4:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aaa:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001aac:	4313      	orrs	r3, r2
 8001aae:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ab6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001aba:	4013      	ands	r3, r2
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6812      	ldr	r2, [r2, #0]
 8001ac0:	68f9      	ldr	r1, [r7, #12]
 8001ac2:	430b      	orrs	r3, r1
 8001ac4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001acc:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001ad4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ae2:	f023 0103 	bic.w	r1, r3, #3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	430a      	orrs	r2, r1
 8001aee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001afa:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001b16:	2a00      	cmp	r2, #0
 8001b18:	d101      	bne.n	8001b1e <ETH_SetMACConfig+0x1ee>
 8001b1a:	2240      	movs	r2, #64	; 0x40
 8001b1c:	e000      	b.n	8001b20 <ETH_SetMACConfig+0x1f0>
 8001b1e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001b20:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001b28:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001b2a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001b32:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001b34:	4313      	orrs	r3, r2
 8001b36:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001b40:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	68fa      	ldr	r2, [r7, #12]
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001b50:	bf00      	nop
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	00048083 	.word	0x00048083
 8001b60:	c0f88000 	.word	0xc0f88000
 8001b64:	fffffef0 	.word	0xfffffef0

08001b68 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	4b38      	ldr	r3, [pc, #224]	; (8001c60 <ETH_SetDMAConfig+0xf8>)
 8001b7e:	4013      	ands	r3, r2
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	6811      	ldr	r1, [r2, #0]
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	6812      	ldr	r2, [r2, #0]
 8001b88:	430b      	orrs	r3, r1
 8001b8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b8e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	791b      	ldrb	r3, [r3, #4]
 8001b94:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001b9a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	7b1b      	ldrb	r3, [r3, #12]
 8001ba0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bae:	685a      	ldr	r2, [r3, #4]
 8001bb0:	4b2c      	ldr	r3, [pc, #176]	; (8001c64 <ETH_SetDMAConfig+0xfc>)
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	6812      	ldr	r2, [r2, #0]
 8001bb8:	68f9      	ldr	r1, [r7, #12]
 8001bba:	430b      	orrs	r3, r1
 8001bbc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001bc0:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	7b5b      	ldrb	r3, [r3, #13]
 8001bc6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bd8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001bdc:	4b22      	ldr	r3, [pc, #136]	; (8001c68 <ETH_SetDMAConfig+0x100>)
 8001bde:	4013      	ands	r3, r2
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	6812      	ldr	r2, [r2, #0]
 8001be4:	68f9      	ldr	r1, [r7, #12]
 8001be6:	430b      	orrs	r3, r1
 8001be8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001bec:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	7d1b      	ldrb	r3, [r3, #20]
 8001bf8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001bfa:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	7f5b      	ldrb	r3, [r3, #29]
 8001c00:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001c02:	4313      	orrs	r3, r2
 8001c04:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c0e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001c12:	4b16      	ldr	r3, [pc, #88]	; (8001c6c <ETH_SetDMAConfig+0x104>)
 8001c14:	4013      	ands	r3, r2
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	6812      	ldr	r2, [r2, #0]
 8001c1a:	68f9      	ldr	r1, [r7, #12]
 8001c1c:	430b      	orrs	r3, r1
 8001c1e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c22:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	7f1b      	ldrb	r3, [r3, #28]
 8001c2a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001c30:	4313      	orrs	r3, r2
 8001c32:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c3c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001c40:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <ETH_SetDMAConfig+0x108>)
 8001c42:	4013      	ands	r3, r2
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	6812      	ldr	r2, [r2, #0]
 8001c48:	68f9      	ldr	r1, [r7, #12]
 8001c4a:	430b      	orrs	r3, r1
 8001c4c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c50:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001c54:	bf00      	nop
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	ffff87fd 	.word	0xffff87fd
 8001c64:	ffff2ffe 	.word	0xffff2ffe
 8001c68:	fffec000 	.word	0xfffec000
 8001c6c:	ffc0efef 	.word	0xffc0efef
 8001c70:	7fc0ffff 	.word	0x7fc0ffff

08001c74 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b0a4      	sub	sp, #144	; 0x90
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001c82:	2300      	movs	r3, #0
 8001c84:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001c86:	2300      	movs	r3, #0
 8001c88:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001c92:	2301      	movs	r3, #1
 8001c94:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001caa:	2301      	movs	r3, #1
 8001cac:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001cb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cb4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001ccc:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001cd0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001d00:	2300      	movs	r3, #0
 8001d02:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001d06:	2301      	movs	r3, #1
 8001d08:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001d0c:	2320      	movs	r3, #32
 8001d0e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001d12:	2301      	movs	r3, #1
 8001d14:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001d1e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001d24:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d28:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001d30:	2302      	movs	r3, #2
 8001d32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001d36:	2300      	movs	r3, #0
 8001d38:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001d42:	2300      	movs	r3, #0
 8001d44:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001d52:	2301      	movs	r3, #1
 8001d54:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001d58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f7ff fde6 	bl	8001930 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001d64:	2301      	movs	r3, #1
 8001d66:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001d70:	2300      	movs	r3, #0
 8001d72:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001d76:	2300      	movs	r3, #0
 8001d78:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001d7e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d82:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001d84:	2300      	movs	r3, #0
 8001d86:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001d88:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d8c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001d94:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001d98:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001d9a:	f107 0308 	add.w	r3, r7, #8
 8001d9e:	4619      	mov	r1, r3
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7ff fee1 	bl	8001b68 <ETH_SetDMAConfig>
}
 8001da6:	bf00      	nop
 8001da8:	3790      	adds	r7, #144	; 0x90
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b085      	sub	sp, #20
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001db6:	2300      	movs	r3, #0
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	e01d      	b.n	8001df8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68d9      	ldr	r1, [r3, #12]
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	4413      	add	r3, r2
 8001dc8:	00db      	lsls	r3, r3, #3
 8001dca:	440b      	add	r3, r1
 8001dcc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	2200      	movs	r2, #0
 8001de4:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001de6:	68b9      	ldr	r1, [r7, #8]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	3206      	adds	r2, #6
 8001dee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	3301      	adds	r3, #1
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2b03      	cmp	r3, #3
 8001dfc:	d9de      	bls.n	8001dbc <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	2303      	movs	r3, #3
 8001e10:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68da      	ldr	r2, [r3, #12]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e20:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68da      	ldr	r2, [r3, #12]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e30:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001e34:	bf00      	nop
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	e023      	b.n	8001e96 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6919      	ldr	r1, [r3, #16]
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	4613      	mov	r3, r2
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	4413      	add	r3, r2
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	440b      	add	r3, r1
 8001e5e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	2200      	movs	r2, #0
 8001e76:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	2200      	movs	r2, #0
 8001e82:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001e84:	68b9      	ldr	r1, [r7, #8]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	3212      	adds	r2, #18
 8001e8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	3301      	adds	r3, #1
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2b03      	cmp	r3, #3
 8001e9a:	d9d8      	bls.n	8001e4e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	691a      	ldr	r2, [r3, #16]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ed6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eea:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8001eee:	bf00      	nop
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
	...

08001efc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b089      	sub	sp, #36	; 0x24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f06:	2300      	movs	r3, #0
 8001f08:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001f0a:	4b89      	ldr	r3, [pc, #548]	; (8002130 <HAL_GPIO_Init+0x234>)
 8001f0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f0e:	e194      	b.n	800223a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	2101      	movs	r1, #1
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f000 8186 	beq.w	8002234 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 0303 	and.w	r3, r3, #3
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d005      	beq.n	8001f40 <HAL_GPIO_Init+0x44>
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f003 0303 	and.w	r3, r3, #3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d130      	bne.n	8001fa2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	68da      	ldr	r2, [r3, #12]
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f76:	2201      	movs	r2, #1
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4013      	ands	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	091b      	lsrs	r3, r3, #4
 8001f8c:	f003 0201 	and.w	r2, r3, #1
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f003 0303 	and.w	r3, r3, #3
 8001faa:	2b03      	cmp	r3, #3
 8001fac:	d017      	beq.n	8001fde <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	2203      	movs	r2, #3
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	689a      	ldr	r2, [r3, #8]
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f003 0303 	and.w	r3, r3, #3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d123      	bne.n	8002032 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	08da      	lsrs	r2, r3, #3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3208      	adds	r2, #8
 8001ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	220f      	movs	r2, #15
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43db      	mvns	r3, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4013      	ands	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	691a      	ldr	r2, [r3, #16]
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	08da      	lsrs	r2, r3, #3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3208      	adds	r2, #8
 800202c:	69b9      	ldr	r1, [r7, #24]
 800202e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	2203      	movs	r2, #3
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43db      	mvns	r3, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f003 0203 	and.w	r2, r3, #3
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800206e:	2b00      	cmp	r3, #0
 8002070:	f000 80e0 	beq.w	8002234 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002074:	4b2f      	ldr	r3, [pc, #188]	; (8002134 <HAL_GPIO_Init+0x238>)
 8002076:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800207a:	4a2e      	ldr	r2, [pc, #184]	; (8002134 <HAL_GPIO_Init+0x238>)
 800207c:	f043 0302 	orr.w	r3, r3, #2
 8002080:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002084:	4b2b      	ldr	r3, [pc, #172]	; (8002134 <HAL_GPIO_Init+0x238>)
 8002086:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002092:	4a29      	ldr	r2, [pc, #164]	; (8002138 <HAL_GPIO_Init+0x23c>)
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	089b      	lsrs	r3, r3, #2
 8002098:	3302      	adds	r3, #2
 800209a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800209e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	220f      	movs	r2, #15
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43db      	mvns	r3, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4013      	ands	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a20      	ldr	r2, [pc, #128]	; (800213c <HAL_GPIO_Init+0x240>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d052      	beq.n	8002164 <HAL_GPIO_Init+0x268>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a1f      	ldr	r2, [pc, #124]	; (8002140 <HAL_GPIO_Init+0x244>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d031      	beq.n	800212a <HAL_GPIO_Init+0x22e>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a1e      	ldr	r2, [pc, #120]	; (8002144 <HAL_GPIO_Init+0x248>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d02b      	beq.n	8002126 <HAL_GPIO_Init+0x22a>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a1d      	ldr	r2, [pc, #116]	; (8002148 <HAL_GPIO_Init+0x24c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d025      	beq.n	8002122 <HAL_GPIO_Init+0x226>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a1c      	ldr	r2, [pc, #112]	; (800214c <HAL_GPIO_Init+0x250>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d01f      	beq.n	800211e <HAL_GPIO_Init+0x222>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a1b      	ldr	r2, [pc, #108]	; (8002150 <HAL_GPIO_Init+0x254>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d019      	beq.n	800211a <HAL_GPIO_Init+0x21e>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a1a      	ldr	r2, [pc, #104]	; (8002154 <HAL_GPIO_Init+0x258>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d013      	beq.n	8002116 <HAL_GPIO_Init+0x21a>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a19      	ldr	r2, [pc, #100]	; (8002158 <HAL_GPIO_Init+0x25c>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d00d      	beq.n	8002112 <HAL_GPIO_Init+0x216>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a18      	ldr	r2, [pc, #96]	; (800215c <HAL_GPIO_Init+0x260>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d007      	beq.n	800210e <HAL_GPIO_Init+0x212>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a17      	ldr	r2, [pc, #92]	; (8002160 <HAL_GPIO_Init+0x264>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d101      	bne.n	800210a <HAL_GPIO_Init+0x20e>
 8002106:	2309      	movs	r3, #9
 8002108:	e02d      	b.n	8002166 <HAL_GPIO_Init+0x26a>
 800210a:	230a      	movs	r3, #10
 800210c:	e02b      	b.n	8002166 <HAL_GPIO_Init+0x26a>
 800210e:	2308      	movs	r3, #8
 8002110:	e029      	b.n	8002166 <HAL_GPIO_Init+0x26a>
 8002112:	2307      	movs	r3, #7
 8002114:	e027      	b.n	8002166 <HAL_GPIO_Init+0x26a>
 8002116:	2306      	movs	r3, #6
 8002118:	e025      	b.n	8002166 <HAL_GPIO_Init+0x26a>
 800211a:	2305      	movs	r3, #5
 800211c:	e023      	b.n	8002166 <HAL_GPIO_Init+0x26a>
 800211e:	2304      	movs	r3, #4
 8002120:	e021      	b.n	8002166 <HAL_GPIO_Init+0x26a>
 8002122:	2303      	movs	r3, #3
 8002124:	e01f      	b.n	8002166 <HAL_GPIO_Init+0x26a>
 8002126:	2302      	movs	r3, #2
 8002128:	e01d      	b.n	8002166 <HAL_GPIO_Init+0x26a>
 800212a:	2301      	movs	r3, #1
 800212c:	e01b      	b.n	8002166 <HAL_GPIO_Init+0x26a>
 800212e:	bf00      	nop
 8002130:	58000080 	.word	0x58000080
 8002134:	58024400 	.word	0x58024400
 8002138:	58000400 	.word	0x58000400
 800213c:	58020000 	.word	0x58020000
 8002140:	58020400 	.word	0x58020400
 8002144:	58020800 	.word	0x58020800
 8002148:	58020c00 	.word	0x58020c00
 800214c:	58021000 	.word	0x58021000
 8002150:	58021400 	.word	0x58021400
 8002154:	58021800 	.word	0x58021800
 8002158:	58021c00 	.word	0x58021c00
 800215c:	58022000 	.word	0x58022000
 8002160:	58022400 	.word	0x58022400
 8002164:	2300      	movs	r3, #0
 8002166:	69fa      	ldr	r2, [r7, #28]
 8002168:	f002 0203 	and.w	r2, r2, #3
 800216c:	0092      	lsls	r2, r2, #2
 800216e:	4093      	lsls	r3, r2
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002176:	4938      	ldr	r1, [pc, #224]	; (8002258 <HAL_GPIO_Init+0x35c>)
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	089b      	lsrs	r3, r3, #2
 800217c:	3302      	adds	r3, #2
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	43db      	mvns	r3, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4013      	ands	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80021aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80021b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	43db      	mvns	r3, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80021d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	43db      	mvns	r3, r3
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4013      	ands	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d003      	beq.n	8002204 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	4313      	orrs	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	43db      	mvns	r3, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4013      	ands	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	4313      	orrs	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	3301      	adds	r3, #1
 8002238:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	fa22 f303 	lsr.w	r3, r2, r3
 8002244:	2b00      	cmp	r3, #0
 8002246:	f47f ae63 	bne.w	8001f10 <HAL_GPIO_Init+0x14>
  }
}
 800224a:	bf00      	nop
 800224c:	bf00      	nop
 800224e:	3724      	adds	r7, #36	; 0x24
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	58000400 	.word	0x58000400

0800225c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	460b      	mov	r3, r1
 8002266:	807b      	strh	r3, [r7, #2]
 8002268:	4613      	mov	r3, r2
 800226a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800226c:	787b      	ldrb	r3, [r7, #1]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002272:	887a      	ldrh	r2, [r7, #2]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002278:	e003      	b.n	8002282 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800227a:	887b      	ldrh	r3, [r7, #2]
 800227c:	041a      	lsls	r2, r3, #16
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	619a      	str	r2, [r3, #24]
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800228e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002290:	b08f      	sub	sp, #60	; 0x3c
 8002292:	af0a      	add	r7, sp, #40	; 0x28
 8002294:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e116      	b.n	80024ce <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d106      	bne.n	80022c0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7fe ffd4 	bl	8001268 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2203      	movs	r2, #3
 80022c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d102      	bne.n	80022da <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f004 fc68 	bl	8006bb4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	603b      	str	r3, [r7, #0]
 80022ea:	687e      	ldr	r6, [r7, #4]
 80022ec:	466d      	mov	r5, sp
 80022ee:	f106 0410 	add.w	r4, r6, #16
 80022f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8002302:	1d33      	adds	r3, r6, #4
 8002304:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002306:	6838      	ldr	r0, [r7, #0]
 8002308:	f004 fbe6 	bl	8006ad8 <USB_CoreInit>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d005      	beq.n	800231e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2202      	movs	r2, #2
 8002316:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e0d7      	b.n	80024ce <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2100      	movs	r1, #0
 8002324:	4618      	mov	r0, r3
 8002326:	f004 fc56 	bl	8006bd6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800232a:	2300      	movs	r3, #0
 800232c:	73fb      	strb	r3, [r7, #15]
 800232e:	e04a      	b.n	80023c6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002330:	7bfa      	ldrb	r2, [r7, #15]
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	4413      	add	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	440b      	add	r3, r1
 800233e:	333d      	adds	r3, #61	; 0x3d
 8002340:	2201      	movs	r2, #1
 8002342:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002344:	7bfa      	ldrb	r2, [r7, #15]
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	4613      	mov	r3, r2
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	4413      	add	r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	333c      	adds	r3, #60	; 0x3c
 8002354:	7bfa      	ldrb	r2, [r7, #15]
 8002356:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002358:	7bfa      	ldrb	r2, [r7, #15]
 800235a:	7bfb      	ldrb	r3, [r7, #15]
 800235c:	b298      	uxth	r0, r3
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	4413      	add	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	3356      	adds	r3, #86	; 0x56
 800236c:	4602      	mov	r2, r0
 800236e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002370:	7bfa      	ldrb	r2, [r7, #15]
 8002372:	6879      	ldr	r1, [r7, #4]
 8002374:	4613      	mov	r3, r2
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	4413      	add	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	440b      	add	r3, r1
 800237e:	3340      	adds	r3, #64	; 0x40
 8002380:	2200      	movs	r2, #0
 8002382:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002384:	7bfa      	ldrb	r2, [r7, #15]
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	4613      	mov	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	4413      	add	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	440b      	add	r3, r1
 8002392:	3344      	adds	r3, #68	; 0x44
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002398:	7bfa      	ldrb	r2, [r7, #15]
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	4613      	mov	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	4413      	add	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	440b      	add	r3, r1
 80023a6:	3348      	adds	r3, #72	; 0x48
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80023ac:	7bfa      	ldrb	r2, [r7, #15]
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	4613      	mov	r3, r2
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	4413      	add	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	440b      	add	r3, r1
 80023ba:	334c      	adds	r3, #76	; 0x4c
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023c0:	7bfb      	ldrb	r3, [r7, #15]
 80023c2:	3301      	adds	r3, #1
 80023c4:	73fb      	strb	r3, [r7, #15]
 80023c6:	7bfa      	ldrb	r2, [r7, #15]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d3af      	bcc.n	8002330 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023d0:	2300      	movs	r3, #0
 80023d2:	73fb      	strb	r3, [r7, #15]
 80023d4:	e044      	b.n	8002460 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023d6:	7bfa      	ldrb	r2, [r7, #15]
 80023d8:	6879      	ldr	r1, [r7, #4]
 80023da:	4613      	mov	r3, r2
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	4413      	add	r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	440b      	add	r3, r1
 80023e4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80023e8:	2200      	movs	r2, #0
 80023ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023ec:	7bfa      	ldrb	r2, [r7, #15]
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	4613      	mov	r3, r2
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	4413      	add	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80023fe:	7bfa      	ldrb	r2, [r7, #15]
 8002400:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002402:	7bfa      	ldrb	r2, [r7, #15]
 8002404:	6879      	ldr	r1, [r7, #4]
 8002406:	4613      	mov	r3, r2
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	4413      	add	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	440b      	add	r3, r1
 8002410:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002414:	2200      	movs	r2, #0
 8002416:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002418:	7bfa      	ldrb	r2, [r7, #15]
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	4613      	mov	r3, r2
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	4413      	add	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	440b      	add	r3, r1
 8002426:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800242e:	7bfa      	ldrb	r2, [r7, #15]
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	4613      	mov	r3, r2
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	4413      	add	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	440b      	add	r3, r1
 800243c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002444:	7bfa      	ldrb	r2, [r7, #15]
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	4613      	mov	r3, r2
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	4413      	add	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	440b      	add	r3, r1
 8002452:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800245a:	7bfb      	ldrb	r3, [r7, #15]
 800245c:	3301      	adds	r3, #1
 800245e:	73fb      	strb	r3, [r7, #15]
 8002460:	7bfa      	ldrb	r2, [r7, #15]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	429a      	cmp	r2, r3
 8002468:	d3b5      	bcc.n	80023d6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	603b      	str	r3, [r7, #0]
 8002470:	687e      	ldr	r6, [r7, #4]
 8002472:	466d      	mov	r5, sp
 8002474:	f106 0410 	add.w	r4, r6, #16
 8002478:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800247a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800247c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800247e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002480:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002484:	e885 0003 	stmia.w	r5, {r0, r1}
 8002488:	1d33      	adds	r3, r6, #4
 800248a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800248c:	6838      	ldr	r0, [r7, #0]
 800248e:	f004 fbef 	bl	8006c70 <USB_DevInit>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d005      	beq.n	80024a4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2202      	movs	r2, #2
 800249c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e014      	b.n	80024ce <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d102      	bne.n	80024c2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 f80b 	bl	80024d8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f004 fdad 	bl	8007026 <USB_DevDisconnect>

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3714      	adds	r7, #20
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080024d8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002506:	4b05      	ldr	r3, [pc, #20]	; (800251c <HAL_PCDEx_ActivateLPM+0x44>)
 8002508:	4313      	orrs	r3, r2
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3714      	adds	r7, #20
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	10000003 	.word	0x10000003

08002520 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002528:	4b19      	ldr	r3, [pc, #100]	; (8002590 <HAL_PWREx_ConfigSupply+0x70>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	2b04      	cmp	r3, #4
 8002532:	d00a      	beq.n	800254a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002534:	4b16      	ldr	r3, [pc, #88]	; (8002590 <HAL_PWREx_ConfigSupply+0x70>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	429a      	cmp	r2, r3
 8002540:	d001      	beq.n	8002546 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e01f      	b.n	8002586 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002546:	2300      	movs	r3, #0
 8002548:	e01d      	b.n	8002586 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800254a:	4b11      	ldr	r3, [pc, #68]	; (8002590 <HAL_PWREx_ConfigSupply+0x70>)
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	f023 0207 	bic.w	r2, r3, #7
 8002552:	490f      	ldr	r1, [pc, #60]	; (8002590 <HAL_PWREx_ConfigSupply+0x70>)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4313      	orrs	r3, r2
 8002558:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800255a:	f7fe ff7b 	bl	8001454 <HAL_GetTick>
 800255e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002560:	e009      	b.n	8002576 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002562:	f7fe ff77 	bl	8001454 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002570:	d901      	bls.n	8002576 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e007      	b.n	8002586 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002576:	4b06      	ldr	r3, [pc, #24]	; (8002590 <HAL_PWREx_ConfigSupply+0x70>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800257e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002582:	d1ee      	bne.n	8002562 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	58024800 	.word	0x58024800

08002594 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002598:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	4a04      	ldr	r2, [pc, #16]	; (80025b0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800259e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025a2:	60d3      	str	r3, [r2, #12]
}
 80025a4:	bf00      	nop
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	58024800 	.word	0x58024800

080025b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b08c      	sub	sp, #48	; 0x30
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d102      	bne.n	80025c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	f000 bc48 	b.w	8002e58 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f000 8088 	beq.w	80026e6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025d6:	4b99      	ldr	r3, [pc, #612]	; (800283c <HAL_RCC_OscConfig+0x288>)
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025de:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025e0:	4b96      	ldr	r3, [pc, #600]	; (800283c <HAL_RCC_OscConfig+0x288>)
 80025e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80025e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e8:	2b10      	cmp	r3, #16
 80025ea:	d007      	beq.n	80025fc <HAL_RCC_OscConfig+0x48>
 80025ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ee:	2b18      	cmp	r3, #24
 80025f0:	d111      	bne.n	8002616 <HAL_RCC_OscConfig+0x62>
 80025f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f4:	f003 0303 	and.w	r3, r3, #3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d10c      	bne.n	8002616 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025fc:	4b8f      	ldr	r3, [pc, #572]	; (800283c <HAL_RCC_OscConfig+0x288>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d06d      	beq.n	80026e4 <HAL_RCC_OscConfig+0x130>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d169      	bne.n	80026e4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	f000 bc21 	b.w	8002e58 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800261e:	d106      	bne.n	800262e <HAL_RCC_OscConfig+0x7a>
 8002620:	4b86      	ldr	r3, [pc, #536]	; (800283c <HAL_RCC_OscConfig+0x288>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a85      	ldr	r2, [pc, #532]	; (800283c <HAL_RCC_OscConfig+0x288>)
 8002626:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800262a:	6013      	str	r3, [r2, #0]
 800262c:	e02e      	b.n	800268c <HAL_RCC_OscConfig+0xd8>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10c      	bne.n	8002650 <HAL_RCC_OscConfig+0x9c>
 8002636:	4b81      	ldr	r3, [pc, #516]	; (800283c <HAL_RCC_OscConfig+0x288>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a80      	ldr	r2, [pc, #512]	; (800283c <HAL_RCC_OscConfig+0x288>)
 800263c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002640:	6013      	str	r3, [r2, #0]
 8002642:	4b7e      	ldr	r3, [pc, #504]	; (800283c <HAL_RCC_OscConfig+0x288>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a7d      	ldr	r2, [pc, #500]	; (800283c <HAL_RCC_OscConfig+0x288>)
 8002648:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	e01d      	b.n	800268c <HAL_RCC_OscConfig+0xd8>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002658:	d10c      	bne.n	8002674 <HAL_RCC_OscConfig+0xc0>
 800265a:	4b78      	ldr	r3, [pc, #480]	; (800283c <HAL_RCC_OscConfig+0x288>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a77      	ldr	r2, [pc, #476]	; (800283c <HAL_RCC_OscConfig+0x288>)
 8002660:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	4b75      	ldr	r3, [pc, #468]	; (800283c <HAL_RCC_OscConfig+0x288>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a74      	ldr	r2, [pc, #464]	; (800283c <HAL_RCC_OscConfig+0x288>)
 800266c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	e00b      	b.n	800268c <HAL_RCC_OscConfig+0xd8>
 8002674:	4b71      	ldr	r3, [pc, #452]	; (800283c <HAL_RCC_OscConfig+0x288>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a70      	ldr	r2, [pc, #448]	; (800283c <HAL_RCC_OscConfig+0x288>)
 800267a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800267e:	6013      	str	r3, [r2, #0]
 8002680:	4b6e      	ldr	r3, [pc, #440]	; (800283c <HAL_RCC_OscConfig+0x288>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a6d      	ldr	r2, [pc, #436]	; (800283c <HAL_RCC_OscConfig+0x288>)
 8002686:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800268a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d013      	beq.n	80026bc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002694:	f7fe fede 	bl	8001454 <HAL_GetTick>
 8002698:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800269c:	f7fe feda 	bl	8001454 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b64      	cmp	r3, #100	; 0x64
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e3d4      	b.n	8002e58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026ae:	4b63      	ldr	r3, [pc, #396]	; (800283c <HAL_RCC_OscConfig+0x288>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0f0      	beq.n	800269c <HAL_RCC_OscConfig+0xe8>
 80026ba:	e014      	b.n	80026e6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026bc:	f7fe feca 	bl	8001454 <HAL_GetTick>
 80026c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026c4:	f7fe fec6 	bl	8001454 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b64      	cmp	r3, #100	; 0x64
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e3c0      	b.n	8002e58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026d6:	4b59      	ldr	r3, [pc, #356]	; (800283c <HAL_RCC_OscConfig+0x288>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f0      	bne.n	80026c4 <HAL_RCC_OscConfig+0x110>
 80026e2:	e000      	b.n	80026e6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f000 80ca 	beq.w	8002888 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026f4:	4b51      	ldr	r3, [pc, #324]	; (800283c <HAL_RCC_OscConfig+0x288>)
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026fc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026fe:	4b4f      	ldr	r3, [pc, #316]	; (800283c <HAL_RCC_OscConfig+0x288>)
 8002700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002702:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002704:	6a3b      	ldr	r3, [r7, #32]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d007      	beq.n	800271a <HAL_RCC_OscConfig+0x166>
 800270a:	6a3b      	ldr	r3, [r7, #32]
 800270c:	2b18      	cmp	r3, #24
 800270e:	d156      	bne.n	80027be <HAL_RCC_OscConfig+0x20a>
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d151      	bne.n	80027be <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800271a:	4b48      	ldr	r3, [pc, #288]	; (800283c <HAL_RCC_OscConfig+0x288>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0304 	and.w	r3, r3, #4
 8002722:	2b00      	cmp	r3, #0
 8002724:	d005      	beq.n	8002732 <HAL_RCC_OscConfig+0x17e>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e392      	b.n	8002e58 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002732:	4b42      	ldr	r3, [pc, #264]	; (800283c <HAL_RCC_OscConfig+0x288>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f023 0219 	bic.w	r2, r3, #25
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	493f      	ldr	r1, [pc, #252]	; (800283c <HAL_RCC_OscConfig+0x288>)
 8002740:	4313      	orrs	r3, r2
 8002742:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002744:	f7fe fe86 	bl	8001454 <HAL_GetTick>
 8002748:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800274c:	f7fe fe82 	bl	8001454 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e37c      	b.n	8002e58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800275e:	4b37      	ldr	r3, [pc, #220]	; (800283c <HAL_RCC_OscConfig+0x288>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0304 	and.w	r3, r3, #4
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0f0      	beq.n	800274c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800276a:	f7fe fea3 	bl	80014b4 <HAL_GetREVID>
 800276e:	4603      	mov	r3, r0
 8002770:	f241 0203 	movw	r2, #4099	; 0x1003
 8002774:	4293      	cmp	r3, r2
 8002776:	d817      	bhi.n	80027a8 <HAL_RCC_OscConfig+0x1f4>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	2b40      	cmp	r3, #64	; 0x40
 800277e:	d108      	bne.n	8002792 <HAL_RCC_OscConfig+0x1de>
 8002780:	4b2e      	ldr	r3, [pc, #184]	; (800283c <HAL_RCC_OscConfig+0x288>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002788:	4a2c      	ldr	r2, [pc, #176]	; (800283c <HAL_RCC_OscConfig+0x288>)
 800278a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800278e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002790:	e07a      	b.n	8002888 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002792:	4b2a      	ldr	r3, [pc, #168]	; (800283c <HAL_RCC_OscConfig+0x288>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	031b      	lsls	r3, r3, #12
 80027a0:	4926      	ldr	r1, [pc, #152]	; (800283c <HAL_RCC_OscConfig+0x288>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027a6:	e06f      	b.n	8002888 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a8:	4b24      	ldr	r3, [pc, #144]	; (800283c <HAL_RCC_OscConfig+0x288>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	061b      	lsls	r3, r3, #24
 80027b6:	4921      	ldr	r1, [pc, #132]	; (800283c <HAL_RCC_OscConfig+0x288>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027bc:	e064      	b.n	8002888 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d047      	beq.n	8002856 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80027c6:	4b1d      	ldr	r3, [pc, #116]	; (800283c <HAL_RCC_OscConfig+0x288>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f023 0219 	bic.w	r2, r3, #25
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	491a      	ldr	r1, [pc, #104]	; (800283c <HAL_RCC_OscConfig+0x288>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d8:	f7fe fe3c 	bl	8001454 <HAL_GetTick>
 80027dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027e0:	f7fe fe38 	bl	8001454 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e332      	b.n	8002e58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027f2:	4b12      	ldr	r3, [pc, #72]	; (800283c <HAL_RCC_OscConfig+0x288>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0304 	and.w	r3, r3, #4
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0f0      	beq.n	80027e0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027fe:	f7fe fe59 	bl	80014b4 <HAL_GetREVID>
 8002802:	4603      	mov	r3, r0
 8002804:	f241 0203 	movw	r2, #4099	; 0x1003
 8002808:	4293      	cmp	r3, r2
 800280a:	d819      	bhi.n	8002840 <HAL_RCC_OscConfig+0x28c>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	2b40      	cmp	r3, #64	; 0x40
 8002812:	d108      	bne.n	8002826 <HAL_RCC_OscConfig+0x272>
 8002814:	4b09      	ldr	r3, [pc, #36]	; (800283c <HAL_RCC_OscConfig+0x288>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800281c:	4a07      	ldr	r2, [pc, #28]	; (800283c <HAL_RCC_OscConfig+0x288>)
 800281e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002822:	6053      	str	r3, [r2, #4]
 8002824:	e030      	b.n	8002888 <HAL_RCC_OscConfig+0x2d4>
 8002826:	4b05      	ldr	r3, [pc, #20]	; (800283c <HAL_RCC_OscConfig+0x288>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	031b      	lsls	r3, r3, #12
 8002834:	4901      	ldr	r1, [pc, #4]	; (800283c <HAL_RCC_OscConfig+0x288>)
 8002836:	4313      	orrs	r3, r2
 8002838:	604b      	str	r3, [r1, #4]
 800283a:	e025      	b.n	8002888 <HAL_RCC_OscConfig+0x2d4>
 800283c:	58024400 	.word	0x58024400
 8002840:	4b9a      	ldr	r3, [pc, #616]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	061b      	lsls	r3, r3, #24
 800284e:	4997      	ldr	r1, [pc, #604]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 8002850:	4313      	orrs	r3, r2
 8002852:	604b      	str	r3, [r1, #4]
 8002854:	e018      	b.n	8002888 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002856:	4b95      	ldr	r3, [pc, #596]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a94      	ldr	r2, [pc, #592]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 800285c:	f023 0301 	bic.w	r3, r3, #1
 8002860:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002862:	f7fe fdf7 	bl	8001454 <HAL_GetTick>
 8002866:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800286a:	f7fe fdf3 	bl	8001454 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e2ed      	b.n	8002e58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800287c:	4b8b      	ldr	r3, [pc, #556]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1f0      	bne.n	800286a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0310 	and.w	r3, r3, #16
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 80a9 	beq.w	80029e8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002896:	4b85      	ldr	r3, [pc, #532]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800289e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028a0:	4b82      	ldr	r3, [pc, #520]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 80028a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	2b08      	cmp	r3, #8
 80028aa:	d007      	beq.n	80028bc <HAL_RCC_OscConfig+0x308>
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	2b18      	cmp	r3, #24
 80028b0:	d13a      	bne.n	8002928 <HAL_RCC_OscConfig+0x374>
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f003 0303 	and.w	r3, r3, #3
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d135      	bne.n	8002928 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028bc:	4b7b      	ldr	r3, [pc, #492]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d005      	beq.n	80028d4 <HAL_RCC_OscConfig+0x320>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	69db      	ldr	r3, [r3, #28]
 80028cc:	2b80      	cmp	r3, #128	; 0x80
 80028ce:	d001      	beq.n	80028d4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e2c1      	b.n	8002e58 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028d4:	f7fe fdee 	bl	80014b4 <HAL_GetREVID>
 80028d8:	4603      	mov	r3, r0
 80028da:	f241 0203 	movw	r2, #4099	; 0x1003
 80028de:	4293      	cmp	r3, r2
 80028e0:	d817      	bhi.n	8002912 <HAL_RCC_OscConfig+0x35e>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	2b20      	cmp	r3, #32
 80028e8:	d108      	bne.n	80028fc <HAL_RCC_OscConfig+0x348>
 80028ea:	4b70      	ldr	r3, [pc, #448]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80028f2:	4a6e      	ldr	r2, [pc, #440]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 80028f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80028f8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028fa:	e075      	b.n	80029e8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028fc:	4b6b      	ldr	r3, [pc, #428]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	069b      	lsls	r3, r3, #26
 800290a:	4968      	ldr	r1, [pc, #416]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 800290c:	4313      	orrs	r3, r2
 800290e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002910:	e06a      	b.n	80029e8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002912:	4b66      	ldr	r3, [pc, #408]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	061b      	lsls	r3, r3, #24
 8002920:	4962      	ldr	r1, [pc, #392]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 8002922:	4313      	orrs	r3, r2
 8002924:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002926:	e05f      	b.n	80029e8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	69db      	ldr	r3, [r3, #28]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d042      	beq.n	80029b6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002930:	4b5e      	ldr	r3, [pc, #376]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a5d      	ldr	r2, [pc, #372]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 8002936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800293a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293c:	f7fe fd8a 	bl	8001454 <HAL_GetTick>
 8002940:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002944:	f7fe fd86 	bl	8001454 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e280      	b.n	8002e58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002956:	4b55      	ldr	r3, [pc, #340]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295e:	2b00      	cmp	r3, #0
 8002960:	d0f0      	beq.n	8002944 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002962:	f7fe fda7 	bl	80014b4 <HAL_GetREVID>
 8002966:	4603      	mov	r3, r0
 8002968:	f241 0203 	movw	r2, #4099	; 0x1003
 800296c:	4293      	cmp	r3, r2
 800296e:	d817      	bhi.n	80029a0 <HAL_RCC_OscConfig+0x3ec>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	2b20      	cmp	r3, #32
 8002976:	d108      	bne.n	800298a <HAL_RCC_OscConfig+0x3d6>
 8002978:	4b4c      	ldr	r3, [pc, #304]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002980:	4a4a      	ldr	r2, [pc, #296]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 8002982:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002986:	6053      	str	r3, [r2, #4]
 8002988:	e02e      	b.n	80029e8 <HAL_RCC_OscConfig+0x434>
 800298a:	4b48      	ldr	r3, [pc, #288]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	069b      	lsls	r3, r3, #26
 8002998:	4944      	ldr	r1, [pc, #272]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 800299a:	4313      	orrs	r3, r2
 800299c:	604b      	str	r3, [r1, #4]
 800299e:	e023      	b.n	80029e8 <HAL_RCC_OscConfig+0x434>
 80029a0:	4b42      	ldr	r3, [pc, #264]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	061b      	lsls	r3, r3, #24
 80029ae:	493f      	ldr	r1, [pc, #252]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	60cb      	str	r3, [r1, #12]
 80029b4:	e018      	b.n	80029e8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80029b6:	4b3d      	ldr	r3, [pc, #244]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a3c      	ldr	r2, [pc, #240]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 80029bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c2:	f7fe fd47 	bl	8001454 <HAL_GetTick>
 80029c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80029c8:	e008      	b.n	80029dc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80029ca:	f7fe fd43 	bl	8001454 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e23d      	b.n	8002e58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80029dc:	4b33      	ldr	r3, [pc, #204]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1f0      	bne.n	80029ca <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0308 	and.w	r3, r3, #8
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d036      	beq.n	8002a62 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	695b      	ldr	r3, [r3, #20]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d019      	beq.n	8002a30 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029fc:	4b2b      	ldr	r3, [pc, #172]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 80029fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a00:	4a2a      	ldr	r2, [pc, #168]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 8002a02:	f043 0301 	orr.w	r3, r3, #1
 8002a06:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a08:	f7fe fd24 	bl	8001454 <HAL_GetTick>
 8002a0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a10:	f7fe fd20 	bl	8001454 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e21a      	b.n	8002e58 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a22:	4b22      	ldr	r3, [pc, #136]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 8002a24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d0f0      	beq.n	8002a10 <HAL_RCC_OscConfig+0x45c>
 8002a2e:	e018      	b.n	8002a62 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a30:	4b1e      	ldr	r3, [pc, #120]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 8002a32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a34:	4a1d      	ldr	r2, [pc, #116]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 8002a36:	f023 0301 	bic.w	r3, r3, #1
 8002a3a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a3c:	f7fe fd0a 	bl	8001454 <HAL_GetTick>
 8002a40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a44:	f7fe fd06 	bl	8001454 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e200      	b.n	8002e58 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a56:	4b15      	ldr	r3, [pc, #84]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 8002a58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f0      	bne.n	8002a44 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0320 	and.w	r3, r3, #32
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d039      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d01c      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a76:	4b0d      	ldr	r3, [pc, #52]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a0c      	ldr	r2, [pc, #48]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 8002a7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a80:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a82:	f7fe fce7 	bl	8001454 <HAL_GetTick>
 8002a86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a88:	e008      	b.n	8002a9c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a8a:	f7fe fce3 	bl	8001454 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e1dd      	b.n	8002e58 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a9c:	4b03      	ldr	r3, [pc, #12]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d0f0      	beq.n	8002a8a <HAL_RCC_OscConfig+0x4d6>
 8002aa8:	e01b      	b.n	8002ae2 <HAL_RCC_OscConfig+0x52e>
 8002aaa:	bf00      	nop
 8002aac:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ab0:	4b9b      	ldr	r3, [pc, #620]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a9a      	ldr	r2, [pc, #616]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002ab6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002aba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002abc:	f7fe fcca 	bl	8001454 <HAL_GetTick>
 8002ac0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ac4:	f7fe fcc6 	bl	8001454 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e1c0      	b.n	8002e58 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ad6:	4b92      	ldr	r3, [pc, #584]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1f0      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0304 	and.w	r3, r3, #4
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 8081 	beq.w	8002bf2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002af0:	4b8c      	ldr	r3, [pc, #560]	; (8002d24 <HAL_RCC_OscConfig+0x770>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a8b      	ldr	r2, [pc, #556]	; (8002d24 <HAL_RCC_OscConfig+0x770>)
 8002af6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002afa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002afc:	f7fe fcaa 	bl	8001454 <HAL_GetTick>
 8002b00:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b04:	f7fe fca6 	bl	8001454 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b64      	cmp	r3, #100	; 0x64
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e1a0      	b.n	8002e58 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b16:	4b83      	ldr	r3, [pc, #524]	; (8002d24 <HAL_RCC_OscConfig+0x770>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d0f0      	beq.n	8002b04 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d106      	bne.n	8002b38 <HAL_RCC_OscConfig+0x584>
 8002b2a:	4b7d      	ldr	r3, [pc, #500]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2e:	4a7c      	ldr	r2, [pc, #496]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002b30:	f043 0301 	orr.w	r3, r3, #1
 8002b34:	6713      	str	r3, [r2, #112]	; 0x70
 8002b36:	e02d      	b.n	8002b94 <HAL_RCC_OscConfig+0x5e0>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10c      	bne.n	8002b5a <HAL_RCC_OscConfig+0x5a6>
 8002b40:	4b77      	ldr	r3, [pc, #476]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b44:	4a76      	ldr	r2, [pc, #472]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002b46:	f023 0301 	bic.w	r3, r3, #1
 8002b4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b4c:	4b74      	ldr	r3, [pc, #464]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b50:	4a73      	ldr	r2, [pc, #460]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002b52:	f023 0304 	bic.w	r3, r3, #4
 8002b56:	6713      	str	r3, [r2, #112]	; 0x70
 8002b58:	e01c      	b.n	8002b94 <HAL_RCC_OscConfig+0x5e0>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	2b05      	cmp	r3, #5
 8002b60:	d10c      	bne.n	8002b7c <HAL_RCC_OscConfig+0x5c8>
 8002b62:	4b6f      	ldr	r3, [pc, #444]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b66:	4a6e      	ldr	r2, [pc, #440]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002b68:	f043 0304 	orr.w	r3, r3, #4
 8002b6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b6e:	4b6c      	ldr	r3, [pc, #432]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b72:	4a6b      	ldr	r2, [pc, #428]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002b74:	f043 0301 	orr.w	r3, r3, #1
 8002b78:	6713      	str	r3, [r2, #112]	; 0x70
 8002b7a:	e00b      	b.n	8002b94 <HAL_RCC_OscConfig+0x5e0>
 8002b7c:	4b68      	ldr	r3, [pc, #416]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b80:	4a67      	ldr	r2, [pc, #412]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002b82:	f023 0301 	bic.w	r3, r3, #1
 8002b86:	6713      	str	r3, [r2, #112]	; 0x70
 8002b88:	4b65      	ldr	r3, [pc, #404]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8c:	4a64      	ldr	r2, [pc, #400]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002b8e:	f023 0304 	bic.w	r3, r3, #4
 8002b92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d015      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b9c:	f7fe fc5a 	bl	8001454 <HAL_GetTick>
 8002ba0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ba2:	e00a      	b.n	8002bba <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba4:	f7fe fc56 	bl	8001454 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e14e      	b.n	8002e58 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bba:	4b59      	ldr	r3, [pc, #356]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0ee      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x5f0>
 8002bc6:	e014      	b.n	8002bf2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc8:	f7fe fc44 	bl	8001454 <HAL_GetTick>
 8002bcc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002bce:	e00a      	b.n	8002be6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bd0:	f7fe fc40 	bl	8001454 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e138      	b.n	8002e58 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002be6:	4b4e      	ldr	r3, [pc, #312]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1ee      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 812d 	beq.w	8002e56 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002bfc:	4b48      	ldr	r3, [pc, #288]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c04:	2b18      	cmp	r3, #24
 8002c06:	f000 80bd 	beq.w	8002d84 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	f040 809e 	bne.w	8002d50 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c14:	4b42      	ldr	r3, [pc, #264]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a41      	ldr	r2, [pc, #260]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002c1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c20:	f7fe fc18 	bl	8001454 <HAL_GetTick>
 8002c24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c28:	f7fe fc14 	bl	8001454 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e10e      	b.n	8002e58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c3a:	4b39      	ldr	r3, [pc, #228]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f0      	bne.n	8002c28 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c46:	4b36      	ldr	r3, [pc, #216]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002c48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c4a:	4b37      	ldr	r3, [pc, #220]	; (8002d28 <HAL_RCC_OscConfig+0x774>)
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c56:	0112      	lsls	r2, r2, #4
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	4931      	ldr	r1, [pc, #196]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	628b      	str	r3, [r1, #40]	; 0x28
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c64:	3b01      	subs	r3, #1
 8002c66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	025b      	lsls	r3, r3, #9
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	431a      	orrs	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	041b      	lsls	r3, r3, #16
 8002c7e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	061b      	lsls	r3, r3, #24
 8002c8c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002c90:	4923      	ldr	r1, [pc, #140]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002c96:	4b22      	ldr	r3, [pc, #136]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9a:	4a21      	ldr	r2, [pc, #132]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002c9c:	f023 0301 	bic.w	r3, r3, #1
 8002ca0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ca2:	4b1f      	ldr	r3, [pc, #124]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002ca4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ca6:	4b21      	ldr	r3, [pc, #132]	; (8002d2c <HAL_RCC_OscConfig+0x778>)
 8002ca8:	4013      	ands	r3, r2
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002cae:	00d2      	lsls	r2, r2, #3
 8002cb0:	491b      	ldr	r1, [pc, #108]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002cb6:	4b1a      	ldr	r3, [pc, #104]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cba:	f023 020c 	bic.w	r2, r3, #12
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	4917      	ldr	r1, [pc, #92]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002cc8:	4b15      	ldr	r3, [pc, #84]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ccc:	f023 0202 	bic.w	r2, r3, #2
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd4:	4912      	ldr	r1, [pc, #72]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002cda:	4b11      	ldr	r3, [pc, #68]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cde:	4a10      	ldr	r2, [pc, #64]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ce4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ce6:	4b0e      	ldr	r3, [pc, #56]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cea:	4a0d      	ldr	r2, [pc, #52]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cf0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002cf2:	4b0b      	ldr	r3, [pc, #44]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf6:	4a0a      	ldr	r2, [pc, #40]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002cf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cfc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002cfe:	4b08      	ldr	r3, [pc, #32]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d02:	4a07      	ldr	r2, [pc, #28]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002d04:	f043 0301 	orr.w	r3, r3, #1
 8002d08:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d0a:	4b05      	ldr	r3, [pc, #20]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a04      	ldr	r2, [pc, #16]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002d10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d16:	f7fe fb9d 	bl	8001454 <HAL_GetTick>
 8002d1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d1c:	e011      	b.n	8002d42 <HAL_RCC_OscConfig+0x78e>
 8002d1e:	bf00      	nop
 8002d20:	58024400 	.word	0x58024400
 8002d24:	58024800 	.word	0x58024800
 8002d28:	fffffc0c 	.word	0xfffffc0c
 8002d2c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d30:	f7fe fb90 	bl	8001454 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e08a      	b.n	8002e58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d42:	4b47      	ldr	r3, [pc, #284]	; (8002e60 <HAL_RCC_OscConfig+0x8ac>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d0f0      	beq.n	8002d30 <HAL_RCC_OscConfig+0x77c>
 8002d4e:	e082      	b.n	8002e56 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d50:	4b43      	ldr	r3, [pc, #268]	; (8002e60 <HAL_RCC_OscConfig+0x8ac>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a42      	ldr	r2, [pc, #264]	; (8002e60 <HAL_RCC_OscConfig+0x8ac>)
 8002d56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5c:	f7fe fb7a 	bl	8001454 <HAL_GetTick>
 8002d60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d64:	f7fe fb76 	bl	8001454 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e070      	b.n	8002e58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d76:	4b3a      	ldr	r3, [pc, #232]	; (8002e60 <HAL_RCC_OscConfig+0x8ac>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1f0      	bne.n	8002d64 <HAL_RCC_OscConfig+0x7b0>
 8002d82:	e068      	b.n	8002e56 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002d84:	4b36      	ldr	r3, [pc, #216]	; (8002e60 <HAL_RCC_OscConfig+0x8ac>)
 8002d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d88:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002d8a:	4b35      	ldr	r3, [pc, #212]	; (8002e60 <HAL_RCC_OscConfig+0x8ac>)
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d031      	beq.n	8002dfc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	f003 0203 	and.w	r2, r3, #3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d12a      	bne.n	8002dfc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	091b      	lsrs	r3, r3, #4
 8002daa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d122      	bne.n	8002dfc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d11a      	bne.n	8002dfc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	0a5b      	lsrs	r3, r3, #9
 8002dca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d111      	bne.n	8002dfc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	0c1b      	lsrs	r3, r3, #16
 8002ddc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d108      	bne.n	8002dfc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	0e1b      	lsrs	r3, r3, #24
 8002dee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d001      	beq.n	8002e00 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e02b      	b.n	8002e58 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002e00:	4b17      	ldr	r3, [pc, #92]	; (8002e60 <HAL_RCC_OscConfig+0x8ac>)
 8002e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e04:	08db      	lsrs	r3, r3, #3
 8002e06:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e0a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d01f      	beq.n	8002e56 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002e16:	4b12      	ldr	r3, [pc, #72]	; (8002e60 <HAL_RCC_OscConfig+0x8ac>)
 8002e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1a:	4a11      	ldr	r2, [pc, #68]	; (8002e60 <HAL_RCC_OscConfig+0x8ac>)
 8002e1c:	f023 0301 	bic.w	r3, r3, #1
 8002e20:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e22:	f7fe fb17 	bl	8001454 <HAL_GetTick>
 8002e26:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002e28:	bf00      	nop
 8002e2a:	f7fe fb13 	bl	8001454 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d0f9      	beq.n	8002e2a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002e36:	4b0a      	ldr	r3, [pc, #40]	; (8002e60 <HAL_RCC_OscConfig+0x8ac>)
 8002e38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e3a:	4b0a      	ldr	r3, [pc, #40]	; (8002e64 <HAL_RCC_OscConfig+0x8b0>)
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e42:	00d2      	lsls	r2, r2, #3
 8002e44:	4906      	ldr	r1, [pc, #24]	; (8002e60 <HAL_RCC_OscConfig+0x8ac>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002e4a:	4b05      	ldr	r3, [pc, #20]	; (8002e60 <HAL_RCC_OscConfig+0x8ac>)
 8002e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4e:	4a04      	ldr	r2, [pc, #16]	; (8002e60 <HAL_RCC_OscConfig+0x8ac>)
 8002e50:	f043 0301 	orr.w	r3, r3, #1
 8002e54:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3730      	adds	r7, #48	; 0x30
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	58024400 	.word	0x58024400
 8002e64:	ffff0007 	.word	0xffff0007

08002e68 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e19c      	b.n	80031b6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e7c:	4b8a      	ldr	r3, [pc, #552]	; (80030a8 <HAL_RCC_ClockConfig+0x240>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 030f 	and.w	r3, r3, #15
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d910      	bls.n	8002eac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8a:	4b87      	ldr	r3, [pc, #540]	; (80030a8 <HAL_RCC_ClockConfig+0x240>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f023 020f 	bic.w	r2, r3, #15
 8002e92:	4985      	ldr	r1, [pc, #532]	; (80030a8 <HAL_RCC_ClockConfig+0x240>)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9a:	4b83      	ldr	r3, [pc, #524]	; (80030a8 <HAL_RCC_ClockConfig+0x240>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 030f 	and.w	r3, r3, #15
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d001      	beq.n	8002eac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e184      	b.n	80031b6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d010      	beq.n	8002eda <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	691a      	ldr	r2, [r3, #16]
 8002ebc:	4b7b      	ldr	r3, [pc, #492]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d908      	bls.n	8002eda <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ec8:	4b78      	ldr	r3, [pc, #480]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	4975      	ldr	r1, [pc, #468]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0308 	and.w	r3, r3, #8
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d010      	beq.n	8002f08 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	695a      	ldr	r2, [r3, #20]
 8002eea:	4b70      	ldr	r3, [pc, #448]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d908      	bls.n	8002f08 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ef6:	4b6d      	ldr	r3, [pc, #436]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	496a      	ldr	r1, [pc, #424]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0310 	and.w	r3, r3, #16
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d010      	beq.n	8002f36 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	699a      	ldr	r2, [r3, #24]
 8002f18:	4b64      	ldr	r3, [pc, #400]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002f1a:	69db      	ldr	r3, [r3, #28]
 8002f1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d908      	bls.n	8002f36 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f24:	4b61      	ldr	r3, [pc, #388]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	495e      	ldr	r1, [pc, #376]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0320 	and.w	r3, r3, #32
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d010      	beq.n	8002f64 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69da      	ldr	r2, [r3, #28]
 8002f46:	4b59      	ldr	r3, [pc, #356]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d908      	bls.n	8002f64 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f52:	4b56      	ldr	r3, [pc, #344]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	69db      	ldr	r3, [r3, #28]
 8002f5e:	4953      	ldr	r1, [pc, #332]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d010      	beq.n	8002f92 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	68da      	ldr	r2, [r3, #12]
 8002f74:	4b4d      	ldr	r3, [pc, #308]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	f003 030f 	and.w	r3, r3, #15
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d908      	bls.n	8002f92 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f80:	4b4a      	ldr	r3, [pc, #296]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	f023 020f 	bic.w	r2, r3, #15
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	4947      	ldr	r1, [pc, #284]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d055      	beq.n	800304a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002f9e:	4b43      	ldr	r3, [pc, #268]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	4940      	ldr	r1, [pc, #256]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d107      	bne.n	8002fc8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fb8:	4b3c      	ldr	r3, [pc, #240]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d121      	bne.n	8003008 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e0f6      	b.n	80031b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	2b03      	cmp	r3, #3
 8002fce:	d107      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002fd0:	4b36      	ldr	r3, [pc, #216]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d115      	bne.n	8003008 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e0ea      	b.n	80031b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d107      	bne.n	8002ff8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002fe8:	4b30      	ldr	r3, [pc, #192]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d109      	bne.n	8003008 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e0de      	b.n	80031b6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ff8:	4b2c      	ldr	r3, [pc, #176]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e0d6      	b.n	80031b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003008:	4b28      	ldr	r3, [pc, #160]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	f023 0207 	bic.w	r2, r3, #7
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	4925      	ldr	r1, [pc, #148]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 8003016:	4313      	orrs	r3, r2
 8003018:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800301a:	f7fe fa1b 	bl	8001454 <HAL_GetTick>
 800301e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003020:	e00a      	b.n	8003038 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003022:	f7fe fa17 	bl	8001454 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003030:	4293      	cmp	r3, r2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e0be      	b.n	80031b6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003038:	4b1c      	ldr	r3, [pc, #112]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	429a      	cmp	r2, r3
 8003048:	d1eb      	bne.n	8003022 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d010      	beq.n	8003078 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68da      	ldr	r2, [r3, #12]
 800305a:	4b14      	ldr	r3, [pc, #80]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	f003 030f 	and.w	r3, r3, #15
 8003062:	429a      	cmp	r2, r3
 8003064:	d208      	bcs.n	8003078 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003066:	4b11      	ldr	r3, [pc, #68]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	f023 020f 	bic.w	r2, r3, #15
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	490e      	ldr	r1, [pc, #56]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 8003074:	4313      	orrs	r3, r2
 8003076:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003078:	4b0b      	ldr	r3, [pc, #44]	; (80030a8 <HAL_RCC_ClockConfig+0x240>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 030f 	and.w	r3, r3, #15
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	429a      	cmp	r2, r3
 8003084:	d214      	bcs.n	80030b0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003086:	4b08      	ldr	r3, [pc, #32]	; (80030a8 <HAL_RCC_ClockConfig+0x240>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f023 020f 	bic.w	r2, r3, #15
 800308e:	4906      	ldr	r1, [pc, #24]	; (80030a8 <HAL_RCC_ClockConfig+0x240>)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	4313      	orrs	r3, r2
 8003094:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003096:	4b04      	ldr	r3, [pc, #16]	; (80030a8 <HAL_RCC_ClockConfig+0x240>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 030f 	and.w	r3, r3, #15
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d005      	beq.n	80030b0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e086      	b.n	80031b6 <HAL_RCC_ClockConfig+0x34e>
 80030a8:	52002000 	.word	0x52002000
 80030ac:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0304 	and.w	r3, r3, #4
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d010      	beq.n	80030de <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	691a      	ldr	r2, [r3, #16]
 80030c0:	4b3f      	ldr	r3, [pc, #252]	; (80031c0 <HAL_RCC_ClockConfig+0x358>)
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d208      	bcs.n	80030de <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80030cc:	4b3c      	ldr	r3, [pc, #240]	; (80031c0 <HAL_RCC_ClockConfig+0x358>)
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	4939      	ldr	r1, [pc, #228]	; (80031c0 <HAL_RCC_ClockConfig+0x358>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0308 	and.w	r3, r3, #8
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d010      	beq.n	800310c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	695a      	ldr	r2, [r3, #20]
 80030ee:	4b34      	ldr	r3, [pc, #208]	; (80031c0 <HAL_RCC_ClockConfig+0x358>)
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d208      	bcs.n	800310c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80030fa:	4b31      	ldr	r3, [pc, #196]	; (80031c0 <HAL_RCC_ClockConfig+0x358>)
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	492e      	ldr	r1, [pc, #184]	; (80031c0 <HAL_RCC_ClockConfig+0x358>)
 8003108:	4313      	orrs	r3, r2
 800310a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0310 	and.w	r3, r3, #16
 8003114:	2b00      	cmp	r3, #0
 8003116:	d010      	beq.n	800313a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	699a      	ldr	r2, [r3, #24]
 800311c:	4b28      	ldr	r3, [pc, #160]	; (80031c0 <HAL_RCC_ClockConfig+0x358>)
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003124:	429a      	cmp	r2, r3
 8003126:	d208      	bcs.n	800313a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003128:	4b25      	ldr	r3, [pc, #148]	; (80031c0 <HAL_RCC_ClockConfig+0x358>)
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	4922      	ldr	r1, [pc, #136]	; (80031c0 <HAL_RCC_ClockConfig+0x358>)
 8003136:	4313      	orrs	r3, r2
 8003138:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0320 	and.w	r3, r3, #32
 8003142:	2b00      	cmp	r3, #0
 8003144:	d010      	beq.n	8003168 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	69da      	ldr	r2, [r3, #28]
 800314a:	4b1d      	ldr	r3, [pc, #116]	; (80031c0 <HAL_RCC_ClockConfig+0x358>)
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003152:	429a      	cmp	r2, r3
 8003154:	d208      	bcs.n	8003168 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003156:	4b1a      	ldr	r3, [pc, #104]	; (80031c0 <HAL_RCC_ClockConfig+0x358>)
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	4917      	ldr	r1, [pc, #92]	; (80031c0 <HAL_RCC_ClockConfig+0x358>)
 8003164:	4313      	orrs	r3, r2
 8003166:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003168:	f000 f834 	bl	80031d4 <HAL_RCC_GetSysClockFreq>
 800316c:	4602      	mov	r2, r0
 800316e:	4b14      	ldr	r3, [pc, #80]	; (80031c0 <HAL_RCC_ClockConfig+0x358>)
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	0a1b      	lsrs	r3, r3, #8
 8003174:	f003 030f 	and.w	r3, r3, #15
 8003178:	4912      	ldr	r1, [pc, #72]	; (80031c4 <HAL_RCC_ClockConfig+0x35c>)
 800317a:	5ccb      	ldrb	r3, [r1, r3]
 800317c:	f003 031f 	and.w	r3, r3, #31
 8003180:	fa22 f303 	lsr.w	r3, r2, r3
 8003184:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003186:	4b0e      	ldr	r3, [pc, #56]	; (80031c0 <HAL_RCC_ClockConfig+0x358>)
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	f003 030f 	and.w	r3, r3, #15
 800318e:	4a0d      	ldr	r2, [pc, #52]	; (80031c4 <HAL_RCC_ClockConfig+0x35c>)
 8003190:	5cd3      	ldrb	r3, [r2, r3]
 8003192:	f003 031f 	and.w	r3, r3, #31
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	fa22 f303 	lsr.w	r3, r2, r3
 800319c:	4a0a      	ldr	r2, [pc, #40]	; (80031c8 <HAL_RCC_ClockConfig+0x360>)
 800319e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80031a0:	4a0a      	ldr	r2, [pc, #40]	; (80031cc <HAL_RCC_ClockConfig+0x364>)
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80031a6:	4b0a      	ldr	r3, [pc, #40]	; (80031d0 <HAL_RCC_ClockConfig+0x368>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7fd fda4 	bl	8000cf8 <HAL_InitTick>
 80031b0:	4603      	mov	r3, r0
 80031b2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80031b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3718      	adds	r7, #24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	58024400 	.word	0x58024400
 80031c4:	0800ca80 	.word	0x0800ca80
 80031c8:	24000004 	.word	0x24000004
 80031cc:	24000000 	.word	0x24000000
 80031d0:	24000008 	.word	0x24000008

080031d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b089      	sub	sp, #36	; 0x24
 80031d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031da:	4bb3      	ldr	r3, [pc, #716]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031e2:	2b18      	cmp	r3, #24
 80031e4:	f200 8155 	bhi.w	8003492 <HAL_RCC_GetSysClockFreq+0x2be>
 80031e8:	a201      	add	r2, pc, #4	; (adr r2, 80031f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80031ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ee:	bf00      	nop
 80031f0:	08003255 	.word	0x08003255
 80031f4:	08003493 	.word	0x08003493
 80031f8:	08003493 	.word	0x08003493
 80031fc:	08003493 	.word	0x08003493
 8003200:	08003493 	.word	0x08003493
 8003204:	08003493 	.word	0x08003493
 8003208:	08003493 	.word	0x08003493
 800320c:	08003493 	.word	0x08003493
 8003210:	0800327b 	.word	0x0800327b
 8003214:	08003493 	.word	0x08003493
 8003218:	08003493 	.word	0x08003493
 800321c:	08003493 	.word	0x08003493
 8003220:	08003493 	.word	0x08003493
 8003224:	08003493 	.word	0x08003493
 8003228:	08003493 	.word	0x08003493
 800322c:	08003493 	.word	0x08003493
 8003230:	08003281 	.word	0x08003281
 8003234:	08003493 	.word	0x08003493
 8003238:	08003493 	.word	0x08003493
 800323c:	08003493 	.word	0x08003493
 8003240:	08003493 	.word	0x08003493
 8003244:	08003493 	.word	0x08003493
 8003248:	08003493 	.word	0x08003493
 800324c:	08003493 	.word	0x08003493
 8003250:	08003287 	.word	0x08003287
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003254:	4b94      	ldr	r3, [pc, #592]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0320 	and.w	r3, r3, #32
 800325c:	2b00      	cmp	r3, #0
 800325e:	d009      	beq.n	8003274 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003260:	4b91      	ldr	r3, [pc, #580]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	08db      	lsrs	r3, r3, #3
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	4a90      	ldr	r2, [pc, #576]	; (80034ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800326c:	fa22 f303 	lsr.w	r3, r2, r3
 8003270:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003272:	e111      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003274:	4b8d      	ldr	r3, [pc, #564]	; (80034ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003276:	61bb      	str	r3, [r7, #24]
      break;
 8003278:	e10e      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800327a:	4b8d      	ldr	r3, [pc, #564]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800327c:	61bb      	str	r3, [r7, #24]
      break;
 800327e:	e10b      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003280:	4b8c      	ldr	r3, [pc, #560]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003282:	61bb      	str	r3, [r7, #24]
      break;
 8003284:	e108      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003286:	4b88      	ldr	r3, [pc, #544]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328a:	f003 0303 	and.w	r3, r3, #3
 800328e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003290:	4b85      	ldr	r3, [pc, #532]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003294:	091b      	lsrs	r3, r3, #4
 8003296:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800329a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800329c:	4b82      	ldr	r3, [pc, #520]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800329e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80032a6:	4b80      	ldr	r3, [pc, #512]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032aa:	08db      	lsrs	r3, r3, #3
 80032ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	fb02 f303 	mul.w	r3, r2, r3
 80032b6:	ee07 3a90 	vmov	s15, r3
 80032ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032be:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 80e1 	beq.w	800348c <HAL_RCC_GetSysClockFreq+0x2b8>
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	f000 8083 	beq.w	80033d8 <HAL_RCC_GetSysClockFreq+0x204>
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	f200 80a1 	bhi.w	800341c <HAL_RCC_GetSysClockFreq+0x248>
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d003      	beq.n	80032e8 <HAL_RCC_GetSysClockFreq+0x114>
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d056      	beq.n	8003394 <HAL_RCC_GetSysClockFreq+0x1c0>
 80032e6:	e099      	b.n	800341c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032e8:	4b6f      	ldr	r3, [pc, #444]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0320 	and.w	r3, r3, #32
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d02d      	beq.n	8003350 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80032f4:	4b6c      	ldr	r3, [pc, #432]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	08db      	lsrs	r3, r3, #3
 80032fa:	f003 0303 	and.w	r3, r3, #3
 80032fe:	4a6b      	ldr	r2, [pc, #428]	; (80034ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003300:	fa22 f303 	lsr.w	r3, r2, r3
 8003304:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	ee07 3a90 	vmov	s15, r3
 800330c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	ee07 3a90 	vmov	s15, r3
 8003316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800331a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800331e:	4b62      	ldr	r3, [pc, #392]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003326:	ee07 3a90 	vmov	s15, r3
 800332a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800332e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003332:	eddf 5a61 	vldr	s11, [pc, #388]	; 80034b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800333a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800333e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800334a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800334e:	e087      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	ee07 3a90 	vmov	s15, r3
 8003356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800335a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80034bc <HAL_RCC_GetSysClockFreq+0x2e8>
 800335e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003362:	4b51      	ldr	r3, [pc, #324]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800336a:	ee07 3a90 	vmov	s15, r3
 800336e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003372:	ed97 6a02 	vldr	s12, [r7, #8]
 8003376:	eddf 5a50 	vldr	s11, [pc, #320]	; 80034b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800337a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800337e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003382:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800338a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800338e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003392:	e065      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	ee07 3a90 	vmov	s15, r3
 800339a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800339e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80034c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80033a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033a6:	4b40      	ldr	r3, [pc, #256]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ae:	ee07 3a90 	vmov	s15, r3
 80033b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80033ba:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80034b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80033d6:	e043      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	ee07 3a90 	vmov	s15, r3
 80033de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033e2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80034c4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80033e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033ea:	4b2f      	ldr	r3, [pc, #188]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033f2:	ee07 3a90 	vmov	s15, r3
 80033f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80033fe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80034b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800340a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800340e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003416:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800341a:	e021      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	ee07 3a90 	vmov	s15, r3
 8003422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003426:	eddf 6a26 	vldr	s13, [pc, #152]	; 80034c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800342a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800342e:	4b1e      	ldr	r3, [pc, #120]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003436:	ee07 3a90 	vmov	s15, r3
 800343a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800343e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003442:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80034b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800344a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800344e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800345a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800345e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003460:	4b11      	ldr	r3, [pc, #68]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003464:	0a5b      	lsrs	r3, r3, #9
 8003466:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800346a:	3301      	adds	r3, #1
 800346c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	ee07 3a90 	vmov	s15, r3
 8003474:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003478:	edd7 6a07 	vldr	s13, [r7, #28]
 800347c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003480:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003484:	ee17 3a90 	vmov	r3, s15
 8003488:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800348a:	e005      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	61bb      	str	r3, [r7, #24]
      break;
 8003490:	e002      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003492:	4b07      	ldr	r3, [pc, #28]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003494:	61bb      	str	r3, [r7, #24]
      break;
 8003496:	bf00      	nop
  }

  return sysclockfreq;
 8003498:	69bb      	ldr	r3, [r7, #24]
}
 800349a:	4618      	mov	r0, r3
 800349c:	3724      	adds	r7, #36	; 0x24
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	58024400 	.word	0x58024400
 80034ac:	03d09000 	.word	0x03d09000
 80034b0:	003d0900 	.word	0x003d0900
 80034b4:	007a1200 	.word	0x007a1200
 80034b8:	46000000 	.word	0x46000000
 80034bc:	4c742400 	.word	0x4c742400
 80034c0:	4a742400 	.word	0x4a742400
 80034c4:	4af42400 	.word	0x4af42400

080034c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80034ce:	f7ff fe81 	bl	80031d4 <HAL_RCC_GetSysClockFreq>
 80034d2:	4602      	mov	r2, r0
 80034d4:	4b10      	ldr	r3, [pc, #64]	; (8003518 <HAL_RCC_GetHCLKFreq+0x50>)
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	0a1b      	lsrs	r3, r3, #8
 80034da:	f003 030f 	and.w	r3, r3, #15
 80034de:	490f      	ldr	r1, [pc, #60]	; (800351c <HAL_RCC_GetHCLKFreq+0x54>)
 80034e0:	5ccb      	ldrb	r3, [r1, r3]
 80034e2:	f003 031f 	and.w	r3, r3, #31
 80034e6:	fa22 f303 	lsr.w	r3, r2, r3
 80034ea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034ec:	4b0a      	ldr	r3, [pc, #40]	; (8003518 <HAL_RCC_GetHCLKFreq+0x50>)
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	f003 030f 	and.w	r3, r3, #15
 80034f4:	4a09      	ldr	r2, [pc, #36]	; (800351c <HAL_RCC_GetHCLKFreq+0x54>)
 80034f6:	5cd3      	ldrb	r3, [r2, r3]
 80034f8:	f003 031f 	and.w	r3, r3, #31
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003502:	4a07      	ldr	r2, [pc, #28]	; (8003520 <HAL_RCC_GetHCLKFreq+0x58>)
 8003504:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003506:	4a07      	ldr	r2, [pc, #28]	; (8003524 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800350c:	4b04      	ldr	r3, [pc, #16]	; (8003520 <HAL_RCC_GetHCLKFreq+0x58>)
 800350e:	681b      	ldr	r3, [r3, #0]
}
 8003510:	4618      	mov	r0, r3
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	58024400 	.word	0x58024400
 800351c:	0800ca80 	.word	0x0800ca80
 8003520:	24000004 	.word	0x24000004
 8003524:	24000000 	.word	0x24000000

08003528 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800352c:	f7ff ffcc 	bl	80034c8 <HAL_RCC_GetHCLKFreq>
 8003530:	4602      	mov	r2, r0
 8003532:	4b06      	ldr	r3, [pc, #24]	; (800354c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	091b      	lsrs	r3, r3, #4
 8003538:	f003 0307 	and.w	r3, r3, #7
 800353c:	4904      	ldr	r1, [pc, #16]	; (8003550 <HAL_RCC_GetPCLK1Freq+0x28>)
 800353e:	5ccb      	ldrb	r3, [r1, r3]
 8003540:	f003 031f 	and.w	r3, r3, #31
 8003544:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003548:	4618      	mov	r0, r3
 800354a:	bd80      	pop	{r7, pc}
 800354c:	58024400 	.word	0x58024400
 8003550:	0800ca80 	.word	0x0800ca80

08003554 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003558:	f7ff ffb6 	bl	80034c8 <HAL_RCC_GetHCLKFreq>
 800355c:	4602      	mov	r2, r0
 800355e:	4b06      	ldr	r3, [pc, #24]	; (8003578 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	0a1b      	lsrs	r3, r3, #8
 8003564:	f003 0307 	and.w	r3, r3, #7
 8003568:	4904      	ldr	r1, [pc, #16]	; (800357c <HAL_RCC_GetPCLK2Freq+0x28>)
 800356a:	5ccb      	ldrb	r3, [r1, r3]
 800356c:	f003 031f 	and.w	r3, r3, #31
 8003570:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003574:	4618      	mov	r0, r3
 8003576:	bd80      	pop	{r7, pc}
 8003578:	58024400 	.word	0x58024400
 800357c:	0800ca80 	.word	0x0800ca80

08003580 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	223f      	movs	r2, #63	; 0x3f
 800358e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003590:	4b1a      	ldr	r3, [pc, #104]	; (80035fc <HAL_RCC_GetClockConfig+0x7c>)
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	f003 0207 	and.w	r2, r3, #7
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800359c:	4b17      	ldr	r3, [pc, #92]	; (80035fc <HAL_RCC_GetClockConfig+0x7c>)
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80035a8:	4b14      	ldr	r3, [pc, #80]	; (80035fc <HAL_RCC_GetClockConfig+0x7c>)
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	f003 020f 	and.w	r2, r3, #15
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80035b4:	4b11      	ldr	r3, [pc, #68]	; (80035fc <HAL_RCC_GetClockConfig+0x7c>)
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80035c0:	4b0e      	ldr	r3, [pc, #56]	; (80035fc <HAL_RCC_GetClockConfig+0x7c>)
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80035cc:	4b0b      	ldr	r3, [pc, #44]	; (80035fc <HAL_RCC_GetClockConfig+0x7c>)
 80035ce:	69db      	ldr	r3, [r3, #28]
 80035d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80035d8:	4b08      	ldr	r3, [pc, #32]	; (80035fc <HAL_RCC_GetClockConfig+0x7c>)
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80035e4:	4b06      	ldr	r3, [pc, #24]	; (8003600 <HAL_RCC_GetClockConfig+0x80>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 020f 	and.w	r2, r3, #15
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	601a      	str	r2, [r3, #0]
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr
 80035fc:	58024400 	.word	0x58024400
 8003600:	52002000 	.word	0x52002000

08003604 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003604:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003608:	b0ca      	sub	sp, #296	; 0x128
 800360a:	af00      	add	r7, sp, #0
 800360c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003610:	2300      	movs	r3, #0
 8003612:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003616:	2300      	movs	r3, #0
 8003618:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800361c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003624:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003628:	2500      	movs	r5, #0
 800362a:	ea54 0305 	orrs.w	r3, r4, r5
 800362e:	d049      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003630:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003634:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003636:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800363a:	d02f      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800363c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003640:	d828      	bhi.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003642:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003646:	d01a      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003648:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800364c:	d822      	bhi.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003652:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003656:	d007      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003658:	e01c      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800365a:	4bb8      	ldr	r3, [pc, #736]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800365c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365e:	4ab7      	ldr	r2, [pc, #732]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003664:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003666:	e01a      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003668:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800366c:	3308      	adds	r3, #8
 800366e:	2102      	movs	r1, #2
 8003670:	4618      	mov	r0, r3
 8003672:	f001 fc8f 	bl	8004f94 <RCCEx_PLL2_Config>
 8003676:	4603      	mov	r3, r0
 8003678:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800367c:	e00f      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800367e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003682:	3328      	adds	r3, #40	; 0x28
 8003684:	2102      	movs	r1, #2
 8003686:	4618      	mov	r0, r3
 8003688:	f001 fd36 	bl	80050f8 <RCCEx_PLL3_Config>
 800368c:	4603      	mov	r3, r0
 800368e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003692:	e004      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800369a:	e000      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800369c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800369e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10a      	bne.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80036a6:	4ba5      	ldr	r3, [pc, #660]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036aa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80036ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036b4:	4aa1      	ldr	r2, [pc, #644]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036b6:	430b      	orrs	r3, r1
 80036b8:	6513      	str	r3, [r2, #80]	; 0x50
 80036ba:	e003      	b.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80036c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036cc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80036d0:	f04f 0900 	mov.w	r9, #0
 80036d4:	ea58 0309 	orrs.w	r3, r8, r9
 80036d8:	d047      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80036da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e0:	2b04      	cmp	r3, #4
 80036e2:	d82a      	bhi.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80036e4:	a201      	add	r2, pc, #4	; (adr r2, 80036ec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80036e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ea:	bf00      	nop
 80036ec:	08003701 	.word	0x08003701
 80036f0:	0800370f 	.word	0x0800370f
 80036f4:	08003725 	.word	0x08003725
 80036f8:	08003743 	.word	0x08003743
 80036fc:	08003743 	.word	0x08003743
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003700:	4b8e      	ldr	r3, [pc, #568]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003704:	4a8d      	ldr	r2, [pc, #564]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003706:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800370a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800370c:	e01a      	b.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800370e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003712:	3308      	adds	r3, #8
 8003714:	2100      	movs	r1, #0
 8003716:	4618      	mov	r0, r3
 8003718:	f001 fc3c 	bl	8004f94 <RCCEx_PLL2_Config>
 800371c:	4603      	mov	r3, r0
 800371e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003722:	e00f      	b.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003724:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003728:	3328      	adds	r3, #40	; 0x28
 800372a:	2100      	movs	r1, #0
 800372c:	4618      	mov	r0, r3
 800372e:	f001 fce3 	bl	80050f8 <RCCEx_PLL3_Config>
 8003732:	4603      	mov	r3, r0
 8003734:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003738:	e004      	b.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003740:	e000      	b.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003742:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003744:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003748:	2b00      	cmp	r3, #0
 800374a:	d10a      	bne.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800374c:	4b7b      	ldr	r3, [pc, #492]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800374e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003750:	f023 0107 	bic.w	r1, r3, #7
 8003754:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800375a:	4a78      	ldr	r2, [pc, #480]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800375c:	430b      	orrs	r3, r1
 800375e:	6513      	str	r3, [r2, #80]	; 0x50
 8003760:	e003      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003762:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003766:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800376a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800376e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003772:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003776:	f04f 0b00 	mov.w	fp, #0
 800377a:	ea5a 030b 	orrs.w	r3, sl, fp
 800377e:	d04c      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003780:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800378a:	d030      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800378c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003790:	d829      	bhi.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003792:	2bc0      	cmp	r3, #192	; 0xc0
 8003794:	d02d      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003796:	2bc0      	cmp	r3, #192	; 0xc0
 8003798:	d825      	bhi.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800379a:	2b80      	cmp	r3, #128	; 0x80
 800379c:	d018      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800379e:	2b80      	cmp	r3, #128	; 0x80
 80037a0:	d821      	bhi.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80037a6:	2b40      	cmp	r3, #64	; 0x40
 80037a8:	d007      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80037aa:	e01c      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037ac:	4b63      	ldr	r3, [pc, #396]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b0:	4a62      	ldr	r2, [pc, #392]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80037b8:	e01c      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037be:	3308      	adds	r3, #8
 80037c0:	2100      	movs	r1, #0
 80037c2:	4618      	mov	r0, r3
 80037c4:	f001 fbe6 	bl	8004f94 <RCCEx_PLL2_Config>
 80037c8:	4603      	mov	r3, r0
 80037ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80037ce:	e011      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037d4:	3328      	adds	r3, #40	; 0x28
 80037d6:	2100      	movs	r1, #0
 80037d8:	4618      	mov	r0, r3
 80037da:	f001 fc8d 	bl	80050f8 <RCCEx_PLL3_Config>
 80037de:	4603      	mov	r3, r0
 80037e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80037e4:	e006      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80037ec:	e002      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80037ee:	bf00      	nop
 80037f0:	e000      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80037f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d10a      	bne.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80037fc:	4b4f      	ldr	r3, [pc, #316]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003800:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003804:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800380a:	4a4c      	ldr	r2, [pc, #304]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800380c:	430b      	orrs	r3, r1
 800380e:	6513      	str	r3, [r2, #80]	; 0x50
 8003810:	e003      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003812:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003816:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800381a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800381e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003822:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003826:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800382a:	2300      	movs	r3, #0
 800382c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003830:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003834:	460b      	mov	r3, r1
 8003836:	4313      	orrs	r3, r2
 8003838:	d053      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800383a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800383e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003842:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003846:	d035      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003848:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800384c:	d82e      	bhi.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800384e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003852:	d031      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003854:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003858:	d828      	bhi.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800385a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800385e:	d01a      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003860:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003864:	d822      	bhi.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800386a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800386e:	d007      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003870:	e01c      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003872:	4b32      	ldr	r3, [pc, #200]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003876:	4a31      	ldr	r2, [pc, #196]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800387c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800387e:	e01c      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003880:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003884:	3308      	adds	r3, #8
 8003886:	2100      	movs	r1, #0
 8003888:	4618      	mov	r0, r3
 800388a:	f001 fb83 	bl	8004f94 <RCCEx_PLL2_Config>
 800388e:	4603      	mov	r3, r0
 8003890:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003894:	e011      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003896:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800389a:	3328      	adds	r3, #40	; 0x28
 800389c:	2100      	movs	r1, #0
 800389e:	4618      	mov	r0, r3
 80038a0:	f001 fc2a 	bl	80050f8 <RCCEx_PLL3_Config>
 80038a4:	4603      	mov	r3, r0
 80038a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038aa:	e006      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80038b2:	e002      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80038b4:	bf00      	nop
 80038b6:	e000      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80038b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10b      	bne.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80038c2:	4b1e      	ldr	r3, [pc, #120]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80038ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80038d2:	4a1a      	ldr	r2, [pc, #104]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038d4:	430b      	orrs	r3, r1
 80038d6:	6593      	str	r3, [r2, #88]	; 0x58
 80038d8:	e003      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80038e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ea:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80038ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80038f2:	2300      	movs	r3, #0
 80038f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80038f8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80038fc:	460b      	mov	r3, r1
 80038fe:	4313      	orrs	r3, r2
 8003900:	d056      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003902:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003906:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800390a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800390e:	d038      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003910:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003914:	d831      	bhi.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003916:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800391a:	d034      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800391c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003920:	d82b      	bhi.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003922:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003926:	d01d      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003928:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800392c:	d825      	bhi.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800392e:	2b00      	cmp	r3, #0
 8003930:	d006      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003932:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003936:	d00a      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003938:	e01f      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800393a:	bf00      	nop
 800393c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003940:	4ba2      	ldr	r3, [pc, #648]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003944:	4aa1      	ldr	r2, [pc, #644]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003946:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800394a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800394c:	e01c      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800394e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003952:	3308      	adds	r3, #8
 8003954:	2100      	movs	r1, #0
 8003956:	4618      	mov	r0, r3
 8003958:	f001 fb1c 	bl	8004f94 <RCCEx_PLL2_Config>
 800395c:	4603      	mov	r3, r0
 800395e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003962:	e011      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003964:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003968:	3328      	adds	r3, #40	; 0x28
 800396a:	2100      	movs	r1, #0
 800396c:	4618      	mov	r0, r3
 800396e:	f001 fbc3 	bl	80050f8 <RCCEx_PLL3_Config>
 8003972:	4603      	mov	r3, r0
 8003974:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003978:	e006      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003980:	e002      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003982:	bf00      	nop
 8003984:	e000      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003986:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003988:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800398c:	2b00      	cmp	r3, #0
 800398e:	d10b      	bne.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003990:	4b8e      	ldr	r3, [pc, #568]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003994:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003998:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800399c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80039a0:	4a8a      	ldr	r2, [pc, #552]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039a2:	430b      	orrs	r3, r1
 80039a4:	6593      	str	r3, [r2, #88]	; 0x58
 80039a6:	e003      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80039b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80039bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80039c0:	2300      	movs	r3, #0
 80039c2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80039c6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80039ca:	460b      	mov	r3, r1
 80039cc:	4313      	orrs	r3, r2
 80039ce:	d03a      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80039d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039d6:	2b30      	cmp	r3, #48	; 0x30
 80039d8:	d01f      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80039da:	2b30      	cmp	r3, #48	; 0x30
 80039dc:	d819      	bhi.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80039de:	2b20      	cmp	r3, #32
 80039e0:	d00c      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80039e2:	2b20      	cmp	r3, #32
 80039e4:	d815      	bhi.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d019      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80039ea:	2b10      	cmp	r3, #16
 80039ec:	d111      	bne.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039ee:	4b77      	ldr	r3, [pc, #476]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f2:	4a76      	ldr	r2, [pc, #472]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80039fa:	e011      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a00:	3308      	adds	r3, #8
 8003a02:	2102      	movs	r1, #2
 8003a04:	4618      	mov	r0, r3
 8003a06:	f001 fac5 	bl	8004f94 <RCCEx_PLL2_Config>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003a10:	e006      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a18:	e002      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003a1a:	bf00      	nop
 8003a1c:	e000      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003a1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d10a      	bne.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003a28:	4b68      	ldr	r3, [pc, #416]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a2c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a36:	4a65      	ldr	r2, [pc, #404]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a38:	430b      	orrs	r3, r1
 8003a3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a3c:	e003      	b.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a42:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003a52:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003a56:	2300      	movs	r3, #0
 8003a58:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003a5c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003a60:	460b      	mov	r3, r1
 8003a62:	4313      	orrs	r3, r2
 8003a64:	d051      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a70:	d035      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003a72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a76:	d82e      	bhi.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a7c:	d031      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003a7e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a82:	d828      	bhi.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a88:	d01a      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003a8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a8e:	d822      	bhi.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d003      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a98:	d007      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003a9a:	e01c      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a9c:	4b4b      	ldr	r3, [pc, #300]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa0:	4a4a      	ldr	r2, [pc, #296]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003aa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aa6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003aa8:	e01c      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aae:	3308      	adds	r3, #8
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f001 fa6e 	bl	8004f94 <RCCEx_PLL2_Config>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003abe:	e011      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ac4:	3328      	adds	r3, #40	; 0x28
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f001 fb15 	bl	80050f8 <RCCEx_PLL3_Config>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003ad4:	e006      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003adc:	e002      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003ade:	bf00      	nop
 8003ae0:	e000      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003ae2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ae4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10a      	bne.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003aec:	4b37      	ldr	r3, [pc, #220]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003af0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003afa:	4a34      	ldr	r2, [pc, #208]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003afc:	430b      	orrs	r3, r1
 8003afe:	6513      	str	r3, [r2, #80]	; 0x50
 8003b00:	e003      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b06:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b12:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003b16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003b20:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003b24:	460b      	mov	r3, r1
 8003b26:	4313      	orrs	r3, r2
 8003b28:	d056      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b34:	d033      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003b36:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b3a:	d82c      	bhi.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b40:	d02f      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003b42:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b46:	d826      	bhi.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b48:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b4c:	d02b      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003b4e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b52:	d820      	bhi.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b58:	d012      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003b5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b5e:	d81a      	bhi.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d022      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b68:	d115      	bne.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b6e:	3308      	adds	r3, #8
 8003b70:	2101      	movs	r1, #1
 8003b72:	4618      	mov	r0, r3
 8003b74:	f001 fa0e 	bl	8004f94 <RCCEx_PLL2_Config>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003b7e:	e015      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b84:	3328      	adds	r3, #40	; 0x28
 8003b86:	2101      	movs	r1, #1
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f001 fab5 	bl	80050f8 <RCCEx_PLL3_Config>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003b94:	e00a      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b9c:	e006      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b9e:	bf00      	nop
 8003ba0:	e004      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003ba2:	bf00      	nop
 8003ba4:	e002      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003ba6:	bf00      	nop
 8003ba8:	e000      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003baa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10d      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003bb4:	4b05      	ldr	r3, [pc, #20]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bb8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bc2:	4a02      	ldr	r2, [pc, #8]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bc4:	430b      	orrs	r3, r1
 8003bc6:	6513      	str	r3, [r2, #80]	; 0x50
 8003bc8:	e006      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003bca:	bf00      	nop
 8003bcc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bd4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003be4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003be8:	2300      	movs	r3, #0
 8003bea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003bee:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	d055      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bfc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c04:	d033      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003c06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c0a:	d82c      	bhi.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c10:	d02f      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003c12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c16:	d826      	bhi.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c18:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c1c:	d02b      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003c1e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c22:	d820      	bhi.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c28:	d012      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003c2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c2e:	d81a      	bhi.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d022      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003c34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c38:	d115      	bne.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c3e:	3308      	adds	r3, #8
 8003c40:	2101      	movs	r1, #1
 8003c42:	4618      	mov	r0, r3
 8003c44:	f001 f9a6 	bl	8004f94 <RCCEx_PLL2_Config>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003c4e:	e015      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c54:	3328      	adds	r3, #40	; 0x28
 8003c56:	2101      	movs	r1, #1
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f001 fa4d 	bl	80050f8 <RCCEx_PLL3_Config>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003c64:	e00a      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c6c:	e006      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c6e:	bf00      	nop
 8003c70:	e004      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c72:	bf00      	nop
 8003c74:	e002      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c76:	bf00      	nop
 8003c78:	e000      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10b      	bne.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003c84:	4ba3      	ldr	r3, [pc, #652]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c88:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c94:	4a9f      	ldr	r2, [pc, #636]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c96:	430b      	orrs	r3, r1
 8003c98:	6593      	str	r3, [r2, #88]	; 0x58
 8003c9a:	e003      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ca0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cac:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003cb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003cba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	d037      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cce:	d00e      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003cd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cd4:	d816      	bhi.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d018      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003cda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cde:	d111      	bne.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ce0:	4b8c      	ldr	r3, [pc, #560]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce4:	4a8b      	ldr	r2, [pc, #556]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ce6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003cec:	e00f      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cf2:	3308      	adds	r3, #8
 8003cf4:	2101      	movs	r1, #1
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f001 f94c 	bl	8004f94 <RCCEx_PLL2_Config>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003d02:	e004      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d0a:	e000      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003d0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10a      	bne.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d16:	4b7f      	ldr	r3, [pc, #508]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d1a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d24:	4a7b      	ldr	r2, [pc, #492]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d26:	430b      	orrs	r3, r1
 8003d28:	6513      	str	r3, [r2, #80]	; 0x50
 8003d2a:	e003      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d30:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003d40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d44:	2300      	movs	r3, #0
 8003d46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003d4a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003d4e:	460b      	mov	r3, r1
 8003d50:	4313      	orrs	r3, r2
 8003d52:	d039      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d5a:	2b03      	cmp	r3, #3
 8003d5c:	d81c      	bhi.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003d5e:	a201      	add	r2, pc, #4	; (adr r2, 8003d64 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d64:	08003da1 	.word	0x08003da1
 8003d68:	08003d75 	.word	0x08003d75
 8003d6c:	08003d83 	.word	0x08003d83
 8003d70:	08003da1 	.word	0x08003da1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d74:	4b67      	ldr	r3, [pc, #412]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d78:	4a66      	ldr	r2, [pc, #408]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003d80:	e00f      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d86:	3308      	adds	r3, #8
 8003d88:	2102      	movs	r1, #2
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f001 f902 	bl	8004f94 <RCCEx_PLL2_Config>
 8003d90:	4603      	mov	r3, r0
 8003d92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003d96:	e004      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d9e:	e000      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003da0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003da2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10a      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003daa:	4b5a      	ldr	r3, [pc, #360]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dae:	f023 0103 	bic.w	r1, r3, #3
 8003db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003db6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003db8:	4a56      	ldr	r2, [pc, #344]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dba:	430b      	orrs	r3, r1
 8003dbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003dbe:	e003      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dc4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003dd4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003dd8:	2300      	movs	r3, #0
 8003dda:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003dde:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003de2:	460b      	mov	r3, r1
 8003de4:	4313      	orrs	r3, r2
 8003de6:	f000 809f 	beq.w	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dea:	4b4b      	ldr	r3, [pc, #300]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a4a      	ldr	r2, [pc, #296]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003df4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003df6:	f7fd fb2d 	bl	8001454 <HAL_GetTick>
 8003dfa:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dfe:	e00b      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e00:	f7fd fb28 	bl	8001454 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b64      	cmp	r3, #100	; 0x64
 8003e0e:	d903      	bls.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e16:	e005      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e18:	4b3f      	ldr	r3, [pc, #252]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d0ed      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003e24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d179      	bne.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003e2c:	4b39      	ldr	r3, [pc, #228]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e34:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e38:	4053      	eors	r3, r2
 8003e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d015      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e42:	4b34      	ldr	r3, [pc, #208]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e4a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e4e:	4b31      	ldr	r3, [pc, #196]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e52:	4a30      	ldr	r2, [pc, #192]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e58:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e5a:	4b2e      	ldr	r3, [pc, #184]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5e:	4a2d      	ldr	r2, [pc, #180]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e64:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003e66:	4a2b      	ldr	r2, [pc, #172]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e68:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003e6c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e7a:	d118      	bne.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7c:	f7fd faea 	bl	8001454 <HAL_GetTick>
 8003e80:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e84:	e00d      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e86:	f7fd fae5 	bl	8001454 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003e90:	1ad2      	subs	r2, r2, r3
 8003e92:	f241 3388 	movw	r3, #5000	; 0x1388
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d903      	bls.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003ea0:	e005      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ea2:	4b1c      	ldr	r3, [pc, #112]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d0eb      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003eae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d129      	bne.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003ebe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ec2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ec6:	d10e      	bne.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003ec8:	4b12      	ldr	r3, [pc, #72]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ed4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003ed8:	091a      	lsrs	r2, r3, #4
 8003eda:	4b10      	ldr	r3, [pc, #64]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003edc:	4013      	ands	r3, r2
 8003ede:	4a0d      	ldr	r2, [pc, #52]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ee0:	430b      	orrs	r3, r1
 8003ee2:	6113      	str	r3, [r2, #16]
 8003ee4:	e005      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003ee6:	4b0b      	ldr	r3, [pc, #44]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	4a0a      	ldr	r2, [pc, #40]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003ef0:	6113      	str	r3, [r2, #16]
 8003ef2:	4b08      	ldr	r3, [pc, #32]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ef4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003efa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003efe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f02:	4a04      	ldr	r2, [pc, #16]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f04:	430b      	orrs	r3, r1
 8003f06:	6713      	str	r3, [r2, #112]	; 0x70
 8003f08:	e00e      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8003f12:	e009      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003f14:	58024400 	.word	0x58024400
 8003f18:	58024800 	.word	0x58024800
 8003f1c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f30:	f002 0301 	and.w	r3, r2, #1
 8003f34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f38:	2300      	movs	r3, #0
 8003f3a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f3e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003f42:	460b      	mov	r3, r1
 8003f44:	4313      	orrs	r3, r2
 8003f46:	f000 8089 	beq.w	800405c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f50:	2b28      	cmp	r3, #40	; 0x28
 8003f52:	d86b      	bhi.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003f54:	a201      	add	r2, pc, #4	; (adr r2, 8003f5c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5a:	bf00      	nop
 8003f5c:	08004035 	.word	0x08004035
 8003f60:	0800402d 	.word	0x0800402d
 8003f64:	0800402d 	.word	0x0800402d
 8003f68:	0800402d 	.word	0x0800402d
 8003f6c:	0800402d 	.word	0x0800402d
 8003f70:	0800402d 	.word	0x0800402d
 8003f74:	0800402d 	.word	0x0800402d
 8003f78:	0800402d 	.word	0x0800402d
 8003f7c:	08004001 	.word	0x08004001
 8003f80:	0800402d 	.word	0x0800402d
 8003f84:	0800402d 	.word	0x0800402d
 8003f88:	0800402d 	.word	0x0800402d
 8003f8c:	0800402d 	.word	0x0800402d
 8003f90:	0800402d 	.word	0x0800402d
 8003f94:	0800402d 	.word	0x0800402d
 8003f98:	0800402d 	.word	0x0800402d
 8003f9c:	08004017 	.word	0x08004017
 8003fa0:	0800402d 	.word	0x0800402d
 8003fa4:	0800402d 	.word	0x0800402d
 8003fa8:	0800402d 	.word	0x0800402d
 8003fac:	0800402d 	.word	0x0800402d
 8003fb0:	0800402d 	.word	0x0800402d
 8003fb4:	0800402d 	.word	0x0800402d
 8003fb8:	0800402d 	.word	0x0800402d
 8003fbc:	08004035 	.word	0x08004035
 8003fc0:	0800402d 	.word	0x0800402d
 8003fc4:	0800402d 	.word	0x0800402d
 8003fc8:	0800402d 	.word	0x0800402d
 8003fcc:	0800402d 	.word	0x0800402d
 8003fd0:	0800402d 	.word	0x0800402d
 8003fd4:	0800402d 	.word	0x0800402d
 8003fd8:	0800402d 	.word	0x0800402d
 8003fdc:	08004035 	.word	0x08004035
 8003fe0:	0800402d 	.word	0x0800402d
 8003fe4:	0800402d 	.word	0x0800402d
 8003fe8:	0800402d 	.word	0x0800402d
 8003fec:	0800402d 	.word	0x0800402d
 8003ff0:	0800402d 	.word	0x0800402d
 8003ff4:	0800402d 	.word	0x0800402d
 8003ff8:	0800402d 	.word	0x0800402d
 8003ffc:	08004035 	.word	0x08004035
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004000:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004004:	3308      	adds	r3, #8
 8004006:	2101      	movs	r1, #1
 8004008:	4618      	mov	r0, r3
 800400a:	f000 ffc3 	bl	8004f94 <RCCEx_PLL2_Config>
 800400e:	4603      	mov	r3, r0
 8004010:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004014:	e00f      	b.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004016:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800401a:	3328      	adds	r3, #40	; 0x28
 800401c:	2101      	movs	r1, #1
 800401e:	4618      	mov	r0, r3
 8004020:	f001 f86a 	bl	80050f8 <RCCEx_PLL3_Config>
 8004024:	4603      	mov	r3, r0
 8004026:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800402a:	e004      	b.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004032:	e000      	b.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004034:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004036:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10a      	bne.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800403e:	4bbf      	ldr	r3, [pc, #764]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004042:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004046:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800404a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800404c:	4abb      	ldr	r2, [pc, #748]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800404e:	430b      	orrs	r3, r1
 8004050:	6553      	str	r3, [r2, #84]	; 0x54
 8004052:	e003      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004054:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004058:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800405c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004064:	f002 0302 	and.w	r3, r2, #2
 8004068:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800406c:	2300      	movs	r3, #0
 800406e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004072:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004076:	460b      	mov	r3, r1
 8004078:	4313      	orrs	r3, r2
 800407a:	d041      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800407c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004080:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004082:	2b05      	cmp	r3, #5
 8004084:	d824      	bhi.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004086:	a201      	add	r2, pc, #4	; (adr r2, 800408c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800408c:	080040d9 	.word	0x080040d9
 8004090:	080040a5 	.word	0x080040a5
 8004094:	080040bb 	.word	0x080040bb
 8004098:	080040d9 	.word	0x080040d9
 800409c:	080040d9 	.word	0x080040d9
 80040a0:	080040d9 	.word	0x080040d9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040a8:	3308      	adds	r3, #8
 80040aa:	2101      	movs	r1, #1
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 ff71 	bl	8004f94 <RCCEx_PLL2_Config>
 80040b2:	4603      	mov	r3, r0
 80040b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80040b8:	e00f      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040be:	3328      	adds	r3, #40	; 0x28
 80040c0:	2101      	movs	r1, #1
 80040c2:	4618      	mov	r0, r3
 80040c4:	f001 f818 	bl	80050f8 <RCCEx_PLL3_Config>
 80040c8:	4603      	mov	r3, r0
 80040ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80040ce:	e004      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80040d6:	e000      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80040d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10a      	bne.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80040e2:	4b96      	ldr	r3, [pc, #600]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e6:	f023 0107 	bic.w	r1, r3, #7
 80040ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040f0:	4a92      	ldr	r2, [pc, #584]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040f2:	430b      	orrs	r3, r1
 80040f4:	6553      	str	r3, [r2, #84]	; 0x54
 80040f6:	e003      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004100:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004108:	f002 0304 	and.w	r3, r2, #4
 800410c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004110:	2300      	movs	r3, #0
 8004112:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004116:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800411a:	460b      	mov	r3, r1
 800411c:	4313      	orrs	r3, r2
 800411e:	d044      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004120:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004124:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004128:	2b05      	cmp	r3, #5
 800412a:	d825      	bhi.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800412c:	a201      	add	r2, pc, #4	; (adr r2, 8004134 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800412e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004132:	bf00      	nop
 8004134:	08004181 	.word	0x08004181
 8004138:	0800414d 	.word	0x0800414d
 800413c:	08004163 	.word	0x08004163
 8004140:	08004181 	.word	0x08004181
 8004144:	08004181 	.word	0x08004181
 8004148:	08004181 	.word	0x08004181
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800414c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004150:	3308      	adds	r3, #8
 8004152:	2101      	movs	r1, #1
 8004154:	4618      	mov	r0, r3
 8004156:	f000 ff1d 	bl	8004f94 <RCCEx_PLL2_Config>
 800415a:	4603      	mov	r3, r0
 800415c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004160:	e00f      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004162:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004166:	3328      	adds	r3, #40	; 0x28
 8004168:	2101      	movs	r1, #1
 800416a:	4618      	mov	r0, r3
 800416c:	f000 ffc4 	bl	80050f8 <RCCEx_PLL3_Config>
 8004170:	4603      	mov	r3, r0
 8004172:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004176:	e004      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800417e:	e000      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004180:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004182:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10b      	bne.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800418a:	4b6c      	ldr	r3, [pc, #432]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800418c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800418e:	f023 0107 	bic.w	r1, r3, #7
 8004192:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004196:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800419a:	4a68      	ldr	r2, [pc, #416]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800419c:	430b      	orrs	r3, r1
 800419e:	6593      	str	r3, [r2, #88]	; 0x58
 80041a0:	e003      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80041aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b2:	f002 0320 	and.w	r3, r2, #32
 80041b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80041ba:	2300      	movs	r3, #0
 80041bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80041c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80041c4:	460b      	mov	r3, r1
 80041c6:	4313      	orrs	r3, r2
 80041c8:	d055      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80041ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041d6:	d033      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80041d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041dc:	d82c      	bhi.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80041de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041e2:	d02f      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80041e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041e8:	d826      	bhi.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80041ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041ee:	d02b      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80041f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041f4:	d820      	bhi.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80041f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041fa:	d012      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80041fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004200:	d81a      	bhi.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004202:	2b00      	cmp	r3, #0
 8004204:	d022      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004206:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800420a:	d115      	bne.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800420c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004210:	3308      	adds	r3, #8
 8004212:	2100      	movs	r1, #0
 8004214:	4618      	mov	r0, r3
 8004216:	f000 febd 	bl	8004f94 <RCCEx_PLL2_Config>
 800421a:	4603      	mov	r3, r0
 800421c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004220:	e015      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004222:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004226:	3328      	adds	r3, #40	; 0x28
 8004228:	2102      	movs	r1, #2
 800422a:	4618      	mov	r0, r3
 800422c:	f000 ff64 	bl	80050f8 <RCCEx_PLL3_Config>
 8004230:	4603      	mov	r3, r0
 8004232:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004236:	e00a      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800423e:	e006      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004240:	bf00      	nop
 8004242:	e004      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004244:	bf00      	nop
 8004246:	e002      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004248:	bf00      	nop
 800424a:	e000      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800424c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800424e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10b      	bne.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004256:	4b39      	ldr	r3, [pc, #228]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800425e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004266:	4a35      	ldr	r2, [pc, #212]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004268:	430b      	orrs	r3, r1
 800426a:	6553      	str	r3, [r2, #84]	; 0x54
 800426c:	e003      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800426e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004272:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004276:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800427a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004282:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004286:	2300      	movs	r3, #0
 8004288:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800428c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004290:	460b      	mov	r3, r1
 8004292:	4313      	orrs	r3, r2
 8004294:	d058      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004296:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800429a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800429e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80042a2:	d033      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80042a4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80042a8:	d82c      	bhi.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80042aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ae:	d02f      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80042b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042b4:	d826      	bhi.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80042b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042ba:	d02b      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80042bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042c0:	d820      	bhi.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80042c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042c6:	d012      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80042c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042cc:	d81a      	bhi.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d022      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80042d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042d6:	d115      	bne.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042dc:	3308      	adds	r3, #8
 80042de:	2100      	movs	r1, #0
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 fe57 	bl	8004f94 <RCCEx_PLL2_Config>
 80042e6:	4603      	mov	r3, r0
 80042e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80042ec:	e015      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042f2:	3328      	adds	r3, #40	; 0x28
 80042f4:	2102      	movs	r1, #2
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 fefe 	bl	80050f8 <RCCEx_PLL3_Config>
 80042fc:	4603      	mov	r3, r0
 80042fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004302:	e00a      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800430a:	e006      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800430c:	bf00      	nop
 800430e:	e004      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004310:	bf00      	nop
 8004312:	e002      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004314:	bf00      	nop
 8004316:	e000      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004318:	bf00      	nop
    }

    if (ret == HAL_OK)
 800431a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10e      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004322:	4b06      	ldr	r3, [pc, #24]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004326:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800432a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800432e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004332:	4a02      	ldr	r2, [pc, #8]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004334:	430b      	orrs	r3, r1
 8004336:	6593      	str	r3, [r2, #88]	; 0x58
 8004338:	e006      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800433a:	bf00      	nop
 800433c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004340:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004344:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004348:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800434c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004350:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004354:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004358:	2300      	movs	r3, #0
 800435a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800435e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004362:	460b      	mov	r3, r1
 8004364:	4313      	orrs	r3, r2
 8004366:	d055      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004368:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800436c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004370:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004374:	d033      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004376:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800437a:	d82c      	bhi.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800437c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004380:	d02f      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004382:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004386:	d826      	bhi.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004388:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800438c:	d02b      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800438e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004392:	d820      	bhi.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004394:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004398:	d012      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800439a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800439e:	d81a      	bhi.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d022      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80043a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043a8:	d115      	bne.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043ae:	3308      	adds	r3, #8
 80043b0:	2100      	movs	r1, #0
 80043b2:	4618      	mov	r0, r3
 80043b4:	f000 fdee 	bl	8004f94 <RCCEx_PLL2_Config>
 80043b8:	4603      	mov	r3, r0
 80043ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80043be:	e015      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043c4:	3328      	adds	r3, #40	; 0x28
 80043c6:	2102      	movs	r1, #2
 80043c8:	4618      	mov	r0, r3
 80043ca:	f000 fe95 	bl	80050f8 <RCCEx_PLL3_Config>
 80043ce:	4603      	mov	r3, r0
 80043d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80043d4:	e00a      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80043dc:	e006      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80043de:	bf00      	nop
 80043e0:	e004      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80043e2:	bf00      	nop
 80043e4:	e002      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80043e6:	bf00      	nop
 80043e8:	e000      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80043ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10b      	bne.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80043f4:	4ba1      	ldr	r3, [pc, #644]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80043fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004400:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004404:	4a9d      	ldr	r2, [pc, #628]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004406:	430b      	orrs	r3, r1
 8004408:	6593      	str	r3, [r2, #88]	; 0x58
 800440a:	e003      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800440c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004410:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004414:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441c:	f002 0308 	and.w	r3, r2, #8
 8004420:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004424:	2300      	movs	r3, #0
 8004426:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800442a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800442e:	460b      	mov	r3, r1
 8004430:	4313      	orrs	r3, r2
 8004432:	d01e      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004434:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004438:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800443c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004440:	d10c      	bne.n	800445c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004442:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004446:	3328      	adds	r3, #40	; 0x28
 8004448:	2102      	movs	r1, #2
 800444a:	4618      	mov	r0, r3
 800444c:	f000 fe54 	bl	80050f8 <RCCEx_PLL3_Config>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d002      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800445c:	4b87      	ldr	r3, [pc, #540]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800445e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004460:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004464:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004468:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800446c:	4a83      	ldr	r2, [pc, #524]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800446e:	430b      	orrs	r3, r1
 8004470:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004472:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800447a:	f002 0310 	and.w	r3, r2, #16
 800447e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004482:	2300      	movs	r3, #0
 8004484:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004488:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800448c:	460b      	mov	r3, r1
 800448e:	4313      	orrs	r3, r2
 8004490:	d01e      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004492:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004496:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800449a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800449e:	d10c      	bne.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80044a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044a4:	3328      	adds	r3, #40	; 0x28
 80044a6:	2102      	movs	r1, #2
 80044a8:	4618      	mov	r0, r3
 80044aa:	f000 fe25 	bl	80050f8 <RCCEx_PLL3_Config>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d002      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044ba:	4b70      	ldr	r3, [pc, #448]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80044c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044ca:	4a6c      	ldr	r2, [pc, #432]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044cc:	430b      	orrs	r3, r1
 80044ce:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80044dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80044e0:	2300      	movs	r3, #0
 80044e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80044e6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80044ea:	460b      	mov	r3, r1
 80044ec:	4313      	orrs	r3, r2
 80044ee:	d03e      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80044f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80044f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044fc:	d022      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80044fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004502:	d81b      	bhi.n	800453c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004504:	2b00      	cmp	r3, #0
 8004506:	d003      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800450c:	d00b      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800450e:	e015      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004510:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004514:	3308      	adds	r3, #8
 8004516:	2100      	movs	r1, #0
 8004518:	4618      	mov	r0, r3
 800451a:	f000 fd3b 	bl	8004f94 <RCCEx_PLL2_Config>
 800451e:	4603      	mov	r3, r0
 8004520:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004524:	e00f      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800452a:	3328      	adds	r3, #40	; 0x28
 800452c:	2102      	movs	r1, #2
 800452e:	4618      	mov	r0, r3
 8004530:	f000 fde2 	bl	80050f8 <RCCEx_PLL3_Config>
 8004534:	4603      	mov	r3, r0
 8004536:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800453a:	e004      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004542:	e000      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004544:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004546:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800454a:	2b00      	cmp	r3, #0
 800454c:	d10b      	bne.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800454e:	4b4b      	ldr	r3, [pc, #300]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004552:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004556:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800455a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800455e:	4a47      	ldr	r2, [pc, #284]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004560:	430b      	orrs	r3, r1
 8004562:	6593      	str	r3, [r2, #88]	; 0x58
 8004564:	e003      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004566:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800456a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800456e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004576:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800457a:	67bb      	str	r3, [r7, #120]	; 0x78
 800457c:	2300      	movs	r3, #0
 800457e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004580:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004584:	460b      	mov	r3, r1
 8004586:	4313      	orrs	r3, r2
 8004588:	d03b      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800458a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800458e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004592:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004596:	d01f      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004598:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800459c:	d818      	bhi.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800459e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045a2:	d003      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80045a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045a8:	d007      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80045aa:	e011      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045ac:	4b33      	ldr	r3, [pc, #204]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b0:	4a32      	ldr	r2, [pc, #200]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80045b8:	e00f      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045be:	3328      	adds	r3, #40	; 0x28
 80045c0:	2101      	movs	r1, #1
 80045c2:	4618      	mov	r0, r3
 80045c4:	f000 fd98 	bl	80050f8 <RCCEx_PLL3_Config>
 80045c8:	4603      	mov	r3, r0
 80045ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80045ce:	e004      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80045d6:	e000      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80045d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10b      	bne.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045e2:	4b26      	ldr	r3, [pc, #152]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80045ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f2:	4a22      	ldr	r2, [pc, #136]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045f4:	430b      	orrs	r3, r1
 80045f6:	6553      	str	r3, [r2, #84]	; 0x54
 80045f8:	e003      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004602:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800460e:	673b      	str	r3, [r7, #112]	; 0x70
 8004610:	2300      	movs	r3, #0
 8004612:	677b      	str	r3, [r7, #116]	; 0x74
 8004614:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004618:	460b      	mov	r3, r1
 800461a:	4313      	orrs	r3, r2
 800461c:	d034      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800461e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004624:	2b00      	cmp	r3, #0
 8004626:	d003      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800462c:	d007      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800462e:	e011      	b.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004630:	4b12      	ldr	r3, [pc, #72]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004634:	4a11      	ldr	r2, [pc, #68]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004636:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800463a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800463c:	e00e      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800463e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004642:	3308      	adds	r3, #8
 8004644:	2102      	movs	r1, #2
 8004646:	4618      	mov	r0, r3
 8004648:	f000 fca4 	bl	8004f94 <RCCEx_PLL2_Config>
 800464c:	4603      	mov	r3, r0
 800464e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004652:	e003      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800465a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800465c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10d      	bne.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004664:	4b05      	ldr	r3, [pc, #20]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004668:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800466c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004672:	4a02      	ldr	r2, [pc, #8]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004674:	430b      	orrs	r3, r1
 8004676:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004678:	e006      	b.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800467a:	bf00      	nop
 800467c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004680:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004684:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004688:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800468c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004690:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004694:	66bb      	str	r3, [r7, #104]	; 0x68
 8004696:	2300      	movs	r3, #0
 8004698:	66fb      	str	r3, [r7, #108]	; 0x6c
 800469a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800469e:	460b      	mov	r3, r1
 80046a0:	4313      	orrs	r3, r2
 80046a2:	d00c      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80046a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046a8:	3328      	adds	r3, #40	; 0x28
 80046aa:	2102      	movs	r1, #2
 80046ac:	4618      	mov	r0, r3
 80046ae:	f000 fd23 	bl	80050f8 <RCCEx_PLL3_Config>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d002      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80046be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80046ca:	663b      	str	r3, [r7, #96]	; 0x60
 80046cc:	2300      	movs	r3, #0
 80046ce:	667b      	str	r3, [r7, #100]	; 0x64
 80046d0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80046d4:	460b      	mov	r3, r1
 80046d6:	4313      	orrs	r3, r2
 80046d8:	d038      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80046da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046e6:	d018      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80046e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046ec:	d811      	bhi.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80046ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046f2:	d014      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80046f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046f8:	d80b      	bhi.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d011      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80046fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004702:	d106      	bne.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004704:	4bc3      	ldr	r3, [pc, #780]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004708:	4ac2      	ldr	r2, [pc, #776]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800470a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800470e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004710:	e008      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004718:	e004      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800471a:	bf00      	nop
 800471c:	e002      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800471e:	bf00      	nop
 8004720:	e000      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004722:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004724:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10b      	bne.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800472c:	4bb9      	ldr	r3, [pc, #740]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800472e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004730:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004734:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004738:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800473c:	4ab5      	ldr	r2, [pc, #724]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800473e:	430b      	orrs	r3, r1
 8004740:	6553      	str	r3, [r2, #84]	; 0x54
 8004742:	e003      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004744:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004748:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800474c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004754:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004758:	65bb      	str	r3, [r7, #88]	; 0x58
 800475a:	2300      	movs	r3, #0
 800475c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800475e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004762:	460b      	mov	r3, r1
 8004764:	4313      	orrs	r3, r2
 8004766:	d009      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004768:	4baa      	ldr	r3, [pc, #680]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800476a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800476c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004770:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004776:	4aa7      	ldr	r2, [pc, #668]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004778:	430b      	orrs	r3, r1
 800477a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800477c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004784:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004788:	653b      	str	r3, [r7, #80]	; 0x50
 800478a:	2300      	movs	r3, #0
 800478c:	657b      	str	r3, [r7, #84]	; 0x54
 800478e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004792:	460b      	mov	r3, r1
 8004794:	4313      	orrs	r3, r2
 8004796:	d00a      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004798:	4b9e      	ldr	r3, [pc, #632]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80047a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80047a8:	4a9a      	ldr	r2, [pc, #616]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047aa:	430b      	orrs	r3, r1
 80047ac:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80047ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80047bc:	2300      	movs	r3, #0
 80047be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047c0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80047c4:	460b      	mov	r3, r1
 80047c6:	4313      	orrs	r3, r2
 80047c8:	d009      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047ca:	4b92      	ldr	r3, [pc, #584]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ce:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80047d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047d8:	4a8e      	ldr	r2, [pc, #568]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047da:	430b      	orrs	r3, r1
 80047dc:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80047de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80047ea:	643b      	str	r3, [r7, #64]	; 0x40
 80047ec:	2300      	movs	r3, #0
 80047ee:	647b      	str	r3, [r7, #68]	; 0x44
 80047f0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80047f4:	460b      	mov	r3, r1
 80047f6:	4313      	orrs	r3, r2
 80047f8:	d00e      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80047fa:	4b86      	ldr	r3, [pc, #536]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	4a85      	ldr	r2, [pc, #532]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004800:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004804:	6113      	str	r3, [r2, #16]
 8004806:	4b83      	ldr	r3, [pc, #524]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004808:	6919      	ldr	r1, [r3, #16]
 800480a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800480e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004812:	4a80      	ldr	r2, [pc, #512]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004814:	430b      	orrs	r3, r1
 8004816:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004818:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800481c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004820:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004824:	63bb      	str	r3, [r7, #56]	; 0x38
 8004826:	2300      	movs	r3, #0
 8004828:	63fb      	str	r3, [r7, #60]	; 0x3c
 800482a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800482e:	460b      	mov	r3, r1
 8004830:	4313      	orrs	r3, r2
 8004832:	d009      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004834:	4b77      	ldr	r3, [pc, #476]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004838:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800483c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004842:	4a74      	ldr	r2, [pc, #464]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004844:	430b      	orrs	r3, r1
 8004846:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004848:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800484c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004850:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004854:	633b      	str	r3, [r7, #48]	; 0x30
 8004856:	2300      	movs	r3, #0
 8004858:	637b      	str	r3, [r7, #52]	; 0x34
 800485a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800485e:	460b      	mov	r3, r1
 8004860:	4313      	orrs	r3, r2
 8004862:	d00a      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004864:	4b6b      	ldr	r3, [pc, #428]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004868:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800486c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004870:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004874:	4a67      	ldr	r2, [pc, #412]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004876:	430b      	orrs	r3, r1
 8004878:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800487a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800487e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004882:	2100      	movs	r1, #0
 8004884:	62b9      	str	r1, [r7, #40]	; 0x28
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800488c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004890:	460b      	mov	r3, r1
 8004892:	4313      	orrs	r3, r2
 8004894:	d011      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004896:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800489a:	3308      	adds	r3, #8
 800489c:	2100      	movs	r1, #0
 800489e:	4618      	mov	r0, r3
 80048a0:	f000 fb78 	bl	8004f94 <RCCEx_PLL2_Config>
 80048a4:	4603      	mov	r3, r0
 80048a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80048aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80048ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c2:	2100      	movs	r1, #0
 80048c4:	6239      	str	r1, [r7, #32]
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	627b      	str	r3, [r7, #36]	; 0x24
 80048cc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80048d0:	460b      	mov	r3, r1
 80048d2:	4313      	orrs	r3, r2
 80048d4:	d011      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80048d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048da:	3308      	adds	r3, #8
 80048dc:	2101      	movs	r1, #1
 80048de:	4618      	mov	r0, r3
 80048e0:	f000 fb58 	bl	8004f94 <RCCEx_PLL2_Config>
 80048e4:	4603      	mov	r3, r0
 80048e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80048ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d003      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80048fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004902:	2100      	movs	r1, #0
 8004904:	61b9      	str	r1, [r7, #24]
 8004906:	f003 0304 	and.w	r3, r3, #4
 800490a:	61fb      	str	r3, [r7, #28]
 800490c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004910:	460b      	mov	r3, r1
 8004912:	4313      	orrs	r3, r2
 8004914:	d011      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004916:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800491a:	3308      	adds	r3, #8
 800491c:	2102      	movs	r1, #2
 800491e:	4618      	mov	r0, r3
 8004920:	f000 fb38 	bl	8004f94 <RCCEx_PLL2_Config>
 8004924:	4603      	mov	r3, r0
 8004926:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800492a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004932:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004936:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800493a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800493e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004942:	2100      	movs	r1, #0
 8004944:	6139      	str	r1, [r7, #16]
 8004946:	f003 0308 	and.w	r3, r3, #8
 800494a:	617b      	str	r3, [r7, #20]
 800494c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004950:	460b      	mov	r3, r1
 8004952:	4313      	orrs	r3, r2
 8004954:	d011      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004956:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800495a:	3328      	adds	r3, #40	; 0x28
 800495c:	2100      	movs	r1, #0
 800495e:	4618      	mov	r0, r3
 8004960:	f000 fbca 	bl	80050f8 <RCCEx_PLL3_Config>
 8004964:	4603      	mov	r3, r0
 8004966:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800496a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800496e:	2b00      	cmp	r3, #0
 8004970:	d003      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004972:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004976:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800497a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800497e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004982:	2100      	movs	r1, #0
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	f003 0310 	and.w	r3, r3, #16
 800498a:	60fb      	str	r3, [r7, #12]
 800498c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004990:	460b      	mov	r3, r1
 8004992:	4313      	orrs	r3, r2
 8004994:	d011      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004996:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800499a:	3328      	adds	r3, #40	; 0x28
 800499c:	2101      	movs	r1, #1
 800499e:	4618      	mov	r0, r3
 80049a0:	f000 fbaa 	bl	80050f8 <RCCEx_PLL3_Config>
 80049a4:	4603      	mov	r3, r0
 80049a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80049aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d003      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80049ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c2:	2100      	movs	r1, #0
 80049c4:	6039      	str	r1, [r7, #0]
 80049c6:	f003 0320 	and.w	r3, r3, #32
 80049ca:	607b      	str	r3, [r7, #4]
 80049cc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80049d0:	460b      	mov	r3, r1
 80049d2:	4313      	orrs	r3, r2
 80049d4:	d011      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80049d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049da:	3328      	adds	r3, #40	; 0x28
 80049dc:	2102      	movs	r1, #2
 80049de:	4618      	mov	r0, r3
 80049e0:	f000 fb8a 	bl	80050f8 <RCCEx_PLL3_Config>
 80049e4:	4603      	mov	r3, r0
 80049e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80049ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d003      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80049fa:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d101      	bne.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004a02:	2300      	movs	r3, #0
 8004a04:	e000      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a14:	58024400 	.word	0x58024400

08004a18 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004a1c:	f7fe fd54 	bl	80034c8 <HAL_RCC_GetHCLKFreq>
 8004a20:	4602      	mov	r2, r0
 8004a22:	4b06      	ldr	r3, [pc, #24]	; (8004a3c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	091b      	lsrs	r3, r3, #4
 8004a28:	f003 0307 	and.w	r3, r3, #7
 8004a2c:	4904      	ldr	r1, [pc, #16]	; (8004a40 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004a2e:	5ccb      	ldrb	r3, [r1, r3]
 8004a30:	f003 031f 	and.w	r3, r3, #31
 8004a34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	58024400 	.word	0x58024400
 8004a40:	0800ca80 	.word	0x0800ca80

08004a44 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b089      	sub	sp, #36	; 0x24
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a4c:	4ba1      	ldr	r3, [pc, #644]	; (8004cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a50:	f003 0303 	and.w	r3, r3, #3
 8004a54:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004a56:	4b9f      	ldr	r3, [pc, #636]	; (8004cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a5a:	0b1b      	lsrs	r3, r3, #12
 8004a5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a60:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004a62:	4b9c      	ldr	r3, [pc, #624]	; (8004cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a66:	091b      	lsrs	r3, r3, #4
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004a6e:	4b99      	ldr	r3, [pc, #612]	; (8004cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a72:	08db      	lsrs	r3, r3, #3
 8004a74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a78:	693a      	ldr	r2, [r7, #16]
 8004a7a:	fb02 f303 	mul.w	r3, r2, r3
 8004a7e:	ee07 3a90 	vmov	s15, r3
 8004a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 8111 	beq.w	8004cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	f000 8083 	beq.w	8004ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	f200 80a1 	bhi.w	8004be4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d003      	beq.n	8004ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d056      	beq.n	8004b5c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004aae:	e099      	b.n	8004be4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ab0:	4b88      	ldr	r3, [pc, #544]	; (8004cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0320 	and.w	r3, r3, #32
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d02d      	beq.n	8004b18 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004abc:	4b85      	ldr	r3, [pc, #532]	; (8004cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	08db      	lsrs	r3, r3, #3
 8004ac2:	f003 0303 	and.w	r3, r3, #3
 8004ac6:	4a84      	ldr	r2, [pc, #528]	; (8004cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8004acc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	ee07 3a90 	vmov	s15, r3
 8004ad4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	ee07 3a90 	vmov	s15, r3
 8004ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ae6:	4b7b      	ldr	r3, [pc, #492]	; (8004cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aee:	ee07 3a90 	vmov	s15, r3
 8004af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004af6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004afa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004cdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004afe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b12:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004b16:	e087      	b.n	8004c28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	ee07 3a90 	vmov	s15, r3
 8004b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b22:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b2a:	4b6a      	ldr	r3, [pc, #424]	; (8004cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b32:	ee07 3a90 	vmov	s15, r3
 8004b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b3e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004cdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b5a:	e065      	b.n	8004c28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	ee07 3a90 	vmov	s15, r3
 8004b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b66:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b6e:	4b59      	ldr	r3, [pc, #356]	; (8004cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b76:	ee07 3a90 	vmov	s15, r3
 8004b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b82:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004cdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b9e:	e043      	b.n	8004c28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	ee07 3a90 	vmov	s15, r3
 8004ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004baa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bb2:	4b48      	ldr	r3, [pc, #288]	; (8004cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bba:	ee07 3a90 	vmov	s15, r3
 8004bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bc6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004cdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004be2:	e021      	b.n	8004c28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	ee07 3a90 	vmov	s15, r3
 8004bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bf6:	4b37      	ldr	r3, [pc, #220]	; (8004cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bfe:	ee07 3a90 	vmov	s15, r3
 8004c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c06:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c0a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004cdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c26:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004c28:	4b2a      	ldr	r3, [pc, #168]	; (8004cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2c:	0a5b      	lsrs	r3, r3, #9
 8004c2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c32:	ee07 3a90 	vmov	s15, r3
 8004c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c42:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c4e:	ee17 2a90 	vmov	r2, s15
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004c56:	4b1f      	ldr	r3, [pc, #124]	; (8004cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5a:	0c1b      	lsrs	r3, r3, #16
 8004c5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c60:	ee07 3a90 	vmov	s15, r3
 8004c64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c70:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c7c:	ee17 2a90 	vmov	r2, s15
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004c84:	4b13      	ldr	r3, [pc, #76]	; (8004cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c88:	0e1b      	lsrs	r3, r3, #24
 8004c8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c8e:	ee07 3a90 	vmov	s15, r3
 8004c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ca2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ca6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004caa:	ee17 2a90 	vmov	r2, s15
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004cb2:	e008      	b.n	8004cc6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	609a      	str	r2, [r3, #8]
}
 8004cc6:	bf00      	nop
 8004cc8:	3724      	adds	r7, #36	; 0x24
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	58024400 	.word	0x58024400
 8004cd8:	03d09000 	.word	0x03d09000
 8004cdc:	46000000 	.word	0x46000000
 8004ce0:	4c742400 	.word	0x4c742400
 8004ce4:	4a742400 	.word	0x4a742400
 8004ce8:	4af42400 	.word	0x4af42400

08004cec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b089      	sub	sp, #36	; 0x24
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004cf4:	4ba1      	ldr	r3, [pc, #644]	; (8004f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf8:	f003 0303 	and.w	r3, r3, #3
 8004cfc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004cfe:	4b9f      	ldr	r3, [pc, #636]	; (8004f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d02:	0d1b      	lsrs	r3, r3, #20
 8004d04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d08:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004d0a:	4b9c      	ldr	r3, [pc, #624]	; (8004f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0e:	0a1b      	lsrs	r3, r3, #8
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004d16:	4b99      	ldr	r3, [pc, #612]	; (8004f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d1a:	08db      	lsrs	r3, r3, #3
 8004d1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	fb02 f303 	mul.w	r3, r2, r3
 8004d26:	ee07 3a90 	vmov	s15, r3
 8004d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f000 8111 	beq.w	8004f5c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	f000 8083 	beq.w	8004e48 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	f200 80a1 	bhi.w	8004e8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d003      	beq.n	8004d58 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d056      	beq.n	8004e04 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004d56:	e099      	b.n	8004e8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d58:	4b88      	ldr	r3, [pc, #544]	; (8004f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0320 	and.w	r3, r3, #32
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d02d      	beq.n	8004dc0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d64:	4b85      	ldr	r3, [pc, #532]	; (8004f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	08db      	lsrs	r3, r3, #3
 8004d6a:	f003 0303 	and.w	r3, r3, #3
 8004d6e:	4a84      	ldr	r2, [pc, #528]	; (8004f80 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004d70:	fa22 f303 	lsr.w	r3, r2, r3
 8004d74:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	ee07 3a90 	vmov	s15, r3
 8004d7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	ee07 3a90 	vmov	s15, r3
 8004d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d8e:	4b7b      	ldr	r3, [pc, #492]	; (8004f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d96:	ee07 3a90 	vmov	s15, r3
 8004d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004da2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004f84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004da6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004daa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004db2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004dbe:	e087      	b.n	8004ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	ee07 3a90 	vmov	s15, r3
 8004dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004f88 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004dce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dd2:	4b6a      	ldr	r3, [pc, #424]	; (8004f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dda:	ee07 3a90 	vmov	s15, r3
 8004dde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004de2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004de6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004f84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004dea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004df2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004df6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e02:	e065      	b.n	8004ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	ee07 3a90 	vmov	s15, r3
 8004e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e0e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004e12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e16:	4b59      	ldr	r3, [pc, #356]	; (8004f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e1e:	ee07 3a90 	vmov	s15, r3
 8004e22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e26:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e2a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004f84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e46:	e043      	b.n	8004ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	ee07 3a90 	vmov	s15, r3
 8004e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e52:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004f90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004e56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e5a:	4b48      	ldr	r3, [pc, #288]	; (8004f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e62:	ee07 3a90 	vmov	s15, r3
 8004e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e6e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004f84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e8a:	e021      	b.n	8004ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	ee07 3a90 	vmov	s15, r3
 8004e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e96:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004e9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e9e:	4b37      	ldr	r3, [pc, #220]	; (8004f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ea6:	ee07 3a90 	vmov	s15, r3
 8004eaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eae:	ed97 6a03 	vldr	s12, [r7, #12]
 8004eb2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004f84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004eb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ebe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ece:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004ed0:	4b2a      	ldr	r3, [pc, #168]	; (8004f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed4:	0a5b      	lsrs	r3, r3, #9
 8004ed6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004eda:	ee07 3a90 	vmov	s15, r3
 8004ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ee2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ee6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004eea:	edd7 6a07 	vldr	s13, [r7, #28]
 8004eee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ef2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ef6:	ee17 2a90 	vmov	r2, s15
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004efe:	4b1f      	ldr	r3, [pc, #124]	; (8004f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f02:	0c1b      	lsrs	r3, r3, #16
 8004f04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f08:	ee07 3a90 	vmov	s15, r3
 8004f0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f18:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f24:	ee17 2a90 	vmov	r2, s15
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004f2c:	4b13      	ldr	r3, [pc, #76]	; (8004f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f30:	0e1b      	lsrs	r3, r3, #24
 8004f32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f36:	ee07 3a90 	vmov	s15, r3
 8004f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f46:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f52:	ee17 2a90 	vmov	r2, s15
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004f5a:	e008      	b.n	8004f6e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	609a      	str	r2, [r3, #8]
}
 8004f6e:	bf00      	nop
 8004f70:	3724      	adds	r7, #36	; 0x24
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	58024400 	.word	0x58024400
 8004f80:	03d09000 	.word	0x03d09000
 8004f84:	46000000 	.word	0x46000000
 8004f88:	4c742400 	.word	0x4c742400
 8004f8c:	4a742400 	.word	0x4a742400
 8004f90:	4af42400 	.word	0x4af42400

08004f94 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004fa2:	4b53      	ldr	r3, [pc, #332]	; (80050f0 <RCCEx_PLL2_Config+0x15c>)
 8004fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa6:	f003 0303 	and.w	r3, r3, #3
 8004faa:	2b03      	cmp	r3, #3
 8004fac:	d101      	bne.n	8004fb2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e099      	b.n	80050e6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004fb2:	4b4f      	ldr	r3, [pc, #316]	; (80050f0 <RCCEx_PLL2_Config+0x15c>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a4e      	ldr	r2, [pc, #312]	; (80050f0 <RCCEx_PLL2_Config+0x15c>)
 8004fb8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004fbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fbe:	f7fc fa49 	bl	8001454 <HAL_GetTick>
 8004fc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004fc4:	e008      	b.n	8004fd8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004fc6:	f7fc fa45 	bl	8001454 <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d901      	bls.n	8004fd8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e086      	b.n	80050e6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004fd8:	4b45      	ldr	r3, [pc, #276]	; (80050f0 <RCCEx_PLL2_Config+0x15c>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1f0      	bne.n	8004fc6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004fe4:	4b42      	ldr	r3, [pc, #264]	; (80050f0 <RCCEx_PLL2_Config+0x15c>)
 8004fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	031b      	lsls	r3, r3, #12
 8004ff2:	493f      	ldr	r1, [pc, #252]	; (80050f0 <RCCEx_PLL2_Config+0x15c>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	628b      	str	r3, [r1, #40]	; 0x28
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	3b01      	subs	r3, #1
 8005008:	025b      	lsls	r3, r3, #9
 800500a:	b29b      	uxth	r3, r3
 800500c:	431a      	orrs	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	3b01      	subs	r3, #1
 8005014:	041b      	lsls	r3, r3, #16
 8005016:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800501a:	431a      	orrs	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	3b01      	subs	r3, #1
 8005022:	061b      	lsls	r3, r3, #24
 8005024:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005028:	4931      	ldr	r1, [pc, #196]	; (80050f0 <RCCEx_PLL2_Config+0x15c>)
 800502a:	4313      	orrs	r3, r2
 800502c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800502e:	4b30      	ldr	r3, [pc, #192]	; (80050f0 <RCCEx_PLL2_Config+0x15c>)
 8005030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005032:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	492d      	ldr	r1, [pc, #180]	; (80050f0 <RCCEx_PLL2_Config+0x15c>)
 800503c:	4313      	orrs	r3, r2
 800503e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005040:	4b2b      	ldr	r3, [pc, #172]	; (80050f0 <RCCEx_PLL2_Config+0x15c>)
 8005042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005044:	f023 0220 	bic.w	r2, r3, #32
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	4928      	ldr	r1, [pc, #160]	; (80050f0 <RCCEx_PLL2_Config+0x15c>)
 800504e:	4313      	orrs	r3, r2
 8005050:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005052:	4b27      	ldr	r3, [pc, #156]	; (80050f0 <RCCEx_PLL2_Config+0x15c>)
 8005054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005056:	4a26      	ldr	r2, [pc, #152]	; (80050f0 <RCCEx_PLL2_Config+0x15c>)
 8005058:	f023 0310 	bic.w	r3, r3, #16
 800505c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800505e:	4b24      	ldr	r3, [pc, #144]	; (80050f0 <RCCEx_PLL2_Config+0x15c>)
 8005060:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005062:	4b24      	ldr	r3, [pc, #144]	; (80050f4 <RCCEx_PLL2_Config+0x160>)
 8005064:	4013      	ands	r3, r2
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	69d2      	ldr	r2, [r2, #28]
 800506a:	00d2      	lsls	r2, r2, #3
 800506c:	4920      	ldr	r1, [pc, #128]	; (80050f0 <RCCEx_PLL2_Config+0x15c>)
 800506e:	4313      	orrs	r3, r2
 8005070:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005072:	4b1f      	ldr	r3, [pc, #124]	; (80050f0 <RCCEx_PLL2_Config+0x15c>)
 8005074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005076:	4a1e      	ldr	r2, [pc, #120]	; (80050f0 <RCCEx_PLL2_Config+0x15c>)
 8005078:	f043 0310 	orr.w	r3, r3, #16
 800507c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d106      	bne.n	8005092 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005084:	4b1a      	ldr	r3, [pc, #104]	; (80050f0 <RCCEx_PLL2_Config+0x15c>)
 8005086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005088:	4a19      	ldr	r2, [pc, #100]	; (80050f0 <RCCEx_PLL2_Config+0x15c>)
 800508a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800508e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005090:	e00f      	b.n	80050b2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	2b01      	cmp	r3, #1
 8005096:	d106      	bne.n	80050a6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005098:	4b15      	ldr	r3, [pc, #84]	; (80050f0 <RCCEx_PLL2_Config+0x15c>)
 800509a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509c:	4a14      	ldr	r2, [pc, #80]	; (80050f0 <RCCEx_PLL2_Config+0x15c>)
 800509e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80050a4:	e005      	b.n	80050b2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80050a6:	4b12      	ldr	r3, [pc, #72]	; (80050f0 <RCCEx_PLL2_Config+0x15c>)
 80050a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050aa:	4a11      	ldr	r2, [pc, #68]	; (80050f0 <RCCEx_PLL2_Config+0x15c>)
 80050ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80050b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80050b2:	4b0f      	ldr	r3, [pc, #60]	; (80050f0 <RCCEx_PLL2_Config+0x15c>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a0e      	ldr	r2, [pc, #56]	; (80050f0 <RCCEx_PLL2_Config+0x15c>)
 80050b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050be:	f7fc f9c9 	bl	8001454 <HAL_GetTick>
 80050c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80050c4:	e008      	b.n	80050d8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80050c6:	f7fc f9c5 	bl	8001454 <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d901      	bls.n	80050d8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e006      	b.n	80050e6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80050d8:	4b05      	ldr	r3, [pc, #20]	; (80050f0 <RCCEx_PLL2_Config+0x15c>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d0f0      	beq.n	80050c6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80050e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	58024400 	.word	0x58024400
 80050f4:	ffff0007 	.word	0xffff0007

080050f8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005102:	2300      	movs	r3, #0
 8005104:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005106:	4b53      	ldr	r3, [pc, #332]	; (8005254 <RCCEx_PLL3_Config+0x15c>)
 8005108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510a:	f003 0303 	and.w	r3, r3, #3
 800510e:	2b03      	cmp	r3, #3
 8005110:	d101      	bne.n	8005116 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e099      	b.n	800524a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005116:	4b4f      	ldr	r3, [pc, #316]	; (8005254 <RCCEx_PLL3_Config+0x15c>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a4e      	ldr	r2, [pc, #312]	; (8005254 <RCCEx_PLL3_Config+0x15c>)
 800511c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005120:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005122:	f7fc f997 	bl	8001454 <HAL_GetTick>
 8005126:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005128:	e008      	b.n	800513c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800512a:	f7fc f993 	bl	8001454 <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	2b02      	cmp	r3, #2
 8005136:	d901      	bls.n	800513c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e086      	b.n	800524a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800513c:	4b45      	ldr	r3, [pc, #276]	; (8005254 <RCCEx_PLL3_Config+0x15c>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1f0      	bne.n	800512a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005148:	4b42      	ldr	r3, [pc, #264]	; (8005254 <RCCEx_PLL3_Config+0x15c>)
 800514a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	051b      	lsls	r3, r3, #20
 8005156:	493f      	ldr	r1, [pc, #252]	; (8005254 <RCCEx_PLL3_Config+0x15c>)
 8005158:	4313      	orrs	r3, r2
 800515a:	628b      	str	r3, [r1, #40]	; 0x28
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	3b01      	subs	r3, #1
 8005162:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	3b01      	subs	r3, #1
 800516c:	025b      	lsls	r3, r3, #9
 800516e:	b29b      	uxth	r3, r3
 8005170:	431a      	orrs	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	3b01      	subs	r3, #1
 8005178:	041b      	lsls	r3, r3, #16
 800517a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800517e:	431a      	orrs	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	3b01      	subs	r3, #1
 8005186:	061b      	lsls	r3, r3, #24
 8005188:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800518c:	4931      	ldr	r1, [pc, #196]	; (8005254 <RCCEx_PLL3_Config+0x15c>)
 800518e:	4313      	orrs	r3, r2
 8005190:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005192:	4b30      	ldr	r3, [pc, #192]	; (8005254 <RCCEx_PLL3_Config+0x15c>)
 8005194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005196:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	492d      	ldr	r1, [pc, #180]	; (8005254 <RCCEx_PLL3_Config+0x15c>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80051a4:	4b2b      	ldr	r3, [pc, #172]	; (8005254 <RCCEx_PLL3_Config+0x15c>)
 80051a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	4928      	ldr	r1, [pc, #160]	; (8005254 <RCCEx_PLL3_Config+0x15c>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80051b6:	4b27      	ldr	r3, [pc, #156]	; (8005254 <RCCEx_PLL3_Config+0x15c>)
 80051b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ba:	4a26      	ldr	r2, [pc, #152]	; (8005254 <RCCEx_PLL3_Config+0x15c>)
 80051bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80051c2:	4b24      	ldr	r3, [pc, #144]	; (8005254 <RCCEx_PLL3_Config+0x15c>)
 80051c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051c6:	4b24      	ldr	r3, [pc, #144]	; (8005258 <RCCEx_PLL3_Config+0x160>)
 80051c8:	4013      	ands	r3, r2
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	69d2      	ldr	r2, [r2, #28]
 80051ce:	00d2      	lsls	r2, r2, #3
 80051d0:	4920      	ldr	r1, [pc, #128]	; (8005254 <RCCEx_PLL3_Config+0x15c>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80051d6:	4b1f      	ldr	r3, [pc, #124]	; (8005254 <RCCEx_PLL3_Config+0x15c>)
 80051d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051da:	4a1e      	ldr	r2, [pc, #120]	; (8005254 <RCCEx_PLL3_Config+0x15c>)
 80051dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d106      	bne.n	80051f6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80051e8:	4b1a      	ldr	r3, [pc, #104]	; (8005254 <RCCEx_PLL3_Config+0x15c>)
 80051ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ec:	4a19      	ldr	r2, [pc, #100]	; (8005254 <RCCEx_PLL3_Config+0x15c>)
 80051ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80051f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80051f4:	e00f      	b.n	8005216 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d106      	bne.n	800520a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80051fc:	4b15      	ldr	r3, [pc, #84]	; (8005254 <RCCEx_PLL3_Config+0x15c>)
 80051fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005200:	4a14      	ldr	r2, [pc, #80]	; (8005254 <RCCEx_PLL3_Config+0x15c>)
 8005202:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005206:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005208:	e005      	b.n	8005216 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800520a:	4b12      	ldr	r3, [pc, #72]	; (8005254 <RCCEx_PLL3_Config+0x15c>)
 800520c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520e:	4a11      	ldr	r2, [pc, #68]	; (8005254 <RCCEx_PLL3_Config+0x15c>)
 8005210:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005214:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005216:	4b0f      	ldr	r3, [pc, #60]	; (8005254 <RCCEx_PLL3_Config+0x15c>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a0e      	ldr	r2, [pc, #56]	; (8005254 <RCCEx_PLL3_Config+0x15c>)
 800521c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005220:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005222:	f7fc f917 	bl	8001454 <HAL_GetTick>
 8005226:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005228:	e008      	b.n	800523c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800522a:	f7fc f913 	bl	8001454 <HAL_GetTick>
 800522e:	4602      	mov	r2, r0
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	2b02      	cmp	r3, #2
 8005236:	d901      	bls.n	800523c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e006      	b.n	800524a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800523c:	4b05      	ldr	r3, [pc, #20]	; (8005254 <RCCEx_PLL3_Config+0x15c>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d0f0      	beq.n	800522a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005248:	7bfb      	ldrb	r3, [r7, #15]
}
 800524a:	4618      	mov	r0, r3
 800524c:	3710      	adds	r7, #16
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	58024400 	.word	0x58024400
 8005258:	ffff0007 	.word	0xffff0007

0800525c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d101      	bne.n	800526e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e049      	b.n	8005302 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d106      	bne.n	8005288 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 f841 	bl	800530a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2202      	movs	r2, #2
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	3304      	adds	r3, #4
 8005298:	4619      	mov	r1, r3
 800529a:	4610      	mov	r0, r2
 800529c:	f000 fa00 	bl	80056a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3708      	adds	r7, #8
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800530a:	b480      	push	{r7}
 800530c:	b083      	sub	sp, #12
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005312:	bf00      	nop
 8005314:	370c      	adds	r7, #12
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
	...

08005320 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800532e:	b2db      	uxtb	r3, r3
 8005330:	2b01      	cmp	r3, #1
 8005332:	d001      	beq.n	8005338 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e054      	b.n	80053e2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2202      	movs	r2, #2
 800533c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68da      	ldr	r2, [r3, #12]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f042 0201 	orr.w	r2, r2, #1
 800534e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a26      	ldr	r2, [pc, #152]	; (80053f0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d022      	beq.n	80053a0 <HAL_TIM_Base_Start_IT+0x80>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005362:	d01d      	beq.n	80053a0 <HAL_TIM_Base_Start_IT+0x80>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a22      	ldr	r2, [pc, #136]	; (80053f4 <HAL_TIM_Base_Start_IT+0xd4>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d018      	beq.n	80053a0 <HAL_TIM_Base_Start_IT+0x80>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a21      	ldr	r2, [pc, #132]	; (80053f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d013      	beq.n	80053a0 <HAL_TIM_Base_Start_IT+0x80>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a1f      	ldr	r2, [pc, #124]	; (80053fc <HAL_TIM_Base_Start_IT+0xdc>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d00e      	beq.n	80053a0 <HAL_TIM_Base_Start_IT+0x80>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a1e      	ldr	r2, [pc, #120]	; (8005400 <HAL_TIM_Base_Start_IT+0xe0>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d009      	beq.n	80053a0 <HAL_TIM_Base_Start_IT+0x80>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a1c      	ldr	r2, [pc, #112]	; (8005404 <HAL_TIM_Base_Start_IT+0xe4>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d004      	beq.n	80053a0 <HAL_TIM_Base_Start_IT+0x80>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a1b      	ldr	r2, [pc, #108]	; (8005408 <HAL_TIM_Base_Start_IT+0xe8>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d115      	bne.n	80053cc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	689a      	ldr	r2, [r3, #8]
 80053a6:	4b19      	ldr	r3, [pc, #100]	; (800540c <HAL_TIM_Base_Start_IT+0xec>)
 80053a8:	4013      	ands	r3, r2
 80053aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2b06      	cmp	r3, #6
 80053b0:	d015      	beq.n	80053de <HAL_TIM_Base_Start_IT+0xbe>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053b8:	d011      	beq.n	80053de <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f042 0201 	orr.w	r2, r2, #1
 80053c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ca:	e008      	b.n	80053de <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f042 0201 	orr.w	r2, r2, #1
 80053da:	601a      	str	r2, [r3, #0]
 80053dc:	e000      	b.n	80053e0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3714      	adds	r7, #20
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	40010000 	.word	0x40010000
 80053f4:	40000400 	.word	0x40000400
 80053f8:	40000800 	.word	0x40000800
 80053fc:	40000c00 	.word	0x40000c00
 8005400:	40010400 	.word	0x40010400
 8005404:	40001800 	.word	0x40001800
 8005408:	40014000 	.word	0x40014000
 800540c:	00010007 	.word	0x00010007

08005410 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	f003 0302 	and.w	r3, r3, #2
 8005422:	2b02      	cmp	r3, #2
 8005424:	d122      	bne.n	800546c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	f003 0302 	and.w	r3, r3, #2
 8005430:	2b02      	cmp	r3, #2
 8005432:	d11b      	bne.n	800546c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f06f 0202 	mvn.w	r2, #2
 800543c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2201      	movs	r2, #1
 8005442:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	f003 0303 	and.w	r3, r3, #3
 800544e:	2b00      	cmp	r3, #0
 8005450:	d003      	beq.n	800545a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f905 	bl	8005662 <HAL_TIM_IC_CaptureCallback>
 8005458:	e005      	b.n	8005466 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 f8f7 	bl	800564e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 f908 	bl	8005676 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	f003 0304 	and.w	r3, r3, #4
 8005476:	2b04      	cmp	r3, #4
 8005478:	d122      	bne.n	80054c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	f003 0304 	and.w	r3, r3, #4
 8005484:	2b04      	cmp	r3, #4
 8005486:	d11b      	bne.n	80054c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f06f 0204 	mvn.w	r2, #4
 8005490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2202      	movs	r2, #2
 8005496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d003      	beq.n	80054ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f8db 	bl	8005662 <HAL_TIM_IC_CaptureCallback>
 80054ac:	e005      	b.n	80054ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 f8cd 	bl	800564e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 f8de 	bl	8005676 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	f003 0308 	and.w	r3, r3, #8
 80054ca:	2b08      	cmp	r3, #8
 80054cc:	d122      	bne.n	8005514 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	f003 0308 	and.w	r3, r3, #8
 80054d8:	2b08      	cmp	r3, #8
 80054da:	d11b      	bne.n	8005514 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f06f 0208 	mvn.w	r2, #8
 80054e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2204      	movs	r2, #4
 80054ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	69db      	ldr	r3, [r3, #28]
 80054f2:	f003 0303 	and.w	r3, r3, #3
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d003      	beq.n	8005502 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 f8b1 	bl	8005662 <HAL_TIM_IC_CaptureCallback>
 8005500:	e005      	b.n	800550e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 f8a3 	bl	800564e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 f8b4 	bl	8005676 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	f003 0310 	and.w	r3, r3, #16
 800551e:	2b10      	cmp	r3, #16
 8005520:	d122      	bne.n	8005568 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	f003 0310 	and.w	r3, r3, #16
 800552c:	2b10      	cmp	r3, #16
 800552e:	d11b      	bne.n	8005568 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f06f 0210 	mvn.w	r2, #16
 8005538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2208      	movs	r2, #8
 800553e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	69db      	ldr	r3, [r3, #28]
 8005546:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800554a:	2b00      	cmp	r3, #0
 800554c:	d003      	beq.n	8005556 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 f887 	bl	8005662 <HAL_TIM_IC_CaptureCallback>
 8005554:	e005      	b.n	8005562 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 f879 	bl	800564e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 f88a 	bl	8005676 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	f003 0301 	and.w	r3, r3, #1
 8005572:	2b01      	cmp	r3, #1
 8005574:	d10e      	bne.n	8005594 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	f003 0301 	and.w	r3, r3, #1
 8005580:	2b01      	cmp	r3, #1
 8005582:	d107      	bne.n	8005594 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f06f 0201 	mvn.w	r2, #1
 800558c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f7fb fb7c 	bl	8000c8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800559e:	2b80      	cmp	r3, #128	; 0x80
 80055a0:	d10e      	bne.n	80055c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ac:	2b80      	cmp	r3, #128	; 0x80
 80055ae:	d107      	bne.n	80055c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 f914 	bl	80057e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ce:	d10e      	bne.n	80055ee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055da:	2b80      	cmp	r3, #128	; 0x80
 80055dc:	d107      	bne.n	80055ee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80055e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 f907 	bl	80057fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f8:	2b40      	cmp	r3, #64	; 0x40
 80055fa:	d10e      	bne.n	800561a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005606:	2b40      	cmp	r3, #64	; 0x40
 8005608:	d107      	bne.n	800561a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005612:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 f838 	bl	800568a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	f003 0320 	and.w	r3, r3, #32
 8005624:	2b20      	cmp	r3, #32
 8005626:	d10e      	bne.n	8005646 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	f003 0320 	and.w	r3, r3, #32
 8005632:	2b20      	cmp	r3, #32
 8005634:	d107      	bne.n	8005646 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f06f 0220 	mvn.w	r2, #32
 800563e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 f8c7 	bl	80057d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005646:	bf00      	nop
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800564e:	b480      	push	{r7}
 8005650:	b083      	sub	sp, #12
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005656:	bf00      	nop
 8005658:	370c      	adds	r7, #12
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr

08005662 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005662:	b480      	push	{r7}
 8005664:	b083      	sub	sp, #12
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800566a:	bf00      	nop
 800566c:	370c      	adds	r7, #12
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr

08005676 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005676:	b480      	push	{r7}
 8005678:	b083      	sub	sp, #12
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800567e:	bf00      	nop
 8005680:	370c      	adds	r7, #12
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr

0800568a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800568a:	b480      	push	{r7}
 800568c:	b083      	sub	sp, #12
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005692:	bf00      	nop
 8005694:	370c      	adds	r7, #12
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
	...

080056a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a40      	ldr	r2, [pc, #256]	; (80057b4 <TIM_Base_SetConfig+0x114>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d013      	beq.n	80056e0 <TIM_Base_SetConfig+0x40>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056be:	d00f      	beq.n	80056e0 <TIM_Base_SetConfig+0x40>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a3d      	ldr	r2, [pc, #244]	; (80057b8 <TIM_Base_SetConfig+0x118>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d00b      	beq.n	80056e0 <TIM_Base_SetConfig+0x40>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a3c      	ldr	r2, [pc, #240]	; (80057bc <TIM_Base_SetConfig+0x11c>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d007      	beq.n	80056e0 <TIM_Base_SetConfig+0x40>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a3b      	ldr	r2, [pc, #236]	; (80057c0 <TIM_Base_SetConfig+0x120>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d003      	beq.n	80056e0 <TIM_Base_SetConfig+0x40>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a3a      	ldr	r2, [pc, #232]	; (80057c4 <TIM_Base_SetConfig+0x124>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d108      	bne.n	80056f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a2f      	ldr	r2, [pc, #188]	; (80057b4 <TIM_Base_SetConfig+0x114>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d01f      	beq.n	800573a <TIM_Base_SetConfig+0x9a>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005700:	d01b      	beq.n	800573a <TIM_Base_SetConfig+0x9a>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a2c      	ldr	r2, [pc, #176]	; (80057b8 <TIM_Base_SetConfig+0x118>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d017      	beq.n	800573a <TIM_Base_SetConfig+0x9a>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a2b      	ldr	r2, [pc, #172]	; (80057bc <TIM_Base_SetConfig+0x11c>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d013      	beq.n	800573a <TIM_Base_SetConfig+0x9a>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a2a      	ldr	r2, [pc, #168]	; (80057c0 <TIM_Base_SetConfig+0x120>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d00f      	beq.n	800573a <TIM_Base_SetConfig+0x9a>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a29      	ldr	r2, [pc, #164]	; (80057c4 <TIM_Base_SetConfig+0x124>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d00b      	beq.n	800573a <TIM_Base_SetConfig+0x9a>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a28      	ldr	r2, [pc, #160]	; (80057c8 <TIM_Base_SetConfig+0x128>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d007      	beq.n	800573a <TIM_Base_SetConfig+0x9a>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a27      	ldr	r2, [pc, #156]	; (80057cc <TIM_Base_SetConfig+0x12c>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d003      	beq.n	800573a <TIM_Base_SetConfig+0x9a>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a26      	ldr	r2, [pc, #152]	; (80057d0 <TIM_Base_SetConfig+0x130>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d108      	bne.n	800574c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005740:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	4313      	orrs	r3, r2
 800574a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	4313      	orrs	r3, r2
 8005758:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	689a      	ldr	r2, [r3, #8]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a10      	ldr	r2, [pc, #64]	; (80057b4 <TIM_Base_SetConfig+0x114>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d00f      	beq.n	8005798 <TIM_Base_SetConfig+0xf8>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a12      	ldr	r2, [pc, #72]	; (80057c4 <TIM_Base_SetConfig+0x124>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d00b      	beq.n	8005798 <TIM_Base_SetConfig+0xf8>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a11      	ldr	r2, [pc, #68]	; (80057c8 <TIM_Base_SetConfig+0x128>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d007      	beq.n	8005798 <TIM_Base_SetConfig+0xf8>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a10      	ldr	r2, [pc, #64]	; (80057cc <TIM_Base_SetConfig+0x12c>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d003      	beq.n	8005798 <TIM_Base_SetConfig+0xf8>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a0f      	ldr	r2, [pc, #60]	; (80057d0 <TIM_Base_SetConfig+0x130>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d103      	bne.n	80057a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	691a      	ldr	r2, [r3, #16]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	615a      	str	r2, [r3, #20]
}
 80057a6:	bf00      	nop
 80057a8:	3714      	adds	r7, #20
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	40010000 	.word	0x40010000
 80057b8:	40000400 	.word	0x40000400
 80057bc:	40000800 	.word	0x40000800
 80057c0:	40000c00 	.word	0x40000c00
 80057c4:	40010400 	.word	0x40010400
 80057c8:	40014000 	.word	0x40014000
 80057cc:	40014400 	.word	0x40014400
 80057d0:	40014800 	.word	0x40014800

080057d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057dc:	bf00      	nop
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e042      	b.n	80058a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005828:	2b00      	cmp	r3, #0
 800582a:	d106      	bne.n	800583a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f7fb fc7b 	bl	8001130 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2224      	movs	r2, #36	; 0x24
 800583e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f022 0201 	bic.w	r2, r2, #1
 8005850:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 f8ba 	bl	80059cc <UART_SetConfig>
 8005858:	4603      	mov	r3, r0
 800585a:	2b01      	cmp	r3, #1
 800585c:	d101      	bne.n	8005862 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e022      	b.n	80058a8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005866:	2b00      	cmp	r3, #0
 8005868:	d002      	beq.n	8005870 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 fe16 	bl	800649c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800587e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	689a      	ldr	r2, [r3, #8]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800588e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f042 0201 	orr.w	r2, r2, #1
 800589e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 fe9d 	bl	80065e0 <UART_CheckIdleState>
 80058a6:	4603      	mov	r3, r0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3708      	adds	r7, #8
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b08a      	sub	sp, #40	; 0x28
 80058b4:	af02      	add	r7, sp, #8
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	603b      	str	r3, [r7, #0]
 80058bc:	4613      	mov	r3, r2
 80058be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058c6:	2b20      	cmp	r3, #32
 80058c8:	d17b      	bne.n	80059c2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d002      	beq.n	80058d6 <HAL_UART_Transmit+0x26>
 80058d0:	88fb      	ldrh	r3, [r7, #6]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e074      	b.n	80059c4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2221      	movs	r2, #33	; 0x21
 80058e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058ea:	f7fb fdb3 	bl	8001454 <HAL_GetTick>
 80058ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	88fa      	ldrh	r2, [r7, #6]
 80058f4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	88fa      	ldrh	r2, [r7, #6]
 80058fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005908:	d108      	bne.n	800591c <HAL_UART_Transmit+0x6c>
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d104      	bne.n	800591c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005912:	2300      	movs	r3, #0
 8005914:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	61bb      	str	r3, [r7, #24]
 800591a:	e003      	b.n	8005924 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005920:	2300      	movs	r3, #0
 8005922:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005924:	e030      	b.n	8005988 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	9300      	str	r3, [sp, #0]
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	2200      	movs	r2, #0
 800592e:	2180      	movs	r1, #128	; 0x80
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	f000 feff 	bl	8006734 <UART_WaitOnFlagUntilTimeout>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d005      	beq.n	8005948 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2220      	movs	r2, #32
 8005940:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e03d      	b.n	80059c4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d10b      	bne.n	8005966 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	881b      	ldrh	r3, [r3, #0]
 8005952:	461a      	mov	r2, r3
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800595c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	3302      	adds	r3, #2
 8005962:	61bb      	str	r3, [r7, #24]
 8005964:	e007      	b.n	8005976 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	781a      	ldrb	r2, [r3, #0]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	3301      	adds	r3, #1
 8005974:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800597c:	b29b      	uxth	r3, r3
 800597e:	3b01      	subs	r3, #1
 8005980:	b29a      	uxth	r2, r3
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800598e:	b29b      	uxth	r3, r3
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1c8      	bne.n	8005926 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	9300      	str	r3, [sp, #0]
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	2200      	movs	r2, #0
 800599c:	2140      	movs	r1, #64	; 0x40
 800599e:	68f8      	ldr	r0, [r7, #12]
 80059a0:	f000 fec8 	bl	8006734 <UART_WaitOnFlagUntilTimeout>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d005      	beq.n	80059b6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2220      	movs	r2, #32
 80059ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e006      	b.n	80059c4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2220      	movs	r2, #32
 80059ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80059be:	2300      	movs	r3, #0
 80059c0:	e000      	b.n	80059c4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80059c2:	2302      	movs	r3, #2
  }
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3720      	adds	r7, #32
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059d0:	b092      	sub	sp, #72	; 0x48
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80059d6:	2300      	movs	r3, #0
 80059d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	689a      	ldr	r2, [r3, #8]
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	431a      	orrs	r2, r3
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	431a      	orrs	r2, r3
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	69db      	ldr	r3, [r3, #28]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	4bbe      	ldr	r3, [pc, #760]	; (8005cf4 <UART_SetConfig+0x328>)
 80059fc:	4013      	ands	r3, r2
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	6812      	ldr	r2, [r2, #0]
 8005a02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a04:	430b      	orrs	r3, r1
 8005a06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	68da      	ldr	r2, [r3, #12]
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4ab3      	ldr	r2, [pc, #716]	; (8005cf8 <UART_SetConfig+0x32c>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d004      	beq.n	8005a38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a34:	4313      	orrs	r3, r2
 8005a36:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	689a      	ldr	r2, [r3, #8]
 8005a3e:	4baf      	ldr	r3, [pc, #700]	; (8005cfc <UART_SetConfig+0x330>)
 8005a40:	4013      	ands	r3, r2
 8005a42:	697a      	ldr	r2, [r7, #20]
 8005a44:	6812      	ldr	r2, [r2, #0]
 8005a46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a48:	430b      	orrs	r3, r1
 8005a4a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a52:	f023 010f 	bic.w	r1, r3, #15
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4aa6      	ldr	r2, [pc, #664]	; (8005d00 <UART_SetConfig+0x334>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d177      	bne.n	8005b5c <UART_SetConfig+0x190>
 8005a6c:	4ba5      	ldr	r3, [pc, #660]	; (8005d04 <UART_SetConfig+0x338>)
 8005a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a74:	2b28      	cmp	r3, #40	; 0x28
 8005a76:	d86d      	bhi.n	8005b54 <UART_SetConfig+0x188>
 8005a78:	a201      	add	r2, pc, #4	; (adr r2, 8005a80 <UART_SetConfig+0xb4>)
 8005a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a7e:	bf00      	nop
 8005a80:	08005b25 	.word	0x08005b25
 8005a84:	08005b55 	.word	0x08005b55
 8005a88:	08005b55 	.word	0x08005b55
 8005a8c:	08005b55 	.word	0x08005b55
 8005a90:	08005b55 	.word	0x08005b55
 8005a94:	08005b55 	.word	0x08005b55
 8005a98:	08005b55 	.word	0x08005b55
 8005a9c:	08005b55 	.word	0x08005b55
 8005aa0:	08005b2d 	.word	0x08005b2d
 8005aa4:	08005b55 	.word	0x08005b55
 8005aa8:	08005b55 	.word	0x08005b55
 8005aac:	08005b55 	.word	0x08005b55
 8005ab0:	08005b55 	.word	0x08005b55
 8005ab4:	08005b55 	.word	0x08005b55
 8005ab8:	08005b55 	.word	0x08005b55
 8005abc:	08005b55 	.word	0x08005b55
 8005ac0:	08005b35 	.word	0x08005b35
 8005ac4:	08005b55 	.word	0x08005b55
 8005ac8:	08005b55 	.word	0x08005b55
 8005acc:	08005b55 	.word	0x08005b55
 8005ad0:	08005b55 	.word	0x08005b55
 8005ad4:	08005b55 	.word	0x08005b55
 8005ad8:	08005b55 	.word	0x08005b55
 8005adc:	08005b55 	.word	0x08005b55
 8005ae0:	08005b3d 	.word	0x08005b3d
 8005ae4:	08005b55 	.word	0x08005b55
 8005ae8:	08005b55 	.word	0x08005b55
 8005aec:	08005b55 	.word	0x08005b55
 8005af0:	08005b55 	.word	0x08005b55
 8005af4:	08005b55 	.word	0x08005b55
 8005af8:	08005b55 	.word	0x08005b55
 8005afc:	08005b55 	.word	0x08005b55
 8005b00:	08005b45 	.word	0x08005b45
 8005b04:	08005b55 	.word	0x08005b55
 8005b08:	08005b55 	.word	0x08005b55
 8005b0c:	08005b55 	.word	0x08005b55
 8005b10:	08005b55 	.word	0x08005b55
 8005b14:	08005b55 	.word	0x08005b55
 8005b18:	08005b55 	.word	0x08005b55
 8005b1c:	08005b55 	.word	0x08005b55
 8005b20:	08005b4d 	.word	0x08005b4d
 8005b24:	2301      	movs	r3, #1
 8005b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b2a:	e222      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005b2c:	2304      	movs	r3, #4
 8005b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b32:	e21e      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005b34:	2308      	movs	r3, #8
 8005b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b3a:	e21a      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005b3c:	2310      	movs	r3, #16
 8005b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b42:	e216      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005b44:	2320      	movs	r3, #32
 8005b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b4a:	e212      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005b4c:	2340      	movs	r3, #64	; 0x40
 8005b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b52:	e20e      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005b54:	2380      	movs	r3, #128	; 0x80
 8005b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b5a:	e20a      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a69      	ldr	r2, [pc, #420]	; (8005d08 <UART_SetConfig+0x33c>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d130      	bne.n	8005bc8 <UART_SetConfig+0x1fc>
 8005b66:	4b67      	ldr	r3, [pc, #412]	; (8005d04 <UART_SetConfig+0x338>)
 8005b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b6a:	f003 0307 	and.w	r3, r3, #7
 8005b6e:	2b05      	cmp	r3, #5
 8005b70:	d826      	bhi.n	8005bc0 <UART_SetConfig+0x1f4>
 8005b72:	a201      	add	r2, pc, #4	; (adr r2, 8005b78 <UART_SetConfig+0x1ac>)
 8005b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b78:	08005b91 	.word	0x08005b91
 8005b7c:	08005b99 	.word	0x08005b99
 8005b80:	08005ba1 	.word	0x08005ba1
 8005b84:	08005ba9 	.word	0x08005ba9
 8005b88:	08005bb1 	.word	0x08005bb1
 8005b8c:	08005bb9 	.word	0x08005bb9
 8005b90:	2300      	movs	r3, #0
 8005b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b96:	e1ec      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005b98:	2304      	movs	r3, #4
 8005b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b9e:	e1e8      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005ba0:	2308      	movs	r3, #8
 8005ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ba6:	e1e4      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005ba8:	2310      	movs	r3, #16
 8005baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bae:	e1e0      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005bb0:	2320      	movs	r3, #32
 8005bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bb6:	e1dc      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005bb8:	2340      	movs	r3, #64	; 0x40
 8005bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bbe:	e1d8      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005bc0:	2380      	movs	r3, #128	; 0x80
 8005bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bc6:	e1d4      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a4f      	ldr	r2, [pc, #316]	; (8005d0c <UART_SetConfig+0x340>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d130      	bne.n	8005c34 <UART_SetConfig+0x268>
 8005bd2:	4b4c      	ldr	r3, [pc, #304]	; (8005d04 <UART_SetConfig+0x338>)
 8005bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bd6:	f003 0307 	and.w	r3, r3, #7
 8005bda:	2b05      	cmp	r3, #5
 8005bdc:	d826      	bhi.n	8005c2c <UART_SetConfig+0x260>
 8005bde:	a201      	add	r2, pc, #4	; (adr r2, 8005be4 <UART_SetConfig+0x218>)
 8005be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be4:	08005bfd 	.word	0x08005bfd
 8005be8:	08005c05 	.word	0x08005c05
 8005bec:	08005c0d 	.word	0x08005c0d
 8005bf0:	08005c15 	.word	0x08005c15
 8005bf4:	08005c1d 	.word	0x08005c1d
 8005bf8:	08005c25 	.word	0x08005c25
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c02:	e1b6      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005c04:	2304      	movs	r3, #4
 8005c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c0a:	e1b2      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005c0c:	2308      	movs	r3, #8
 8005c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c12:	e1ae      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005c14:	2310      	movs	r3, #16
 8005c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c1a:	e1aa      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005c1c:	2320      	movs	r3, #32
 8005c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c22:	e1a6      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005c24:	2340      	movs	r3, #64	; 0x40
 8005c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c2a:	e1a2      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005c2c:	2380      	movs	r3, #128	; 0x80
 8005c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c32:	e19e      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a35      	ldr	r2, [pc, #212]	; (8005d10 <UART_SetConfig+0x344>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d130      	bne.n	8005ca0 <UART_SetConfig+0x2d4>
 8005c3e:	4b31      	ldr	r3, [pc, #196]	; (8005d04 <UART_SetConfig+0x338>)
 8005c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c42:	f003 0307 	and.w	r3, r3, #7
 8005c46:	2b05      	cmp	r3, #5
 8005c48:	d826      	bhi.n	8005c98 <UART_SetConfig+0x2cc>
 8005c4a:	a201      	add	r2, pc, #4	; (adr r2, 8005c50 <UART_SetConfig+0x284>)
 8005c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c50:	08005c69 	.word	0x08005c69
 8005c54:	08005c71 	.word	0x08005c71
 8005c58:	08005c79 	.word	0x08005c79
 8005c5c:	08005c81 	.word	0x08005c81
 8005c60:	08005c89 	.word	0x08005c89
 8005c64:	08005c91 	.word	0x08005c91
 8005c68:	2300      	movs	r3, #0
 8005c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c6e:	e180      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005c70:	2304      	movs	r3, #4
 8005c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c76:	e17c      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005c78:	2308      	movs	r3, #8
 8005c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c7e:	e178      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005c80:	2310      	movs	r3, #16
 8005c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c86:	e174      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005c88:	2320      	movs	r3, #32
 8005c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c8e:	e170      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005c90:	2340      	movs	r3, #64	; 0x40
 8005c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c96:	e16c      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005c98:	2380      	movs	r3, #128	; 0x80
 8005c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c9e:	e168      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a1b      	ldr	r2, [pc, #108]	; (8005d14 <UART_SetConfig+0x348>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d142      	bne.n	8005d30 <UART_SetConfig+0x364>
 8005caa:	4b16      	ldr	r3, [pc, #88]	; (8005d04 <UART_SetConfig+0x338>)
 8005cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cae:	f003 0307 	and.w	r3, r3, #7
 8005cb2:	2b05      	cmp	r3, #5
 8005cb4:	d838      	bhi.n	8005d28 <UART_SetConfig+0x35c>
 8005cb6:	a201      	add	r2, pc, #4	; (adr r2, 8005cbc <UART_SetConfig+0x2f0>)
 8005cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cbc:	08005cd5 	.word	0x08005cd5
 8005cc0:	08005cdd 	.word	0x08005cdd
 8005cc4:	08005ce5 	.word	0x08005ce5
 8005cc8:	08005ced 	.word	0x08005ced
 8005ccc:	08005d19 	.word	0x08005d19
 8005cd0:	08005d21 	.word	0x08005d21
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cda:	e14a      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005cdc:	2304      	movs	r3, #4
 8005cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ce2:	e146      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005ce4:	2308      	movs	r3, #8
 8005ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cea:	e142      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005cec:	2310      	movs	r3, #16
 8005cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cf2:	e13e      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005cf4:	cfff69f3 	.word	0xcfff69f3
 8005cf8:	58000c00 	.word	0x58000c00
 8005cfc:	11fff4ff 	.word	0x11fff4ff
 8005d00:	40011000 	.word	0x40011000
 8005d04:	58024400 	.word	0x58024400
 8005d08:	40004400 	.word	0x40004400
 8005d0c:	40004800 	.word	0x40004800
 8005d10:	40004c00 	.word	0x40004c00
 8005d14:	40005000 	.word	0x40005000
 8005d18:	2320      	movs	r3, #32
 8005d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d1e:	e128      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005d20:	2340      	movs	r3, #64	; 0x40
 8005d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d26:	e124      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005d28:	2380      	movs	r3, #128	; 0x80
 8005d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d2e:	e120      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4acb      	ldr	r2, [pc, #812]	; (8006064 <UART_SetConfig+0x698>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d176      	bne.n	8005e28 <UART_SetConfig+0x45c>
 8005d3a:	4bcb      	ldr	r3, [pc, #812]	; (8006068 <UART_SetConfig+0x69c>)
 8005d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d42:	2b28      	cmp	r3, #40	; 0x28
 8005d44:	d86c      	bhi.n	8005e20 <UART_SetConfig+0x454>
 8005d46:	a201      	add	r2, pc, #4	; (adr r2, 8005d4c <UART_SetConfig+0x380>)
 8005d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4c:	08005df1 	.word	0x08005df1
 8005d50:	08005e21 	.word	0x08005e21
 8005d54:	08005e21 	.word	0x08005e21
 8005d58:	08005e21 	.word	0x08005e21
 8005d5c:	08005e21 	.word	0x08005e21
 8005d60:	08005e21 	.word	0x08005e21
 8005d64:	08005e21 	.word	0x08005e21
 8005d68:	08005e21 	.word	0x08005e21
 8005d6c:	08005df9 	.word	0x08005df9
 8005d70:	08005e21 	.word	0x08005e21
 8005d74:	08005e21 	.word	0x08005e21
 8005d78:	08005e21 	.word	0x08005e21
 8005d7c:	08005e21 	.word	0x08005e21
 8005d80:	08005e21 	.word	0x08005e21
 8005d84:	08005e21 	.word	0x08005e21
 8005d88:	08005e21 	.word	0x08005e21
 8005d8c:	08005e01 	.word	0x08005e01
 8005d90:	08005e21 	.word	0x08005e21
 8005d94:	08005e21 	.word	0x08005e21
 8005d98:	08005e21 	.word	0x08005e21
 8005d9c:	08005e21 	.word	0x08005e21
 8005da0:	08005e21 	.word	0x08005e21
 8005da4:	08005e21 	.word	0x08005e21
 8005da8:	08005e21 	.word	0x08005e21
 8005dac:	08005e09 	.word	0x08005e09
 8005db0:	08005e21 	.word	0x08005e21
 8005db4:	08005e21 	.word	0x08005e21
 8005db8:	08005e21 	.word	0x08005e21
 8005dbc:	08005e21 	.word	0x08005e21
 8005dc0:	08005e21 	.word	0x08005e21
 8005dc4:	08005e21 	.word	0x08005e21
 8005dc8:	08005e21 	.word	0x08005e21
 8005dcc:	08005e11 	.word	0x08005e11
 8005dd0:	08005e21 	.word	0x08005e21
 8005dd4:	08005e21 	.word	0x08005e21
 8005dd8:	08005e21 	.word	0x08005e21
 8005ddc:	08005e21 	.word	0x08005e21
 8005de0:	08005e21 	.word	0x08005e21
 8005de4:	08005e21 	.word	0x08005e21
 8005de8:	08005e21 	.word	0x08005e21
 8005dec:	08005e19 	.word	0x08005e19
 8005df0:	2301      	movs	r3, #1
 8005df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005df6:	e0bc      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005df8:	2304      	movs	r3, #4
 8005dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dfe:	e0b8      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005e00:	2308      	movs	r3, #8
 8005e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e06:	e0b4      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005e08:	2310      	movs	r3, #16
 8005e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e0e:	e0b0      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005e10:	2320      	movs	r3, #32
 8005e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e16:	e0ac      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005e18:	2340      	movs	r3, #64	; 0x40
 8005e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e1e:	e0a8      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005e20:	2380      	movs	r3, #128	; 0x80
 8005e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e26:	e0a4      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a8f      	ldr	r2, [pc, #572]	; (800606c <UART_SetConfig+0x6a0>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d130      	bne.n	8005e94 <UART_SetConfig+0x4c8>
 8005e32:	4b8d      	ldr	r3, [pc, #564]	; (8006068 <UART_SetConfig+0x69c>)
 8005e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e36:	f003 0307 	and.w	r3, r3, #7
 8005e3a:	2b05      	cmp	r3, #5
 8005e3c:	d826      	bhi.n	8005e8c <UART_SetConfig+0x4c0>
 8005e3e:	a201      	add	r2, pc, #4	; (adr r2, 8005e44 <UART_SetConfig+0x478>)
 8005e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e44:	08005e5d 	.word	0x08005e5d
 8005e48:	08005e65 	.word	0x08005e65
 8005e4c:	08005e6d 	.word	0x08005e6d
 8005e50:	08005e75 	.word	0x08005e75
 8005e54:	08005e7d 	.word	0x08005e7d
 8005e58:	08005e85 	.word	0x08005e85
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e62:	e086      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005e64:	2304      	movs	r3, #4
 8005e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e6a:	e082      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005e6c:	2308      	movs	r3, #8
 8005e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e72:	e07e      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005e74:	2310      	movs	r3, #16
 8005e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e7a:	e07a      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005e7c:	2320      	movs	r3, #32
 8005e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e82:	e076      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005e84:	2340      	movs	r3, #64	; 0x40
 8005e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e8a:	e072      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005e8c:	2380      	movs	r3, #128	; 0x80
 8005e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e92:	e06e      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a75      	ldr	r2, [pc, #468]	; (8006070 <UART_SetConfig+0x6a4>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d130      	bne.n	8005f00 <UART_SetConfig+0x534>
 8005e9e:	4b72      	ldr	r3, [pc, #456]	; (8006068 <UART_SetConfig+0x69c>)
 8005ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ea2:	f003 0307 	and.w	r3, r3, #7
 8005ea6:	2b05      	cmp	r3, #5
 8005ea8:	d826      	bhi.n	8005ef8 <UART_SetConfig+0x52c>
 8005eaa:	a201      	add	r2, pc, #4	; (adr r2, 8005eb0 <UART_SetConfig+0x4e4>)
 8005eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb0:	08005ec9 	.word	0x08005ec9
 8005eb4:	08005ed1 	.word	0x08005ed1
 8005eb8:	08005ed9 	.word	0x08005ed9
 8005ebc:	08005ee1 	.word	0x08005ee1
 8005ec0:	08005ee9 	.word	0x08005ee9
 8005ec4:	08005ef1 	.word	0x08005ef1
 8005ec8:	2300      	movs	r3, #0
 8005eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ece:	e050      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005ed0:	2304      	movs	r3, #4
 8005ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ed6:	e04c      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005ed8:	2308      	movs	r3, #8
 8005eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ede:	e048      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005ee0:	2310      	movs	r3, #16
 8005ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ee6:	e044      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005ee8:	2320      	movs	r3, #32
 8005eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eee:	e040      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005ef0:	2340      	movs	r3, #64	; 0x40
 8005ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ef6:	e03c      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005ef8:	2380      	movs	r3, #128	; 0x80
 8005efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005efe:	e038      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a5b      	ldr	r2, [pc, #364]	; (8006074 <UART_SetConfig+0x6a8>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d130      	bne.n	8005f6c <UART_SetConfig+0x5a0>
 8005f0a:	4b57      	ldr	r3, [pc, #348]	; (8006068 <UART_SetConfig+0x69c>)
 8005f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f0e:	f003 0307 	and.w	r3, r3, #7
 8005f12:	2b05      	cmp	r3, #5
 8005f14:	d826      	bhi.n	8005f64 <UART_SetConfig+0x598>
 8005f16:	a201      	add	r2, pc, #4	; (adr r2, 8005f1c <UART_SetConfig+0x550>)
 8005f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f1c:	08005f35 	.word	0x08005f35
 8005f20:	08005f3d 	.word	0x08005f3d
 8005f24:	08005f45 	.word	0x08005f45
 8005f28:	08005f4d 	.word	0x08005f4d
 8005f2c:	08005f55 	.word	0x08005f55
 8005f30:	08005f5d 	.word	0x08005f5d
 8005f34:	2302      	movs	r3, #2
 8005f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f3a:	e01a      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005f3c:	2304      	movs	r3, #4
 8005f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f42:	e016      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005f44:	2308      	movs	r3, #8
 8005f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f4a:	e012      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005f4c:	2310      	movs	r3, #16
 8005f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f52:	e00e      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005f54:	2320      	movs	r3, #32
 8005f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f5a:	e00a      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005f5c:	2340      	movs	r3, #64	; 0x40
 8005f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f62:	e006      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005f64:	2380      	movs	r3, #128	; 0x80
 8005f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f6a:	e002      	b.n	8005f72 <UART_SetConfig+0x5a6>
 8005f6c:	2380      	movs	r3, #128	; 0x80
 8005f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a3f      	ldr	r2, [pc, #252]	; (8006074 <UART_SetConfig+0x6a8>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	f040 80f8 	bne.w	800616e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f7e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005f82:	2b20      	cmp	r3, #32
 8005f84:	dc46      	bgt.n	8006014 <UART_SetConfig+0x648>
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	f2c0 8082 	blt.w	8006090 <UART_SetConfig+0x6c4>
 8005f8c:	3b02      	subs	r3, #2
 8005f8e:	2b1e      	cmp	r3, #30
 8005f90:	d87e      	bhi.n	8006090 <UART_SetConfig+0x6c4>
 8005f92:	a201      	add	r2, pc, #4	; (adr r2, 8005f98 <UART_SetConfig+0x5cc>)
 8005f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f98:	0800601b 	.word	0x0800601b
 8005f9c:	08006091 	.word	0x08006091
 8005fa0:	08006023 	.word	0x08006023
 8005fa4:	08006091 	.word	0x08006091
 8005fa8:	08006091 	.word	0x08006091
 8005fac:	08006091 	.word	0x08006091
 8005fb0:	08006033 	.word	0x08006033
 8005fb4:	08006091 	.word	0x08006091
 8005fb8:	08006091 	.word	0x08006091
 8005fbc:	08006091 	.word	0x08006091
 8005fc0:	08006091 	.word	0x08006091
 8005fc4:	08006091 	.word	0x08006091
 8005fc8:	08006091 	.word	0x08006091
 8005fcc:	08006091 	.word	0x08006091
 8005fd0:	08006043 	.word	0x08006043
 8005fd4:	08006091 	.word	0x08006091
 8005fd8:	08006091 	.word	0x08006091
 8005fdc:	08006091 	.word	0x08006091
 8005fe0:	08006091 	.word	0x08006091
 8005fe4:	08006091 	.word	0x08006091
 8005fe8:	08006091 	.word	0x08006091
 8005fec:	08006091 	.word	0x08006091
 8005ff0:	08006091 	.word	0x08006091
 8005ff4:	08006091 	.word	0x08006091
 8005ff8:	08006091 	.word	0x08006091
 8005ffc:	08006091 	.word	0x08006091
 8006000:	08006091 	.word	0x08006091
 8006004:	08006091 	.word	0x08006091
 8006008:	08006091 	.word	0x08006091
 800600c:	08006091 	.word	0x08006091
 8006010:	08006083 	.word	0x08006083
 8006014:	2b40      	cmp	r3, #64	; 0x40
 8006016:	d037      	beq.n	8006088 <UART_SetConfig+0x6bc>
 8006018:	e03a      	b.n	8006090 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800601a:	f7fe fcfd 	bl	8004a18 <HAL_RCCEx_GetD3PCLK1Freq>
 800601e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006020:	e03c      	b.n	800609c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006022:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006026:	4618      	mov	r0, r3
 8006028:	f7fe fd0c 	bl	8004a44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800602c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006030:	e034      	b.n	800609c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006032:	f107 0318 	add.w	r3, r7, #24
 8006036:	4618      	mov	r0, r3
 8006038:	f7fe fe58 	bl	8004cec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006040:	e02c      	b.n	800609c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006042:	4b09      	ldr	r3, [pc, #36]	; (8006068 <UART_SetConfig+0x69c>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 0320 	and.w	r3, r3, #32
 800604a:	2b00      	cmp	r3, #0
 800604c:	d016      	beq.n	800607c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800604e:	4b06      	ldr	r3, [pc, #24]	; (8006068 <UART_SetConfig+0x69c>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	08db      	lsrs	r3, r3, #3
 8006054:	f003 0303 	and.w	r3, r3, #3
 8006058:	4a07      	ldr	r2, [pc, #28]	; (8006078 <UART_SetConfig+0x6ac>)
 800605a:	fa22 f303 	lsr.w	r3, r2, r3
 800605e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006060:	e01c      	b.n	800609c <UART_SetConfig+0x6d0>
 8006062:	bf00      	nop
 8006064:	40011400 	.word	0x40011400
 8006068:	58024400 	.word	0x58024400
 800606c:	40007800 	.word	0x40007800
 8006070:	40007c00 	.word	0x40007c00
 8006074:	58000c00 	.word	0x58000c00
 8006078:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800607c:	4b9d      	ldr	r3, [pc, #628]	; (80062f4 <UART_SetConfig+0x928>)
 800607e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006080:	e00c      	b.n	800609c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006082:	4b9d      	ldr	r3, [pc, #628]	; (80062f8 <UART_SetConfig+0x92c>)
 8006084:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006086:	e009      	b.n	800609c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006088:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800608c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800608e:	e005      	b.n	800609c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006090:	2300      	movs	r3, #0
 8006092:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800609a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800609c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800609e:	2b00      	cmp	r3, #0
 80060a0:	f000 81de 	beq.w	8006460 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a8:	4a94      	ldr	r2, [pc, #592]	; (80062fc <UART_SetConfig+0x930>)
 80060aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060ae:	461a      	mov	r2, r3
 80060b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80060b6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	685a      	ldr	r2, [r3, #4]
 80060bc:	4613      	mov	r3, r2
 80060be:	005b      	lsls	r3, r3, #1
 80060c0:	4413      	add	r3, r2
 80060c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d305      	bcc.n	80060d4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80060ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d903      	bls.n	80060dc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80060da:	e1c1      	b.n	8006460 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060de:	2200      	movs	r2, #0
 80060e0:	60bb      	str	r3, [r7, #8]
 80060e2:	60fa      	str	r2, [r7, #12]
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e8:	4a84      	ldr	r2, [pc, #528]	; (80062fc <UART_SetConfig+0x930>)
 80060ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	2200      	movs	r2, #0
 80060f2:	603b      	str	r3, [r7, #0]
 80060f4:	607a      	str	r2, [r7, #4]
 80060f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80060fe:	f7fa f947 	bl	8000390 <__aeabi_uldivmod>
 8006102:	4602      	mov	r2, r0
 8006104:	460b      	mov	r3, r1
 8006106:	4610      	mov	r0, r2
 8006108:	4619      	mov	r1, r3
 800610a:	f04f 0200 	mov.w	r2, #0
 800610e:	f04f 0300 	mov.w	r3, #0
 8006112:	020b      	lsls	r3, r1, #8
 8006114:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006118:	0202      	lsls	r2, r0, #8
 800611a:	6979      	ldr	r1, [r7, #20]
 800611c:	6849      	ldr	r1, [r1, #4]
 800611e:	0849      	lsrs	r1, r1, #1
 8006120:	2000      	movs	r0, #0
 8006122:	460c      	mov	r4, r1
 8006124:	4605      	mov	r5, r0
 8006126:	eb12 0804 	adds.w	r8, r2, r4
 800612a:	eb43 0905 	adc.w	r9, r3, r5
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	469a      	mov	sl, r3
 8006136:	4693      	mov	fp, r2
 8006138:	4652      	mov	r2, sl
 800613a:	465b      	mov	r3, fp
 800613c:	4640      	mov	r0, r8
 800613e:	4649      	mov	r1, r9
 8006140:	f7fa f926 	bl	8000390 <__aeabi_uldivmod>
 8006144:	4602      	mov	r2, r0
 8006146:	460b      	mov	r3, r1
 8006148:	4613      	mov	r3, r2
 800614a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800614c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006152:	d308      	bcc.n	8006166 <UART_SetConfig+0x79a>
 8006154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006156:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800615a:	d204      	bcs.n	8006166 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006162:	60da      	str	r2, [r3, #12]
 8006164:	e17c      	b.n	8006460 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800616c:	e178      	b.n	8006460 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	69db      	ldr	r3, [r3, #28]
 8006172:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006176:	f040 80c5 	bne.w	8006304 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800617a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800617e:	2b20      	cmp	r3, #32
 8006180:	dc48      	bgt.n	8006214 <UART_SetConfig+0x848>
 8006182:	2b00      	cmp	r3, #0
 8006184:	db7b      	blt.n	800627e <UART_SetConfig+0x8b2>
 8006186:	2b20      	cmp	r3, #32
 8006188:	d879      	bhi.n	800627e <UART_SetConfig+0x8b2>
 800618a:	a201      	add	r2, pc, #4	; (adr r2, 8006190 <UART_SetConfig+0x7c4>)
 800618c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006190:	0800621b 	.word	0x0800621b
 8006194:	08006223 	.word	0x08006223
 8006198:	0800627f 	.word	0x0800627f
 800619c:	0800627f 	.word	0x0800627f
 80061a0:	0800622b 	.word	0x0800622b
 80061a4:	0800627f 	.word	0x0800627f
 80061a8:	0800627f 	.word	0x0800627f
 80061ac:	0800627f 	.word	0x0800627f
 80061b0:	0800623b 	.word	0x0800623b
 80061b4:	0800627f 	.word	0x0800627f
 80061b8:	0800627f 	.word	0x0800627f
 80061bc:	0800627f 	.word	0x0800627f
 80061c0:	0800627f 	.word	0x0800627f
 80061c4:	0800627f 	.word	0x0800627f
 80061c8:	0800627f 	.word	0x0800627f
 80061cc:	0800627f 	.word	0x0800627f
 80061d0:	0800624b 	.word	0x0800624b
 80061d4:	0800627f 	.word	0x0800627f
 80061d8:	0800627f 	.word	0x0800627f
 80061dc:	0800627f 	.word	0x0800627f
 80061e0:	0800627f 	.word	0x0800627f
 80061e4:	0800627f 	.word	0x0800627f
 80061e8:	0800627f 	.word	0x0800627f
 80061ec:	0800627f 	.word	0x0800627f
 80061f0:	0800627f 	.word	0x0800627f
 80061f4:	0800627f 	.word	0x0800627f
 80061f8:	0800627f 	.word	0x0800627f
 80061fc:	0800627f 	.word	0x0800627f
 8006200:	0800627f 	.word	0x0800627f
 8006204:	0800627f 	.word	0x0800627f
 8006208:	0800627f 	.word	0x0800627f
 800620c:	0800627f 	.word	0x0800627f
 8006210:	08006271 	.word	0x08006271
 8006214:	2b40      	cmp	r3, #64	; 0x40
 8006216:	d02e      	beq.n	8006276 <UART_SetConfig+0x8aa>
 8006218:	e031      	b.n	800627e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800621a:	f7fd f985 	bl	8003528 <HAL_RCC_GetPCLK1Freq>
 800621e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006220:	e033      	b.n	800628a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006222:	f7fd f997 	bl	8003554 <HAL_RCC_GetPCLK2Freq>
 8006226:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006228:	e02f      	b.n	800628a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800622a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800622e:	4618      	mov	r0, r3
 8006230:	f7fe fc08 	bl	8004a44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006236:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006238:	e027      	b.n	800628a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800623a:	f107 0318 	add.w	r3, r7, #24
 800623e:	4618      	mov	r0, r3
 8006240:	f7fe fd54 	bl	8004cec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006248:	e01f      	b.n	800628a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800624a:	4b2d      	ldr	r3, [pc, #180]	; (8006300 <UART_SetConfig+0x934>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 0320 	and.w	r3, r3, #32
 8006252:	2b00      	cmp	r3, #0
 8006254:	d009      	beq.n	800626a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006256:	4b2a      	ldr	r3, [pc, #168]	; (8006300 <UART_SetConfig+0x934>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	08db      	lsrs	r3, r3, #3
 800625c:	f003 0303 	and.w	r3, r3, #3
 8006260:	4a24      	ldr	r2, [pc, #144]	; (80062f4 <UART_SetConfig+0x928>)
 8006262:	fa22 f303 	lsr.w	r3, r2, r3
 8006266:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006268:	e00f      	b.n	800628a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800626a:	4b22      	ldr	r3, [pc, #136]	; (80062f4 <UART_SetConfig+0x928>)
 800626c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800626e:	e00c      	b.n	800628a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006270:	4b21      	ldr	r3, [pc, #132]	; (80062f8 <UART_SetConfig+0x92c>)
 8006272:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006274:	e009      	b.n	800628a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006276:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800627a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800627c:	e005      	b.n	800628a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800627e:	2300      	movs	r3, #0
 8006280:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006288:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800628a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800628c:	2b00      	cmp	r3, #0
 800628e:	f000 80e7 	beq.w	8006460 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006296:	4a19      	ldr	r2, [pc, #100]	; (80062fc <UART_SetConfig+0x930>)
 8006298:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800629c:	461a      	mov	r2, r3
 800629e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80062a4:	005a      	lsls	r2, r3, #1
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	085b      	lsrs	r3, r3, #1
 80062ac:	441a      	add	r2, r3
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80062b6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ba:	2b0f      	cmp	r3, #15
 80062bc:	d916      	bls.n	80062ec <UART_SetConfig+0x920>
 80062be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062c4:	d212      	bcs.n	80062ec <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	f023 030f 	bic.w	r3, r3, #15
 80062ce:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d2:	085b      	lsrs	r3, r3, #1
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	f003 0307 	and.w	r3, r3, #7
 80062da:	b29a      	uxth	r2, r3
 80062dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80062de:	4313      	orrs	r3, r2
 80062e0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80062e8:	60da      	str	r2, [r3, #12]
 80062ea:	e0b9      	b.n	8006460 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80062f2:	e0b5      	b.n	8006460 <UART_SetConfig+0xa94>
 80062f4:	03d09000 	.word	0x03d09000
 80062f8:	003d0900 	.word	0x003d0900
 80062fc:	0800ca90 	.word	0x0800ca90
 8006300:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006304:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006308:	2b20      	cmp	r3, #32
 800630a:	dc49      	bgt.n	80063a0 <UART_SetConfig+0x9d4>
 800630c:	2b00      	cmp	r3, #0
 800630e:	db7c      	blt.n	800640a <UART_SetConfig+0xa3e>
 8006310:	2b20      	cmp	r3, #32
 8006312:	d87a      	bhi.n	800640a <UART_SetConfig+0xa3e>
 8006314:	a201      	add	r2, pc, #4	; (adr r2, 800631c <UART_SetConfig+0x950>)
 8006316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800631a:	bf00      	nop
 800631c:	080063a7 	.word	0x080063a7
 8006320:	080063af 	.word	0x080063af
 8006324:	0800640b 	.word	0x0800640b
 8006328:	0800640b 	.word	0x0800640b
 800632c:	080063b7 	.word	0x080063b7
 8006330:	0800640b 	.word	0x0800640b
 8006334:	0800640b 	.word	0x0800640b
 8006338:	0800640b 	.word	0x0800640b
 800633c:	080063c7 	.word	0x080063c7
 8006340:	0800640b 	.word	0x0800640b
 8006344:	0800640b 	.word	0x0800640b
 8006348:	0800640b 	.word	0x0800640b
 800634c:	0800640b 	.word	0x0800640b
 8006350:	0800640b 	.word	0x0800640b
 8006354:	0800640b 	.word	0x0800640b
 8006358:	0800640b 	.word	0x0800640b
 800635c:	080063d7 	.word	0x080063d7
 8006360:	0800640b 	.word	0x0800640b
 8006364:	0800640b 	.word	0x0800640b
 8006368:	0800640b 	.word	0x0800640b
 800636c:	0800640b 	.word	0x0800640b
 8006370:	0800640b 	.word	0x0800640b
 8006374:	0800640b 	.word	0x0800640b
 8006378:	0800640b 	.word	0x0800640b
 800637c:	0800640b 	.word	0x0800640b
 8006380:	0800640b 	.word	0x0800640b
 8006384:	0800640b 	.word	0x0800640b
 8006388:	0800640b 	.word	0x0800640b
 800638c:	0800640b 	.word	0x0800640b
 8006390:	0800640b 	.word	0x0800640b
 8006394:	0800640b 	.word	0x0800640b
 8006398:	0800640b 	.word	0x0800640b
 800639c:	080063fd 	.word	0x080063fd
 80063a0:	2b40      	cmp	r3, #64	; 0x40
 80063a2:	d02e      	beq.n	8006402 <UART_SetConfig+0xa36>
 80063a4:	e031      	b.n	800640a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063a6:	f7fd f8bf 	bl	8003528 <HAL_RCC_GetPCLK1Freq>
 80063aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80063ac:	e033      	b.n	8006416 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063ae:	f7fd f8d1 	bl	8003554 <HAL_RCC_GetPCLK2Freq>
 80063b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80063b4:	e02f      	b.n	8006416 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063ba:	4618      	mov	r0, r3
 80063bc:	f7fe fb42 	bl	8004a44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80063c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063c4:	e027      	b.n	8006416 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063c6:	f107 0318 	add.w	r3, r7, #24
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7fe fc8e 	bl	8004cec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063d4:	e01f      	b.n	8006416 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063d6:	4b2d      	ldr	r3, [pc, #180]	; (800648c <UART_SetConfig+0xac0>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 0320 	and.w	r3, r3, #32
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d009      	beq.n	80063f6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80063e2:	4b2a      	ldr	r3, [pc, #168]	; (800648c <UART_SetConfig+0xac0>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	08db      	lsrs	r3, r3, #3
 80063e8:	f003 0303 	and.w	r3, r3, #3
 80063ec:	4a28      	ldr	r2, [pc, #160]	; (8006490 <UART_SetConfig+0xac4>)
 80063ee:	fa22 f303 	lsr.w	r3, r2, r3
 80063f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80063f4:	e00f      	b.n	8006416 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80063f6:	4b26      	ldr	r3, [pc, #152]	; (8006490 <UART_SetConfig+0xac4>)
 80063f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063fa:	e00c      	b.n	8006416 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80063fc:	4b25      	ldr	r3, [pc, #148]	; (8006494 <UART_SetConfig+0xac8>)
 80063fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006400:	e009      	b.n	8006416 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006402:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006406:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006408:	e005      	b.n	8006416 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800640a:	2300      	movs	r3, #0
 800640c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006414:	bf00      	nop
    }

    if (pclk != 0U)
 8006416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006418:	2b00      	cmp	r3, #0
 800641a:	d021      	beq.n	8006460 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006420:	4a1d      	ldr	r2, [pc, #116]	; (8006498 <UART_SetConfig+0xacc>)
 8006422:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006426:	461a      	mov	r2, r3
 8006428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800642a:	fbb3 f2f2 	udiv	r2, r3, r2
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	085b      	lsrs	r3, r3, #1
 8006434:	441a      	add	r2, r3
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	fbb2 f3f3 	udiv	r3, r2, r3
 800643e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006442:	2b0f      	cmp	r3, #15
 8006444:	d909      	bls.n	800645a <UART_SetConfig+0xa8e>
 8006446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800644c:	d205      	bcs.n	800645a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800644e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006450:	b29a      	uxth	r2, r3
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	60da      	str	r2, [r3, #12]
 8006458:	e002      	b.n	8006460 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	2201      	movs	r2, #1
 8006464:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	2201      	movs	r2, #1
 800646c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	2200      	movs	r2, #0
 8006474:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	2200      	movs	r2, #0
 800647a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800647c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006480:	4618      	mov	r0, r3
 8006482:	3748      	adds	r7, #72	; 0x48
 8006484:	46bd      	mov	sp, r7
 8006486:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800648a:	bf00      	nop
 800648c:	58024400 	.word	0x58024400
 8006490:	03d09000 	.word	0x03d09000
 8006494:	003d0900 	.word	0x003d0900
 8006498:	0800ca90 	.word	0x0800ca90

0800649c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a8:	f003 0301 	and.w	r3, r3, #1
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00a      	beq.n	80064c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	430a      	orrs	r2, r1
 80064c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ca:	f003 0302 	and.w	r3, r3, #2
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00a      	beq.n	80064e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	430a      	orrs	r2, r1
 80064e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ec:	f003 0304 	and.w	r3, r3, #4
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00a      	beq.n	800650a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	430a      	orrs	r2, r1
 8006508:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800650e:	f003 0308 	and.w	r3, r3, #8
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00a      	beq.n	800652c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	430a      	orrs	r2, r1
 800652a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006530:	f003 0310 	and.w	r3, r3, #16
 8006534:	2b00      	cmp	r3, #0
 8006536:	d00a      	beq.n	800654e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	430a      	orrs	r2, r1
 800654c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006552:	f003 0320 	and.w	r3, r3, #32
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00a      	beq.n	8006570 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	430a      	orrs	r2, r1
 800656e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006578:	2b00      	cmp	r3, #0
 800657a:	d01a      	beq.n	80065b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	430a      	orrs	r2, r1
 8006590:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006596:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800659a:	d10a      	bne.n	80065b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	430a      	orrs	r2, r1
 80065b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00a      	beq.n	80065d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	430a      	orrs	r2, r1
 80065d2:	605a      	str	r2, [r3, #4]
  }
}
 80065d4:	bf00      	nop
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b098      	sub	sp, #96	; 0x60
 80065e4:	af02      	add	r7, sp, #8
 80065e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065f0:	f7fa ff30 	bl	8001454 <HAL_GetTick>
 80065f4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0308 	and.w	r3, r3, #8
 8006600:	2b08      	cmp	r3, #8
 8006602:	d12f      	bne.n	8006664 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006604:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006608:	9300      	str	r3, [sp, #0]
 800660a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800660c:	2200      	movs	r2, #0
 800660e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 f88e 	bl	8006734 <UART_WaitOnFlagUntilTimeout>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d022      	beq.n	8006664 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006626:	e853 3f00 	ldrex	r3, [r3]
 800662a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800662c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800662e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006632:	653b      	str	r3, [r7, #80]	; 0x50
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	461a      	mov	r2, r3
 800663a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800663c:	647b      	str	r3, [r7, #68]	; 0x44
 800663e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006640:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006642:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006644:	e841 2300 	strex	r3, r2, [r1]
 8006648:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800664a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800664c:	2b00      	cmp	r3, #0
 800664e:	d1e6      	bne.n	800661e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2220      	movs	r2, #32
 8006654:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	e063      	b.n	800672c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 0304 	and.w	r3, r3, #4
 800666e:	2b04      	cmp	r3, #4
 8006670:	d149      	bne.n	8006706 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006672:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006676:	9300      	str	r3, [sp, #0]
 8006678:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800667a:	2200      	movs	r2, #0
 800667c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 f857 	bl	8006734 <UART_WaitOnFlagUntilTimeout>
 8006686:	4603      	mov	r3, r0
 8006688:	2b00      	cmp	r3, #0
 800668a:	d03c      	beq.n	8006706 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006694:	e853 3f00 	ldrex	r3, [r3]
 8006698:	623b      	str	r3, [r7, #32]
   return(result);
 800669a:	6a3b      	ldr	r3, [r7, #32]
 800669c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	461a      	mov	r2, r3
 80066a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066aa:	633b      	str	r3, [r7, #48]	; 0x30
 80066ac:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066b2:	e841 2300 	strex	r3, r2, [r1]
 80066b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80066b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d1e6      	bne.n	800668c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	3308      	adds	r3, #8
 80066c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	e853 3f00 	ldrex	r3, [r3]
 80066cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f023 0301 	bic.w	r3, r3, #1
 80066d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	3308      	adds	r3, #8
 80066dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066de:	61fa      	str	r2, [r7, #28]
 80066e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e2:	69b9      	ldr	r1, [r7, #24]
 80066e4:	69fa      	ldr	r2, [r7, #28]
 80066e6:	e841 2300 	strex	r3, r2, [r1]
 80066ea:	617b      	str	r3, [r7, #20]
   return(result);
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d1e5      	bne.n	80066be <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2220      	movs	r2, #32
 80066f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006702:	2303      	movs	r3, #3
 8006704:	e012      	b.n	800672c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2220      	movs	r2, #32
 800670a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2220      	movs	r2, #32
 8006712:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3758      	adds	r7, #88	; 0x58
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	603b      	str	r3, [r7, #0]
 8006740:	4613      	mov	r3, r2
 8006742:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006744:	e049      	b.n	80067da <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800674c:	d045      	beq.n	80067da <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800674e:	f7fa fe81 	bl	8001454 <HAL_GetTick>
 8006752:	4602      	mov	r2, r0
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	1ad3      	subs	r3, r2, r3
 8006758:	69ba      	ldr	r2, [r7, #24]
 800675a:	429a      	cmp	r2, r3
 800675c:	d302      	bcc.n	8006764 <UART_WaitOnFlagUntilTimeout+0x30>
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d101      	bne.n	8006768 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006764:	2303      	movs	r3, #3
 8006766:	e048      	b.n	80067fa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 0304 	and.w	r3, r3, #4
 8006772:	2b00      	cmp	r3, #0
 8006774:	d031      	beq.n	80067da <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	69db      	ldr	r3, [r3, #28]
 800677c:	f003 0308 	and.w	r3, r3, #8
 8006780:	2b08      	cmp	r3, #8
 8006782:	d110      	bne.n	80067a6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2208      	movs	r2, #8
 800678a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800678c:	68f8      	ldr	r0, [r7, #12]
 800678e:	f000 f839 	bl	8006804 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2208      	movs	r2, #8
 8006796:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e029      	b.n	80067fa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	69db      	ldr	r3, [r3, #28]
 80067ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067b4:	d111      	bne.n	80067da <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f000 f81f 	bl	8006804 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2220      	movs	r2, #32
 80067ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80067d6:	2303      	movs	r3, #3
 80067d8:	e00f      	b.n	80067fa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	69da      	ldr	r2, [r3, #28]
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	4013      	ands	r3, r2
 80067e4:	68ba      	ldr	r2, [r7, #8]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	bf0c      	ite	eq
 80067ea:	2301      	moveq	r3, #1
 80067ec:	2300      	movne	r3, #0
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	461a      	mov	r2, r3
 80067f2:	79fb      	ldrb	r3, [r7, #7]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d0a6      	beq.n	8006746 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3710      	adds	r7, #16
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
	...

08006804 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006804:	b480      	push	{r7}
 8006806:	b095      	sub	sp, #84	; 0x54
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006814:	e853 3f00 	ldrex	r3, [r3]
 8006818:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800681a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006820:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	461a      	mov	r2, r3
 8006828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800682a:	643b      	str	r3, [r7, #64]	; 0x40
 800682c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006830:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006832:	e841 2300 	strex	r3, r2, [r1]
 8006836:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1e6      	bne.n	800680c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	3308      	adds	r3, #8
 8006844:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006846:	6a3b      	ldr	r3, [r7, #32]
 8006848:	e853 3f00 	ldrex	r3, [r3]
 800684c:	61fb      	str	r3, [r7, #28]
   return(result);
 800684e:	69fa      	ldr	r2, [r7, #28]
 8006850:	4b1e      	ldr	r3, [pc, #120]	; (80068cc <UART_EndRxTransfer+0xc8>)
 8006852:	4013      	ands	r3, r2
 8006854:	64bb      	str	r3, [r7, #72]	; 0x48
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	3308      	adds	r3, #8
 800685c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800685e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006860:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006862:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006864:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006866:	e841 2300 	strex	r3, r2, [r1]
 800686a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800686c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686e:	2b00      	cmp	r3, #0
 8006870:	d1e5      	bne.n	800683e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006876:	2b01      	cmp	r3, #1
 8006878:	d118      	bne.n	80068ac <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	e853 3f00 	ldrex	r3, [r3]
 8006886:	60bb      	str	r3, [r7, #8]
   return(result);
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	f023 0310 	bic.w	r3, r3, #16
 800688e:	647b      	str	r3, [r7, #68]	; 0x44
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	461a      	mov	r2, r3
 8006896:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006898:	61bb      	str	r3, [r7, #24]
 800689a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689c:	6979      	ldr	r1, [r7, #20]
 800689e:	69ba      	ldr	r2, [r7, #24]
 80068a0:	e841 2300 	strex	r3, r2, [r1]
 80068a4:	613b      	str	r3, [r7, #16]
   return(result);
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d1e6      	bne.n	800687a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2220      	movs	r2, #32
 80068b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	675a      	str	r2, [r3, #116]	; 0x74
}
 80068c0:	bf00      	nop
 80068c2:	3754      	adds	r7, #84	; 0x54
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr
 80068cc:	effffffe 	.word	0xeffffffe

080068d0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d101      	bne.n	80068e6 <HAL_UARTEx_DisableFifoMode+0x16>
 80068e2:	2302      	movs	r3, #2
 80068e4:	e027      	b.n	8006936 <HAL_UARTEx_DisableFifoMode+0x66>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2201      	movs	r2, #1
 80068ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2224      	movs	r2, #36	; 0x24
 80068f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f022 0201 	bic.w	r2, r2, #1
 800690c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006914:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2220      	movs	r2, #32
 8006928:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3714      	adds	r7, #20
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr

08006942 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006942:	b580      	push	{r7, lr}
 8006944:	b084      	sub	sp, #16
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
 800694a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006952:	2b01      	cmp	r3, #1
 8006954:	d101      	bne.n	800695a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006956:	2302      	movs	r3, #2
 8006958:	e02d      	b.n	80069b6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2201      	movs	r2, #1
 800695e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2224      	movs	r2, #36	; 0x24
 8006966:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f022 0201 	bic.w	r2, r2, #1
 8006980:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	683a      	ldr	r2, [r7, #0]
 8006992:	430a      	orrs	r2, r1
 8006994:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 f850 	bl	8006a3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2220      	movs	r2, #32
 80069a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3710      	adds	r7, #16
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b084      	sub	sp, #16
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
 80069c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d101      	bne.n	80069d6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80069d2:	2302      	movs	r3, #2
 80069d4:	e02d      	b.n	8006a32 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2201      	movs	r2, #1
 80069da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2224      	movs	r2, #36	; 0x24
 80069e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f022 0201 	bic.w	r2, r2, #1
 80069fc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	683a      	ldr	r2, [r7, #0]
 8006a0e:	430a      	orrs	r2, r1
 8006a10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 f812 	bl	8006a3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2220      	movs	r2, #32
 8006a24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3710      	adds	r7, #16
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
	...

08006a3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b085      	sub	sp, #20
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d108      	bne.n	8006a5e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006a5c:	e031      	b.n	8006ac2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006a5e:	2310      	movs	r3, #16
 8006a60:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006a62:	2310      	movs	r3, #16
 8006a64:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	0e5b      	lsrs	r3, r3, #25
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	f003 0307 	and.w	r3, r3, #7
 8006a74:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	0f5b      	lsrs	r3, r3, #29
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	f003 0307 	and.w	r3, r3, #7
 8006a84:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a86:	7bbb      	ldrb	r3, [r7, #14]
 8006a88:	7b3a      	ldrb	r2, [r7, #12]
 8006a8a:	4911      	ldr	r1, [pc, #68]	; (8006ad0 <UARTEx_SetNbDataToProcess+0x94>)
 8006a8c:	5c8a      	ldrb	r2, [r1, r2]
 8006a8e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006a92:	7b3a      	ldrb	r2, [r7, #12]
 8006a94:	490f      	ldr	r1, [pc, #60]	; (8006ad4 <UARTEx_SetNbDataToProcess+0x98>)
 8006a96:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a98:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a9c:	b29a      	uxth	r2, r3
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006aa4:	7bfb      	ldrb	r3, [r7, #15]
 8006aa6:	7b7a      	ldrb	r2, [r7, #13]
 8006aa8:	4909      	ldr	r1, [pc, #36]	; (8006ad0 <UARTEx_SetNbDataToProcess+0x94>)
 8006aaa:	5c8a      	ldrb	r2, [r1, r2]
 8006aac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006ab0:	7b7a      	ldrb	r2, [r7, #13]
 8006ab2:	4908      	ldr	r1, [pc, #32]	; (8006ad4 <UARTEx_SetNbDataToProcess+0x98>)
 8006ab4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ab6:	fb93 f3f2 	sdiv	r3, r3, r2
 8006aba:	b29a      	uxth	r2, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006ac2:	bf00      	nop
 8006ac4:	3714      	adds	r7, #20
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	0800caa8 	.word	0x0800caa8
 8006ad4:	0800cab0 	.word	0x0800cab0

08006ad8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ad8:	b084      	sub	sp, #16
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b084      	sub	sp, #16
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
 8006ae2:	f107 001c 	add.w	r0, r7, #28
 8006ae6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d120      	bne.n	8006b32 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	68da      	ldr	r2, [r3, #12]
 8006b00:	4b2a      	ldr	r3, [pc, #168]	; (8006bac <USB_CoreInit+0xd4>)
 8006b02:	4013      	ands	r3, r2
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006b14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d105      	bne.n	8006b26 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 faac 	bl	8007084 <USB_CoreReset>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	73fb      	strb	r3, [r7, #15]
 8006b30:	e01a      	b.n	8006b68 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 faa0 	bl	8007084 <USB_CoreReset>
 8006b44:	4603      	mov	r3, r0
 8006b46:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006b48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d106      	bne.n	8006b5c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b52:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	639a      	str	r2, [r3, #56]	; 0x38
 8006b5a:	e005      	b.n	8006b68 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d116      	bne.n	8006b9c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b72:	b29a      	uxth	r2, r3
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006b7c:	4b0c      	ldr	r3, [pc, #48]	; (8006bb0 <USB_CoreInit+0xd8>)
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	f043 0206 	orr.w	r2, r3, #6
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	f043 0220 	orr.w	r2, r3, #32
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3710      	adds	r7, #16
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ba8:	b004      	add	sp, #16
 8006baa:	4770      	bx	lr
 8006bac:	ffbdffbf 	.word	0xffbdffbf
 8006bb0:	03ee0000 	.word	0x03ee0000

08006bb4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	f023 0201 	bic.w	r2, r3, #1
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	370c      	adds	r7, #12
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr

08006bd6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006bd6:	b580      	push	{r7, lr}
 8006bd8:	b084      	sub	sp, #16
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
 8006bde:	460b      	mov	r3, r1
 8006be0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006be2:	2300      	movs	r3, #0
 8006be4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006bf2:	78fb      	ldrb	r3, [r7, #3]
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d115      	bne.n	8006c24 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006c04:	2001      	movs	r0, #1
 8006c06:	f7fa fc31 	bl	800146c <HAL_Delay>
      ms++;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 fa29 	bl	8007068 <USB_GetMode>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d01e      	beq.n	8006c5a <USB_SetCurrentMode+0x84>
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2b31      	cmp	r3, #49	; 0x31
 8006c20:	d9f0      	bls.n	8006c04 <USB_SetCurrentMode+0x2e>
 8006c22:	e01a      	b.n	8006c5a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006c24:	78fb      	ldrb	r3, [r7, #3]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d115      	bne.n	8006c56 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006c36:	2001      	movs	r0, #1
 8006c38:	f7fa fc18 	bl	800146c <HAL_Delay>
      ms++;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	3301      	adds	r3, #1
 8006c40:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 fa10 	bl	8007068 <USB_GetMode>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d005      	beq.n	8006c5a <USB_SetCurrentMode+0x84>
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2b31      	cmp	r3, #49	; 0x31
 8006c52:	d9f0      	bls.n	8006c36 <USB_SetCurrentMode+0x60>
 8006c54:	e001      	b.n	8006c5a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e005      	b.n	8006c66 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2b32      	cmp	r3, #50	; 0x32
 8006c5e:	d101      	bne.n	8006c64 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	e000      	b.n	8006c66 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006c64:	2300      	movs	r3, #0
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3710      	adds	r7, #16
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
	...

08006c70 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c70:	b084      	sub	sp, #16
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b086      	sub	sp, #24
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
 8006c7a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006c7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006c82:	2300      	movs	r3, #0
 8006c84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	613b      	str	r3, [r7, #16]
 8006c8e:	e009      	b.n	8006ca4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	3340      	adds	r3, #64	; 0x40
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	4413      	add	r3, r2
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	613b      	str	r3, [r7, #16]
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	2b0e      	cmp	r3, #14
 8006ca8:	d9f2      	bls.n	8006c90 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d11c      	bne.n	8006cea <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cbe:	f043 0302 	orr.w	r3, r3, #2
 8006cc2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	601a      	str	r2, [r3, #0]
 8006ce8:	e005      	b.n	8006cf6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	2300      	movs	r3, #0
 8006d00:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d08:	4619      	mov	r1, r3
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d10:	461a      	mov	r2, r3
 8006d12:	680b      	ldr	r3, [r1, #0]
 8006d14:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d10c      	bne.n	8006d36 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d104      	bne.n	8006d2c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006d22:	2100      	movs	r1, #0
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 f965 	bl	8006ff4 <USB_SetDevSpeed>
 8006d2a:	e008      	b.n	8006d3e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006d2c:	2101      	movs	r1, #1
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 f960 	bl	8006ff4 <USB_SetDevSpeed>
 8006d34:	e003      	b.n	8006d3e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006d36:	2103      	movs	r1, #3
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 f95b 	bl	8006ff4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006d3e:	2110      	movs	r1, #16
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 f8f3 	bl	8006f2c <USB_FlushTxFifo>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d001      	beq.n	8006d50 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 f91f 	bl	8006f94 <USB_FlushRxFifo>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d001      	beq.n	8006d60 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d66:	461a      	mov	r2, r3
 8006d68:	2300      	movs	r3, #0
 8006d6a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d72:	461a      	mov	r2, r3
 8006d74:	2300      	movs	r3, #0
 8006d76:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d7e:	461a      	mov	r2, r3
 8006d80:	2300      	movs	r3, #0
 8006d82:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d84:	2300      	movs	r3, #0
 8006d86:	613b      	str	r3, [r7, #16]
 8006d88:	e043      	b.n	8006e12 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	015a      	lsls	r2, r3, #5
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	4413      	add	r3, r2
 8006d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006da0:	d118      	bne.n	8006dd4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d10a      	bne.n	8006dbe <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	015a      	lsls	r2, r3, #5
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	4413      	add	r3, r2
 8006db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006db4:	461a      	mov	r2, r3
 8006db6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006dba:	6013      	str	r3, [r2, #0]
 8006dbc:	e013      	b.n	8006de6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	015a      	lsls	r2, r3, #5
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dca:	461a      	mov	r2, r3
 8006dcc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006dd0:	6013      	str	r3, [r2, #0]
 8006dd2:	e008      	b.n	8006de6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	015a      	lsls	r2, r3, #5
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	4413      	add	r3, r2
 8006ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de0:	461a      	mov	r2, r3
 8006de2:	2300      	movs	r3, #0
 8006de4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	015a      	lsls	r2, r3, #5
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	4413      	add	r3, r2
 8006dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006df2:	461a      	mov	r2, r3
 8006df4:	2300      	movs	r3, #0
 8006df6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	015a      	lsls	r2, r3, #5
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	4413      	add	r3, r2
 8006e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e04:	461a      	mov	r2, r3
 8006e06:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e0a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	3301      	adds	r3, #1
 8006e10:	613b      	str	r3, [r7, #16]
 8006e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e14:	693a      	ldr	r2, [r7, #16]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d3b7      	bcc.n	8006d8a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	613b      	str	r3, [r7, #16]
 8006e1e:	e043      	b.n	8006ea8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	015a      	lsls	r2, r3, #5
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	4413      	add	r3, r2
 8006e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e36:	d118      	bne.n	8006e6a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d10a      	bne.n	8006e54 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	015a      	lsls	r2, r3, #5
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	4413      	add	r3, r2
 8006e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e50:	6013      	str	r3, [r2, #0]
 8006e52:	e013      	b.n	8006e7c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	015a      	lsls	r2, r3, #5
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	4413      	add	r3, r2
 8006e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e60:	461a      	mov	r2, r3
 8006e62:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006e66:	6013      	str	r3, [r2, #0]
 8006e68:	e008      	b.n	8006e7c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	015a      	lsls	r2, r3, #5
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	4413      	add	r3, r2
 8006e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e76:	461a      	mov	r2, r3
 8006e78:	2300      	movs	r3, #0
 8006e7a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	015a      	lsls	r2, r3, #5
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	4413      	add	r3, r2
 8006e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e88:	461a      	mov	r2, r3
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	015a      	lsls	r2, r3, #5
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	4413      	add	r3, r2
 8006e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006ea0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	613b      	str	r3, [r7, #16]
 8006ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eaa:	693a      	ldr	r2, [r7, #16]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d3b7      	bcc.n	8006e20 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eb6:	691b      	ldr	r3, [r3, #16]
 8006eb8:	68fa      	ldr	r2, [r7, #12]
 8006eba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ebe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ec2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006ed0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d105      	bne.n	8006ee4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	699b      	ldr	r3, [r3, #24]
 8006edc:	f043 0210 	orr.w	r2, r3, #16
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	699a      	ldr	r2, [r3, #24]
 8006ee8:	4b0e      	ldr	r3, [pc, #56]	; (8006f24 <USB_DevInit+0x2b4>)
 8006eea:	4313      	orrs	r3, r2
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d005      	beq.n	8006f02 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	699b      	ldr	r3, [r3, #24]
 8006efa:	f043 0208 	orr.w	r2, r3, #8
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d105      	bne.n	8006f14 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	699a      	ldr	r2, [r3, #24]
 8006f0c:	4b06      	ldr	r3, [pc, #24]	; (8006f28 <USB_DevInit+0x2b8>)
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006f14:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3718      	adds	r7, #24
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f20:	b004      	add	sp, #16
 8006f22:	4770      	bx	lr
 8006f24:	803c3800 	.word	0x803c3800
 8006f28:	40000004 	.word	0x40000004

08006f2c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006f36:	2300      	movs	r3, #0
 8006f38:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	4a13      	ldr	r2, [pc, #76]	; (8006f90 <USB_FlushTxFifo+0x64>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d901      	bls.n	8006f4c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	e01b      	b.n	8006f84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	daf2      	bge.n	8006f3a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006f54:	2300      	movs	r3, #0
 8006f56:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	019b      	lsls	r3, r3, #6
 8006f5c:	f043 0220 	orr.w	r2, r3, #32
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	3301      	adds	r3, #1
 8006f68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	4a08      	ldr	r2, [pc, #32]	; (8006f90 <USB_FlushTxFifo+0x64>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d901      	bls.n	8006f76 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006f72:	2303      	movs	r3, #3
 8006f74:	e006      	b.n	8006f84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	f003 0320 	and.w	r3, r3, #32
 8006f7e:	2b20      	cmp	r3, #32
 8006f80:	d0f0      	beq.n	8006f64 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3714      	adds	r7, #20
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr
 8006f90:	00030d40 	.word	0x00030d40

08006f94 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b085      	sub	sp, #20
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	4a11      	ldr	r2, [pc, #68]	; (8006ff0 <USB_FlushRxFifo+0x5c>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d901      	bls.n	8006fb2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	e018      	b.n	8006fe4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	daf2      	bge.n	8006fa0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2210      	movs	r2, #16
 8006fc2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	4a08      	ldr	r2, [pc, #32]	; (8006ff0 <USB_FlushRxFifo+0x5c>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d901      	bls.n	8006fd6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	e006      	b.n	8006fe4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	f003 0310 	and.w	r3, r3, #16
 8006fde:	2b10      	cmp	r3, #16
 8006fe0:	d0f0      	beq.n	8006fc4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3714      	adds	r7, #20
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr
 8006ff0:	00030d40 	.word	0x00030d40

08006ff4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b085      	sub	sp, #20
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	78fb      	ldrb	r3, [r7, #3]
 800700e:	68f9      	ldr	r1, [r7, #12]
 8007010:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007014:	4313      	orrs	r3, r2
 8007016:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3714      	adds	r7, #20
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr

08007026 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007026:	b480      	push	{r7}
 8007028:	b085      	sub	sp, #20
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	68fa      	ldr	r2, [r7, #12]
 800703c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007040:	f023 0303 	bic.w	r3, r3, #3
 8007044:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007054:	f043 0302 	orr.w	r3, r3, #2
 8007058:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	3714      	adds	r7, #20
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	695b      	ldr	r3, [r3, #20]
 8007074:	f003 0301 	and.w	r3, r3, #1
}
 8007078:	4618      	mov	r0, r3
 800707a:	370c      	adds	r7, #12
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007084:	b480      	push	{r7}
 8007086:	b085      	sub	sp, #20
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800708c:	2300      	movs	r3, #0
 800708e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	3301      	adds	r3, #1
 8007094:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	4a13      	ldr	r2, [pc, #76]	; (80070e8 <USB_CoreReset+0x64>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d901      	bls.n	80070a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800709e:	2303      	movs	r3, #3
 80070a0:	e01b      	b.n	80070da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	691b      	ldr	r3, [r3, #16]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	daf2      	bge.n	8007090 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80070aa:	2300      	movs	r3, #0
 80070ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	691b      	ldr	r3, [r3, #16]
 80070b2:	f043 0201 	orr.w	r2, r3, #1
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	3301      	adds	r3, #1
 80070be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	4a09      	ldr	r2, [pc, #36]	; (80070e8 <USB_CoreReset+0x64>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d901      	bls.n	80070cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80070c8:	2303      	movs	r3, #3
 80070ca:	e006      	b.n	80070da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	691b      	ldr	r3, [r3, #16]
 80070d0:	f003 0301 	and.w	r3, r3, #1
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d0f0      	beq.n	80070ba <USB_CoreReset+0x36>

  return HAL_OK;
 80070d8:	2300      	movs	r3, #0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3714      	adds	r7, #20
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	00030d40 	.word	0x00030d40

080070ec <__NVIC_SetPriority>:
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	4603      	mov	r3, r0
 80070f4:	6039      	str	r1, [r7, #0]
 80070f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80070f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	db0a      	blt.n	8007116 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	b2da      	uxtb	r2, r3
 8007104:	490c      	ldr	r1, [pc, #48]	; (8007138 <__NVIC_SetPriority+0x4c>)
 8007106:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800710a:	0112      	lsls	r2, r2, #4
 800710c:	b2d2      	uxtb	r2, r2
 800710e:	440b      	add	r3, r1
 8007110:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007114:	e00a      	b.n	800712c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	b2da      	uxtb	r2, r3
 800711a:	4908      	ldr	r1, [pc, #32]	; (800713c <__NVIC_SetPriority+0x50>)
 800711c:	88fb      	ldrh	r3, [r7, #6]
 800711e:	f003 030f 	and.w	r3, r3, #15
 8007122:	3b04      	subs	r3, #4
 8007124:	0112      	lsls	r2, r2, #4
 8007126:	b2d2      	uxtb	r2, r2
 8007128:	440b      	add	r3, r1
 800712a:	761a      	strb	r2, [r3, #24]
}
 800712c:	bf00      	nop
 800712e:	370c      	adds	r7, #12
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr
 8007138:	e000e100 	.word	0xe000e100
 800713c:	e000ed00 	.word	0xe000ed00

08007140 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007140:	b580      	push	{r7, lr}
 8007142:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007144:	4b05      	ldr	r3, [pc, #20]	; (800715c <SysTick_Handler+0x1c>)
 8007146:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007148:	f001 fdb8 	bl	8008cbc <xTaskGetSchedulerState>
 800714c:	4603      	mov	r3, r0
 800714e:	2b01      	cmp	r3, #1
 8007150:	d001      	beq.n	8007156 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007152:	f002 fba1 	bl	8009898 <xPortSysTickHandler>
  }
}
 8007156:	bf00      	nop
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	e000e010 	.word	0xe000e010

08007160 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007160:	b580      	push	{r7, lr}
 8007162:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007164:	2100      	movs	r1, #0
 8007166:	f06f 0004 	mvn.w	r0, #4
 800716a:	f7ff ffbf 	bl	80070ec <__NVIC_SetPriority>
#endif
}
 800716e:	bf00      	nop
 8007170:	bd80      	pop	{r7, pc}
	...

08007174 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800717a:	f3ef 8305 	mrs	r3, IPSR
 800717e:	603b      	str	r3, [r7, #0]
  return(result);
 8007180:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007182:	2b00      	cmp	r3, #0
 8007184:	d003      	beq.n	800718e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007186:	f06f 0305 	mvn.w	r3, #5
 800718a:	607b      	str	r3, [r7, #4]
 800718c:	e00c      	b.n	80071a8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800718e:	4b0a      	ldr	r3, [pc, #40]	; (80071b8 <osKernelInitialize+0x44>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d105      	bne.n	80071a2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007196:	4b08      	ldr	r3, [pc, #32]	; (80071b8 <osKernelInitialize+0x44>)
 8007198:	2201      	movs	r2, #1
 800719a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800719c:	2300      	movs	r3, #0
 800719e:	607b      	str	r3, [r7, #4]
 80071a0:	e002      	b.n	80071a8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80071a2:	f04f 33ff 	mov.w	r3, #4294967295
 80071a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80071a8:	687b      	ldr	r3, [r7, #4]
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	370c      	adds	r7, #12
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr
 80071b6:	bf00      	nop
 80071b8:	240009a4 	.word	0x240009a4

080071bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071c2:	f3ef 8305 	mrs	r3, IPSR
 80071c6:	603b      	str	r3, [r7, #0]
  return(result);
 80071c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d003      	beq.n	80071d6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80071ce:	f06f 0305 	mvn.w	r3, #5
 80071d2:	607b      	str	r3, [r7, #4]
 80071d4:	e010      	b.n	80071f8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80071d6:	4b0b      	ldr	r3, [pc, #44]	; (8007204 <osKernelStart+0x48>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d109      	bne.n	80071f2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80071de:	f7ff ffbf 	bl	8007160 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80071e2:	4b08      	ldr	r3, [pc, #32]	; (8007204 <osKernelStart+0x48>)
 80071e4:	2202      	movs	r2, #2
 80071e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80071e8:	f001 f90c 	bl	8008404 <vTaskStartScheduler>
      stat = osOK;
 80071ec:	2300      	movs	r3, #0
 80071ee:	607b      	str	r3, [r7, #4]
 80071f0:	e002      	b.n	80071f8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80071f2:	f04f 33ff 	mov.w	r3, #4294967295
 80071f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80071f8:	687b      	ldr	r3, [r7, #4]
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3708      	adds	r7, #8
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	240009a4 	.word	0x240009a4

08007208 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007208:	b580      	push	{r7, lr}
 800720a:	b08e      	sub	sp, #56	; 0x38
 800720c:	af04      	add	r7, sp, #16
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007214:	2300      	movs	r3, #0
 8007216:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007218:	f3ef 8305 	mrs	r3, IPSR
 800721c:	617b      	str	r3, [r7, #20]
  return(result);
 800721e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007220:	2b00      	cmp	r3, #0
 8007222:	d17e      	bne.n	8007322 <osThreadNew+0x11a>
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d07b      	beq.n	8007322 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800722a:	2380      	movs	r3, #128	; 0x80
 800722c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800722e:	2318      	movs	r3, #24
 8007230:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007232:	2300      	movs	r3, #0
 8007234:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007236:	f04f 33ff 	mov.w	r3, #4294967295
 800723a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d045      	beq.n	80072ce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d002      	beq.n	8007250 <osThreadNew+0x48>
        name = attr->name;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	699b      	ldr	r3, [r3, #24]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d002      	beq.n	800725e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	699b      	ldr	r3, [r3, #24]
 800725c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d008      	beq.n	8007276 <osThreadNew+0x6e>
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	2b38      	cmp	r3, #56	; 0x38
 8007268:	d805      	bhi.n	8007276 <osThreadNew+0x6e>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	f003 0301 	and.w	r3, r3, #1
 8007272:	2b00      	cmp	r3, #0
 8007274:	d001      	beq.n	800727a <osThreadNew+0x72>
        return (NULL);
 8007276:	2300      	movs	r3, #0
 8007278:	e054      	b.n	8007324 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	695b      	ldr	r3, [r3, #20]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d003      	beq.n	800728a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	089b      	lsrs	r3, r3, #2
 8007288:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00e      	beq.n	80072b0 <osThreadNew+0xa8>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	2ba7      	cmp	r3, #167	; 0xa7
 8007298:	d90a      	bls.n	80072b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d006      	beq.n	80072b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	695b      	ldr	r3, [r3, #20]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d002      	beq.n	80072b0 <osThreadNew+0xa8>
        mem = 1;
 80072aa:	2301      	movs	r3, #1
 80072ac:	61bb      	str	r3, [r7, #24]
 80072ae:	e010      	b.n	80072d2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d10c      	bne.n	80072d2 <osThreadNew+0xca>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d108      	bne.n	80072d2 <osThreadNew+0xca>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d104      	bne.n	80072d2 <osThreadNew+0xca>
          mem = 0;
 80072c8:	2300      	movs	r3, #0
 80072ca:	61bb      	str	r3, [r7, #24]
 80072cc:	e001      	b.n	80072d2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80072ce:	2300      	movs	r3, #0
 80072d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d110      	bne.n	80072fa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80072e0:	9202      	str	r2, [sp, #8]
 80072e2:	9301      	str	r3, [sp, #4]
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	9300      	str	r3, [sp, #0]
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	6a3a      	ldr	r2, [r7, #32]
 80072ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80072ee:	68f8      	ldr	r0, [r7, #12]
 80072f0:	f000 fe9c 	bl	800802c <xTaskCreateStatic>
 80072f4:	4603      	mov	r3, r0
 80072f6:	613b      	str	r3, [r7, #16]
 80072f8:	e013      	b.n	8007322 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d110      	bne.n	8007322 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007300:	6a3b      	ldr	r3, [r7, #32]
 8007302:	b29a      	uxth	r2, r3
 8007304:	f107 0310 	add.w	r3, r7, #16
 8007308:	9301      	str	r3, [sp, #4]
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	9300      	str	r3, [sp, #0]
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007312:	68f8      	ldr	r0, [r7, #12]
 8007314:	f000 fee7 	bl	80080e6 <xTaskCreate>
 8007318:	4603      	mov	r3, r0
 800731a:	2b01      	cmp	r3, #1
 800731c:	d001      	beq.n	8007322 <osThreadNew+0x11a>
            hTask = NULL;
 800731e:	2300      	movs	r3, #0
 8007320:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007322:	693b      	ldr	r3, [r7, #16]
}
 8007324:	4618      	mov	r0, r3
 8007326:	3728      	adds	r7, #40	; 0x28
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007334:	f3ef 8305 	mrs	r3, IPSR
 8007338:	60bb      	str	r3, [r7, #8]
  return(result);
 800733a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800733c:	2b00      	cmp	r3, #0
 800733e:	d003      	beq.n	8007348 <osDelay+0x1c>
    stat = osErrorISR;
 8007340:	f06f 0305 	mvn.w	r3, #5
 8007344:	60fb      	str	r3, [r7, #12]
 8007346:	e007      	b.n	8007358 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007348:	2300      	movs	r3, #0
 800734a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d002      	beq.n	8007358 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f001 f822 	bl	800839c <vTaskDelay>
    }
  }

  return (stat);
 8007358:	68fb      	ldr	r3, [r7, #12]
}
 800735a:	4618      	mov	r0, r3
 800735c:	3710      	adds	r7, #16
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8007362:	b580      	push	{r7, lr}
 8007364:	b086      	sub	sp, #24
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800736a:	2300      	movs	r3, #0
 800736c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800736e:	f3ef 8305 	mrs	r3, IPSR
 8007372:	60fb      	str	r3, [r7, #12]
  return(result);
 8007374:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8007376:	2b00      	cmp	r3, #0
 8007378:	d12d      	bne.n	80073d6 <osEventFlagsNew+0x74>
    mem = -1;
 800737a:	f04f 33ff 	mov.w	r3, #4294967295
 800737e:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d015      	beq.n	80073b2 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d006      	beq.n	800739c <osEventFlagsNew+0x3a>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	2b1f      	cmp	r3, #31
 8007394:	d902      	bls.n	800739c <osEventFlagsNew+0x3a>
        mem = 1;
 8007396:	2301      	movs	r3, #1
 8007398:	613b      	str	r3, [r7, #16]
 800739a:	e00c      	b.n	80073b6 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d108      	bne.n	80073b6 <osEventFlagsNew+0x54>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d104      	bne.n	80073b6 <osEventFlagsNew+0x54>
          mem = 0;
 80073ac:	2300      	movs	r3, #0
 80073ae:	613b      	str	r3, [r7, #16]
 80073b0:	e001      	b.n	80073b6 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80073b2:	2300      	movs	r3, #0
 80073b4:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d106      	bne.n	80073ca <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	4618      	mov	r0, r3
 80073c2:	f000 f841 	bl	8007448 <xEventGroupCreateStatic>
 80073c6:	6178      	str	r0, [r7, #20]
 80073c8:	e005      	b.n	80073d6 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d102      	bne.n	80073d6 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 80073d0:	f000 f871 	bl	80074b6 <xEventGroupCreate>
 80073d4:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80073d6:	697b      	ldr	r3, [r7, #20]
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3718      	adds	r7, #24
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80073e0:	b480      	push	{r7}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	4a07      	ldr	r2, [pc, #28]	; (800740c <vApplicationGetIdleTaskMemory+0x2c>)
 80073f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	4a06      	ldr	r2, [pc, #24]	; (8007410 <vApplicationGetIdleTaskMemory+0x30>)
 80073f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2280      	movs	r2, #128	; 0x80
 80073fc:	601a      	str	r2, [r3, #0]
}
 80073fe:	bf00      	nop
 8007400:	3714      	adds	r7, #20
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr
 800740a:	bf00      	nop
 800740c:	240009a8 	.word	0x240009a8
 8007410:	24000a50 	.word	0x24000a50

08007414 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007414:	b480      	push	{r7}
 8007416:	b085      	sub	sp, #20
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	4a07      	ldr	r2, [pc, #28]	; (8007440 <vApplicationGetTimerTaskMemory+0x2c>)
 8007424:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	4a06      	ldr	r2, [pc, #24]	; (8007444 <vApplicationGetTimerTaskMemory+0x30>)
 800742a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007432:	601a      	str	r2, [r3, #0]
}
 8007434:	bf00      	nop
 8007436:	3714      	adds	r7, #20
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr
 8007440:	24000c50 	.word	0x24000c50
 8007444:	24000cf8 	.word	0x24000cf8

08007448 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8007448:	b580      	push	{r7, lr}
 800744a:	b086      	sub	sp, #24
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d10a      	bne.n	800746c <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800745a:	f383 8811 	msr	BASEPRI, r3
 800745e:	f3bf 8f6f 	isb	sy
 8007462:	f3bf 8f4f 	dsb	sy
 8007466:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007468:	bf00      	nop
 800746a:	e7fe      	b.n	800746a <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800746c:	2320      	movs	r3, #32
 800746e:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	2b20      	cmp	r3, #32
 8007474:	d00a      	beq.n	800748c <xEventGroupCreateStatic+0x44>
	__asm volatile
 8007476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800747a:	f383 8811 	msr	BASEPRI, r3
 800747e:	f3bf 8f6f 	isb	sy
 8007482:	f3bf 8f4f 	dsb	sy
 8007486:	60fb      	str	r3, [r7, #12]
}
 8007488:	bf00      	nop
 800748a:	e7fe      	b.n	800748a <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00a      	beq.n	80074ac <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	2200      	movs	r2, #0
 800749a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	3304      	adds	r3, #4
 80074a0:	4618      	mov	r0, r3
 80074a2:	f000 f822 	bl	80074ea <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	2201      	movs	r2, #1
 80074aa:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80074ac:	697b      	ldr	r3, [r7, #20]
	}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3718      	adds	r7, #24
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}

080074b6 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80074b6:	b580      	push	{r7, lr}
 80074b8:	b082      	sub	sp, #8
 80074ba:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80074bc:	2020      	movs	r0, #32
 80074be:	f002 fa7b 	bl	80099b8 <pvPortMalloc>
 80074c2:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00a      	beq.n	80074e0 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	3304      	adds	r3, #4
 80074d4:	4618      	mov	r0, r3
 80074d6:	f000 f808 	bl	80074ea <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80074e0:	687b      	ldr	r3, [r7, #4]
	}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3708      	adds	r7, #8
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}

080074ea <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80074ea:	b480      	push	{r7}
 80074ec:	b083      	sub	sp, #12
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f103 0208 	add.w	r2, r3, #8
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007502:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f103 0208 	add.w	r2, r3, #8
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f103 0208 	add.w	r2, r3, #8
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800751e:	bf00      	nop
 8007520:	370c      	adds	r7, #12
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr

0800752a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800752a:	b480      	push	{r7}
 800752c:	b083      	sub	sp, #12
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007538:	bf00      	nop
 800753a:	370c      	adds	r7, #12
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr

08007544 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007544:	b480      	push	{r7}
 8007546:	b085      	sub	sp, #20
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	689a      	ldr	r2, [r3, #8]
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	683a      	ldr	r2, [r7, #0]
 8007568:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	683a      	ldr	r2, [r7, #0]
 800756e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	1c5a      	adds	r2, r3, #1
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	601a      	str	r2, [r3, #0]
}
 8007580:	bf00      	nop
 8007582:	3714      	adds	r7, #20
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr

0800758c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800758c:	b480      	push	{r7}
 800758e:	b085      	sub	sp, #20
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a2:	d103      	bne.n	80075ac <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	691b      	ldr	r3, [r3, #16]
 80075a8:	60fb      	str	r3, [r7, #12]
 80075aa:	e00c      	b.n	80075c6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	3308      	adds	r3, #8
 80075b0:	60fb      	str	r3, [r7, #12]
 80075b2:	e002      	b.n	80075ba <vListInsert+0x2e>
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	60fb      	str	r3, [r7, #12]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	68ba      	ldr	r2, [r7, #8]
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d2f6      	bcs.n	80075b4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	685a      	ldr	r2, [r3, #4]
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	683a      	ldr	r2, [r7, #0]
 80075d4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	68fa      	ldr	r2, [r7, #12]
 80075da:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	683a      	ldr	r2, [r7, #0]
 80075e0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	1c5a      	adds	r2, r3, #1
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	601a      	str	r2, [r3, #0]
}
 80075f2:	bf00      	nop
 80075f4:	3714      	adds	r7, #20
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr

080075fe <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80075fe:	b480      	push	{r7}
 8007600:	b085      	sub	sp, #20
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	691b      	ldr	r3, [r3, #16]
 800760a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	6892      	ldr	r2, [r2, #8]
 8007614:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	6852      	ldr	r2, [r2, #4]
 800761e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	429a      	cmp	r2, r3
 8007628:	d103      	bne.n	8007632 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	689a      	ldr	r2, [r3, #8]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	1e5a      	subs	r2, r3, #1
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
}
 8007646:	4618      	mov	r0, r3
 8007648:	3714      	adds	r7, #20
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr
	...

08007654 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d10a      	bne.n	800767e <xQueueGenericReset+0x2a>
	__asm volatile
 8007668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766c:	f383 8811 	msr	BASEPRI, r3
 8007670:	f3bf 8f6f 	isb	sy
 8007674:	f3bf 8f4f 	dsb	sy
 8007678:	60bb      	str	r3, [r7, #8]
}
 800767a:	bf00      	nop
 800767c:	e7fe      	b.n	800767c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800767e:	f002 f879 	bl	8009774 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800768a:	68f9      	ldr	r1, [r7, #12]
 800768c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800768e:	fb01 f303 	mul.w	r3, r1, r3
 8007692:	441a      	add	r2, r3
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2200      	movs	r2, #0
 800769c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ae:	3b01      	subs	r3, #1
 80076b0:	68f9      	ldr	r1, [r7, #12]
 80076b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80076b4:	fb01 f303 	mul.w	r3, r1, r3
 80076b8:	441a      	add	r2, r3
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	22ff      	movs	r2, #255	; 0xff
 80076c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	22ff      	movs	r2, #255	; 0xff
 80076ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d114      	bne.n	80076fe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	691b      	ldr	r3, [r3, #16]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d01a      	beq.n	8007712 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	3310      	adds	r3, #16
 80076e0:	4618      	mov	r0, r3
 80076e2:	f001 f929 	bl	8008938 <xTaskRemoveFromEventList>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d012      	beq.n	8007712 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80076ec:	4b0c      	ldr	r3, [pc, #48]	; (8007720 <xQueueGenericReset+0xcc>)
 80076ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076f2:	601a      	str	r2, [r3, #0]
 80076f4:	f3bf 8f4f 	dsb	sy
 80076f8:	f3bf 8f6f 	isb	sy
 80076fc:	e009      	b.n	8007712 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	3310      	adds	r3, #16
 8007702:	4618      	mov	r0, r3
 8007704:	f7ff fef1 	bl	80074ea <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	3324      	adds	r3, #36	; 0x24
 800770c:	4618      	mov	r0, r3
 800770e:	f7ff feec 	bl	80074ea <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007712:	f002 f85f 	bl	80097d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007716:	2301      	movs	r3, #1
}
 8007718:	4618      	mov	r0, r3
 800771a:	3710      	adds	r7, #16
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}
 8007720:	e000ed04 	.word	0xe000ed04

08007724 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007724:	b580      	push	{r7, lr}
 8007726:	b08e      	sub	sp, #56	; 0x38
 8007728:	af02      	add	r7, sp, #8
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	607a      	str	r2, [r7, #4]
 8007730:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d10a      	bne.n	800774e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800773c:	f383 8811 	msr	BASEPRI, r3
 8007740:	f3bf 8f6f 	isb	sy
 8007744:	f3bf 8f4f 	dsb	sy
 8007748:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800774a:	bf00      	nop
 800774c:	e7fe      	b.n	800774c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d10a      	bne.n	800776a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007758:	f383 8811 	msr	BASEPRI, r3
 800775c:	f3bf 8f6f 	isb	sy
 8007760:	f3bf 8f4f 	dsb	sy
 8007764:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007766:	bf00      	nop
 8007768:	e7fe      	b.n	8007768 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d002      	beq.n	8007776 <xQueueGenericCreateStatic+0x52>
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d001      	beq.n	800777a <xQueueGenericCreateStatic+0x56>
 8007776:	2301      	movs	r3, #1
 8007778:	e000      	b.n	800777c <xQueueGenericCreateStatic+0x58>
 800777a:	2300      	movs	r3, #0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d10a      	bne.n	8007796 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007784:	f383 8811 	msr	BASEPRI, r3
 8007788:	f3bf 8f6f 	isb	sy
 800778c:	f3bf 8f4f 	dsb	sy
 8007790:	623b      	str	r3, [r7, #32]
}
 8007792:	bf00      	nop
 8007794:	e7fe      	b.n	8007794 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d102      	bne.n	80077a2 <xQueueGenericCreateStatic+0x7e>
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d101      	bne.n	80077a6 <xQueueGenericCreateStatic+0x82>
 80077a2:	2301      	movs	r3, #1
 80077a4:	e000      	b.n	80077a8 <xQueueGenericCreateStatic+0x84>
 80077a6:	2300      	movs	r3, #0
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d10a      	bne.n	80077c2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80077ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b0:	f383 8811 	msr	BASEPRI, r3
 80077b4:	f3bf 8f6f 	isb	sy
 80077b8:	f3bf 8f4f 	dsb	sy
 80077bc:	61fb      	str	r3, [r7, #28]
}
 80077be:	bf00      	nop
 80077c0:	e7fe      	b.n	80077c0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80077c2:	2350      	movs	r3, #80	; 0x50
 80077c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	2b50      	cmp	r3, #80	; 0x50
 80077ca:	d00a      	beq.n	80077e2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80077cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d0:	f383 8811 	msr	BASEPRI, r3
 80077d4:	f3bf 8f6f 	isb	sy
 80077d8:	f3bf 8f4f 	dsb	sy
 80077dc:	61bb      	str	r3, [r7, #24]
}
 80077de:	bf00      	nop
 80077e0:	e7fe      	b.n	80077e0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80077e2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80077e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d00d      	beq.n	800780a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80077ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f0:	2201      	movs	r2, #1
 80077f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80077f6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80077fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077fc:	9300      	str	r3, [sp, #0]
 80077fe:	4613      	mov	r3, r2
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	68b9      	ldr	r1, [r7, #8]
 8007804:	68f8      	ldr	r0, [r7, #12]
 8007806:	f000 f805 	bl	8007814 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800780a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800780c:	4618      	mov	r0, r3
 800780e:	3730      	adds	r7, #48	; 0x30
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	607a      	str	r2, [r7, #4]
 8007820:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d103      	bne.n	8007830 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	69ba      	ldr	r2, [r7, #24]
 800782c:	601a      	str	r2, [r3, #0]
 800782e:	e002      	b.n	8007836 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007836:	69bb      	ldr	r3, [r7, #24]
 8007838:	68fa      	ldr	r2, [r7, #12]
 800783a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	68ba      	ldr	r2, [r7, #8]
 8007840:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007842:	2101      	movs	r1, #1
 8007844:	69b8      	ldr	r0, [r7, #24]
 8007846:	f7ff ff05 	bl	8007654 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	78fa      	ldrb	r2, [r7, #3]
 800784e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007852:	bf00      	nop
 8007854:	3710      	adds	r7, #16
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
	...

0800785c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b08e      	sub	sp, #56	; 0x38
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	607a      	str	r2, [r7, #4]
 8007868:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800786a:	2300      	movs	r3, #0
 800786c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007874:	2b00      	cmp	r3, #0
 8007876:	d10a      	bne.n	800788e <xQueueGenericSend+0x32>
	__asm volatile
 8007878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800787c:	f383 8811 	msr	BASEPRI, r3
 8007880:	f3bf 8f6f 	isb	sy
 8007884:	f3bf 8f4f 	dsb	sy
 8007888:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800788a:	bf00      	nop
 800788c:	e7fe      	b.n	800788c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d103      	bne.n	800789c <xQueueGenericSend+0x40>
 8007894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007898:	2b00      	cmp	r3, #0
 800789a:	d101      	bne.n	80078a0 <xQueueGenericSend+0x44>
 800789c:	2301      	movs	r3, #1
 800789e:	e000      	b.n	80078a2 <xQueueGenericSend+0x46>
 80078a0:	2300      	movs	r3, #0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d10a      	bne.n	80078bc <xQueueGenericSend+0x60>
	__asm volatile
 80078a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078aa:	f383 8811 	msr	BASEPRI, r3
 80078ae:	f3bf 8f6f 	isb	sy
 80078b2:	f3bf 8f4f 	dsb	sy
 80078b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80078b8:	bf00      	nop
 80078ba:	e7fe      	b.n	80078ba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	2b02      	cmp	r3, #2
 80078c0:	d103      	bne.n	80078ca <xQueueGenericSend+0x6e>
 80078c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d101      	bne.n	80078ce <xQueueGenericSend+0x72>
 80078ca:	2301      	movs	r3, #1
 80078cc:	e000      	b.n	80078d0 <xQueueGenericSend+0x74>
 80078ce:	2300      	movs	r3, #0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d10a      	bne.n	80078ea <xQueueGenericSend+0x8e>
	__asm volatile
 80078d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d8:	f383 8811 	msr	BASEPRI, r3
 80078dc:	f3bf 8f6f 	isb	sy
 80078e0:	f3bf 8f4f 	dsb	sy
 80078e4:	623b      	str	r3, [r7, #32]
}
 80078e6:	bf00      	nop
 80078e8:	e7fe      	b.n	80078e8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80078ea:	f001 f9e7 	bl	8008cbc <xTaskGetSchedulerState>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d102      	bne.n	80078fa <xQueueGenericSend+0x9e>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d101      	bne.n	80078fe <xQueueGenericSend+0xa2>
 80078fa:	2301      	movs	r3, #1
 80078fc:	e000      	b.n	8007900 <xQueueGenericSend+0xa4>
 80078fe:	2300      	movs	r3, #0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d10a      	bne.n	800791a <xQueueGenericSend+0xbe>
	__asm volatile
 8007904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007908:	f383 8811 	msr	BASEPRI, r3
 800790c:	f3bf 8f6f 	isb	sy
 8007910:	f3bf 8f4f 	dsb	sy
 8007914:	61fb      	str	r3, [r7, #28]
}
 8007916:	bf00      	nop
 8007918:	e7fe      	b.n	8007918 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800791a:	f001 ff2b 	bl	8009774 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800791e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007920:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007926:	429a      	cmp	r2, r3
 8007928:	d302      	bcc.n	8007930 <xQueueGenericSend+0xd4>
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	2b02      	cmp	r3, #2
 800792e:	d129      	bne.n	8007984 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007930:	683a      	ldr	r2, [r7, #0]
 8007932:	68b9      	ldr	r1, [r7, #8]
 8007934:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007936:	f000 fa0b 	bl	8007d50 <prvCopyDataToQueue>
 800793a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800793c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007940:	2b00      	cmp	r3, #0
 8007942:	d010      	beq.n	8007966 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007946:	3324      	adds	r3, #36	; 0x24
 8007948:	4618      	mov	r0, r3
 800794a:	f000 fff5 	bl	8008938 <xTaskRemoveFromEventList>
 800794e:	4603      	mov	r3, r0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d013      	beq.n	800797c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007954:	4b3f      	ldr	r3, [pc, #252]	; (8007a54 <xQueueGenericSend+0x1f8>)
 8007956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800795a:	601a      	str	r2, [r3, #0]
 800795c:	f3bf 8f4f 	dsb	sy
 8007960:	f3bf 8f6f 	isb	sy
 8007964:	e00a      	b.n	800797c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007968:	2b00      	cmp	r3, #0
 800796a:	d007      	beq.n	800797c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800796c:	4b39      	ldr	r3, [pc, #228]	; (8007a54 <xQueueGenericSend+0x1f8>)
 800796e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007972:	601a      	str	r2, [r3, #0]
 8007974:	f3bf 8f4f 	dsb	sy
 8007978:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800797c:	f001 ff2a 	bl	80097d4 <vPortExitCritical>
				return pdPASS;
 8007980:	2301      	movs	r3, #1
 8007982:	e063      	b.n	8007a4c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d103      	bne.n	8007992 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800798a:	f001 ff23 	bl	80097d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800798e:	2300      	movs	r3, #0
 8007990:	e05c      	b.n	8007a4c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007994:	2b00      	cmp	r3, #0
 8007996:	d106      	bne.n	80079a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007998:	f107 0314 	add.w	r3, r7, #20
 800799c:	4618      	mov	r0, r3
 800799e:	f001 f82f 	bl	8008a00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80079a2:	2301      	movs	r3, #1
 80079a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80079a6:	f001 ff15 	bl	80097d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80079aa:	f000 fd9b 	bl	80084e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80079ae:	f001 fee1 	bl	8009774 <vPortEnterCritical>
 80079b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079b8:	b25b      	sxtb	r3, r3
 80079ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079be:	d103      	bne.n	80079c8 <xQueueGenericSend+0x16c>
 80079c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c2:	2200      	movs	r2, #0
 80079c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079ce:	b25b      	sxtb	r3, r3
 80079d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079d4:	d103      	bne.n	80079de <xQueueGenericSend+0x182>
 80079d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d8:	2200      	movs	r2, #0
 80079da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079de:	f001 fef9 	bl	80097d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80079e2:	1d3a      	adds	r2, r7, #4
 80079e4:	f107 0314 	add.w	r3, r7, #20
 80079e8:	4611      	mov	r1, r2
 80079ea:	4618      	mov	r0, r3
 80079ec:	f001 f81e 	bl	8008a2c <xTaskCheckForTimeOut>
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d124      	bne.n	8007a40 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80079f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079f8:	f000 faa2 	bl	8007f40 <prvIsQueueFull>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d018      	beq.n	8007a34 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a04:	3310      	adds	r3, #16
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	4611      	mov	r1, r2
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f000 ff44 	bl	8008898 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007a10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a12:	f000 fa2d 	bl	8007e70 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007a16:	f000 fd73 	bl	8008500 <xTaskResumeAll>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	f47f af7c 	bne.w	800791a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007a22:	4b0c      	ldr	r3, [pc, #48]	; (8007a54 <xQueueGenericSend+0x1f8>)
 8007a24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a28:	601a      	str	r2, [r3, #0]
 8007a2a:	f3bf 8f4f 	dsb	sy
 8007a2e:	f3bf 8f6f 	isb	sy
 8007a32:	e772      	b.n	800791a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007a34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a36:	f000 fa1b 	bl	8007e70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a3a:	f000 fd61 	bl	8008500 <xTaskResumeAll>
 8007a3e:	e76c      	b.n	800791a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007a40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a42:	f000 fa15 	bl	8007e70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a46:	f000 fd5b 	bl	8008500 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007a4a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3738      	adds	r7, #56	; 0x38
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}
 8007a54:	e000ed04 	.word	0xe000ed04

08007a58 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b090      	sub	sp, #64	; 0x40
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	607a      	str	r2, [r7, #4]
 8007a64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d10a      	bne.n	8007a86 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a74:	f383 8811 	msr	BASEPRI, r3
 8007a78:	f3bf 8f6f 	isb	sy
 8007a7c:	f3bf 8f4f 	dsb	sy
 8007a80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007a82:	bf00      	nop
 8007a84:	e7fe      	b.n	8007a84 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d103      	bne.n	8007a94 <xQueueGenericSendFromISR+0x3c>
 8007a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d101      	bne.n	8007a98 <xQueueGenericSendFromISR+0x40>
 8007a94:	2301      	movs	r3, #1
 8007a96:	e000      	b.n	8007a9a <xQueueGenericSendFromISR+0x42>
 8007a98:	2300      	movs	r3, #0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d10a      	bne.n	8007ab4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa2:	f383 8811 	msr	BASEPRI, r3
 8007aa6:	f3bf 8f6f 	isb	sy
 8007aaa:	f3bf 8f4f 	dsb	sy
 8007aae:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007ab0:	bf00      	nop
 8007ab2:	e7fe      	b.n	8007ab2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	2b02      	cmp	r3, #2
 8007ab8:	d103      	bne.n	8007ac2 <xQueueGenericSendFromISR+0x6a>
 8007aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d101      	bne.n	8007ac6 <xQueueGenericSendFromISR+0x6e>
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e000      	b.n	8007ac8 <xQueueGenericSendFromISR+0x70>
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d10a      	bne.n	8007ae2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad0:	f383 8811 	msr	BASEPRI, r3
 8007ad4:	f3bf 8f6f 	isb	sy
 8007ad8:	f3bf 8f4f 	dsb	sy
 8007adc:	623b      	str	r3, [r7, #32]
}
 8007ade:	bf00      	nop
 8007ae0:	e7fe      	b.n	8007ae0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ae2:	f001 ff29 	bl	8009938 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007ae6:	f3ef 8211 	mrs	r2, BASEPRI
 8007aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aee:	f383 8811 	msr	BASEPRI, r3
 8007af2:	f3bf 8f6f 	isb	sy
 8007af6:	f3bf 8f4f 	dsb	sy
 8007afa:	61fa      	str	r2, [r7, #28]
 8007afc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007afe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007b00:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d302      	bcc.n	8007b14 <xQueueGenericSendFromISR+0xbc>
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	2b02      	cmp	r3, #2
 8007b12:	d12f      	bne.n	8007b74 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b22:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007b24:	683a      	ldr	r2, [r7, #0]
 8007b26:	68b9      	ldr	r1, [r7, #8]
 8007b28:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007b2a:	f000 f911 	bl	8007d50 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007b2e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b36:	d112      	bne.n	8007b5e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d016      	beq.n	8007b6e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b42:	3324      	adds	r3, #36	; 0x24
 8007b44:	4618      	mov	r0, r3
 8007b46:	f000 fef7 	bl	8008938 <xTaskRemoveFromEventList>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d00e      	beq.n	8007b6e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d00b      	beq.n	8007b6e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	601a      	str	r2, [r3, #0]
 8007b5c:	e007      	b.n	8007b6e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007b5e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007b62:	3301      	adds	r3, #1
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	b25a      	sxtb	r2, r3
 8007b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007b72:	e001      	b.n	8007b78 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007b74:	2300      	movs	r3, #0
 8007b76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b7a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007b82:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3740      	adds	r7, #64	; 0x40
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
	...

08007b90 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b08c      	sub	sp, #48	; 0x30
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	60b9      	str	r1, [r7, #8]
 8007b9a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d10a      	bne.n	8007bc0 <xQueueReceive+0x30>
	__asm volatile
 8007baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bae:	f383 8811 	msr	BASEPRI, r3
 8007bb2:	f3bf 8f6f 	isb	sy
 8007bb6:	f3bf 8f4f 	dsb	sy
 8007bba:	623b      	str	r3, [r7, #32]
}
 8007bbc:	bf00      	nop
 8007bbe:	e7fe      	b.n	8007bbe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d103      	bne.n	8007bce <xQueueReceive+0x3e>
 8007bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d101      	bne.n	8007bd2 <xQueueReceive+0x42>
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e000      	b.n	8007bd4 <xQueueReceive+0x44>
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d10a      	bne.n	8007bee <xQueueReceive+0x5e>
	__asm volatile
 8007bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bdc:	f383 8811 	msr	BASEPRI, r3
 8007be0:	f3bf 8f6f 	isb	sy
 8007be4:	f3bf 8f4f 	dsb	sy
 8007be8:	61fb      	str	r3, [r7, #28]
}
 8007bea:	bf00      	nop
 8007bec:	e7fe      	b.n	8007bec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007bee:	f001 f865 	bl	8008cbc <xTaskGetSchedulerState>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d102      	bne.n	8007bfe <xQueueReceive+0x6e>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d101      	bne.n	8007c02 <xQueueReceive+0x72>
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e000      	b.n	8007c04 <xQueueReceive+0x74>
 8007c02:	2300      	movs	r3, #0
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d10a      	bne.n	8007c1e <xQueueReceive+0x8e>
	__asm volatile
 8007c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c0c:	f383 8811 	msr	BASEPRI, r3
 8007c10:	f3bf 8f6f 	isb	sy
 8007c14:	f3bf 8f4f 	dsb	sy
 8007c18:	61bb      	str	r3, [r7, #24]
}
 8007c1a:	bf00      	nop
 8007c1c:	e7fe      	b.n	8007c1c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c1e:	f001 fda9 	bl	8009774 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c26:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d01f      	beq.n	8007c6e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007c2e:	68b9      	ldr	r1, [r7, #8]
 8007c30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c32:	f000 f8f7 	bl	8007e24 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c38:	1e5a      	subs	r2, r3, #1
 8007c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d00f      	beq.n	8007c66 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c48:	3310      	adds	r3, #16
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f000 fe74 	bl	8008938 <xTaskRemoveFromEventList>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d007      	beq.n	8007c66 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007c56:	4b3d      	ldr	r3, [pc, #244]	; (8007d4c <xQueueReceive+0x1bc>)
 8007c58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c5c:	601a      	str	r2, [r3, #0]
 8007c5e:	f3bf 8f4f 	dsb	sy
 8007c62:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007c66:	f001 fdb5 	bl	80097d4 <vPortExitCritical>
				return pdPASS;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e069      	b.n	8007d42 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d103      	bne.n	8007c7c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007c74:	f001 fdae 	bl	80097d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	e062      	b.n	8007d42 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d106      	bne.n	8007c90 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c82:	f107 0310 	add.w	r3, r7, #16
 8007c86:	4618      	mov	r0, r3
 8007c88:	f000 feba 	bl	8008a00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c90:	f001 fda0 	bl	80097d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c94:	f000 fc26 	bl	80084e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c98:	f001 fd6c 	bl	8009774 <vPortEnterCritical>
 8007c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ca2:	b25b      	sxtb	r3, r3
 8007ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ca8:	d103      	bne.n	8007cb2 <xQueueReceive+0x122>
 8007caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cac:	2200      	movs	r2, #0
 8007cae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007cb8:	b25b      	sxtb	r3, r3
 8007cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cbe:	d103      	bne.n	8007cc8 <xQueueReceive+0x138>
 8007cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007cc8:	f001 fd84 	bl	80097d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ccc:	1d3a      	adds	r2, r7, #4
 8007cce:	f107 0310 	add.w	r3, r7, #16
 8007cd2:	4611      	mov	r1, r2
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f000 fea9 	bl	8008a2c <xTaskCheckForTimeOut>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d123      	bne.n	8007d28 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ce0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ce2:	f000 f917 	bl	8007f14 <prvIsQueueEmpty>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d017      	beq.n	8007d1c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cee:	3324      	adds	r3, #36	; 0x24
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	4611      	mov	r1, r2
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f000 fdcf 	bl	8008898 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007cfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cfc:	f000 f8b8 	bl	8007e70 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007d00:	f000 fbfe 	bl	8008500 <xTaskResumeAll>
 8007d04:	4603      	mov	r3, r0
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d189      	bne.n	8007c1e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007d0a:	4b10      	ldr	r3, [pc, #64]	; (8007d4c <xQueueReceive+0x1bc>)
 8007d0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d10:	601a      	str	r2, [r3, #0]
 8007d12:	f3bf 8f4f 	dsb	sy
 8007d16:	f3bf 8f6f 	isb	sy
 8007d1a:	e780      	b.n	8007c1e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007d1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d1e:	f000 f8a7 	bl	8007e70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d22:	f000 fbed 	bl	8008500 <xTaskResumeAll>
 8007d26:	e77a      	b.n	8007c1e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007d28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d2a:	f000 f8a1 	bl	8007e70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d2e:	f000 fbe7 	bl	8008500 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d34:	f000 f8ee 	bl	8007f14 <prvIsQueueEmpty>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	f43f af6f 	beq.w	8007c1e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007d40:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3730      	adds	r7, #48	; 0x30
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	e000ed04 	.word	0xe000ed04

08007d50 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b086      	sub	sp, #24
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d64:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d10d      	bne.n	8007d8a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d14d      	bne.n	8007e12 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f000 ffbc 	bl	8008cf8 <xTaskPriorityDisinherit>
 8007d80:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2200      	movs	r2, #0
 8007d86:	609a      	str	r2, [r3, #8]
 8007d88:	e043      	b.n	8007e12 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d119      	bne.n	8007dc4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6858      	ldr	r0, [r3, #4]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d98:	461a      	mov	r2, r3
 8007d9a:	68b9      	ldr	r1, [r7, #8]
 8007d9c:	f002 fe2d 	bl	800a9fa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	685a      	ldr	r2, [r3, #4]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da8:	441a      	add	r2, r3
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	685a      	ldr	r2, [r3, #4]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d32b      	bcc.n	8007e12 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	605a      	str	r2, [r3, #4]
 8007dc2:	e026      	b.n	8007e12 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	68d8      	ldr	r0, [r3, #12]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dcc:	461a      	mov	r2, r3
 8007dce:	68b9      	ldr	r1, [r7, #8]
 8007dd0:	f002 fe13 	bl	800a9fa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	68da      	ldr	r2, [r3, #12]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ddc:	425b      	negs	r3, r3
 8007dde:	441a      	add	r2, r3
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	68da      	ldr	r2, [r3, #12]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d207      	bcs.n	8007e00 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	689a      	ldr	r2, [r3, #8]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df8:	425b      	negs	r3, r3
 8007dfa:	441a      	add	r2, r3
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2b02      	cmp	r3, #2
 8007e04:	d105      	bne.n	8007e12 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d002      	beq.n	8007e12 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	3b01      	subs	r3, #1
 8007e10:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	1c5a      	adds	r2, r3, #1
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007e1a:	697b      	ldr	r3, [r7, #20]
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3718      	adds	r7, #24
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d018      	beq.n	8007e68 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	68da      	ldr	r2, [r3, #12]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e3e:	441a      	add	r2, r3
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	68da      	ldr	r2, [r3, #12]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d303      	bcc.n	8007e58 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	68d9      	ldr	r1, [r3, #12]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e60:	461a      	mov	r2, r3
 8007e62:	6838      	ldr	r0, [r7, #0]
 8007e64:	f002 fdc9 	bl	800a9fa <memcpy>
	}
}
 8007e68:	bf00      	nop
 8007e6a:	3708      	adds	r7, #8
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007e78:	f001 fc7c 	bl	8009774 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e82:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e84:	e011      	b.n	8007eaa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d012      	beq.n	8007eb4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	3324      	adds	r3, #36	; 0x24
 8007e92:	4618      	mov	r0, r3
 8007e94:	f000 fd50 	bl	8008938 <xTaskRemoveFromEventList>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d001      	beq.n	8007ea2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007e9e:	f000 fe27 	bl	8008af0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007ea2:	7bfb      	ldrb	r3, [r7, #15]
 8007ea4:	3b01      	subs	r3, #1
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	dce9      	bgt.n	8007e86 <prvUnlockQueue+0x16>
 8007eb2:	e000      	b.n	8007eb6 <prvUnlockQueue+0x46>
					break;
 8007eb4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	22ff      	movs	r2, #255	; 0xff
 8007eba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007ebe:	f001 fc89 	bl	80097d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007ec2:	f001 fc57 	bl	8009774 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ecc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ece:	e011      	b.n	8007ef4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	691b      	ldr	r3, [r3, #16]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d012      	beq.n	8007efe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	3310      	adds	r3, #16
 8007edc:	4618      	mov	r0, r3
 8007ede:	f000 fd2b 	bl	8008938 <xTaskRemoveFromEventList>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d001      	beq.n	8007eec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007ee8:	f000 fe02 	bl	8008af0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007eec:	7bbb      	ldrb	r3, [r7, #14]
 8007eee:	3b01      	subs	r3, #1
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ef4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	dce9      	bgt.n	8007ed0 <prvUnlockQueue+0x60>
 8007efc:	e000      	b.n	8007f00 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007efe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	22ff      	movs	r2, #255	; 0xff
 8007f04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007f08:	f001 fc64 	bl	80097d4 <vPortExitCritical>
}
 8007f0c:	bf00      	nop
 8007f0e:	3710      	adds	r7, #16
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f1c:	f001 fc2a 	bl	8009774 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d102      	bne.n	8007f2e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	60fb      	str	r3, [r7, #12]
 8007f2c:	e001      	b.n	8007f32 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007f32:	f001 fc4f 	bl	80097d4 <vPortExitCritical>

	return xReturn;
 8007f36:	68fb      	ldr	r3, [r7, #12]
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3710      	adds	r7, #16
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b084      	sub	sp, #16
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f48:	f001 fc14 	bl	8009774 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d102      	bne.n	8007f5e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	60fb      	str	r3, [r7, #12]
 8007f5c:	e001      	b.n	8007f62 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007f62:	f001 fc37 	bl	80097d4 <vPortExitCritical>

	return xReturn;
 8007f66:	68fb      	ldr	r3, [r7, #12]
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3710      	adds	r7, #16
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007f70:	b480      	push	{r7}
 8007f72:	b085      	sub	sp, #20
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	60fb      	str	r3, [r7, #12]
 8007f7e:	e014      	b.n	8007faa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007f80:	4a0f      	ldr	r2, [pc, #60]	; (8007fc0 <vQueueAddToRegistry+0x50>)
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d10b      	bne.n	8007fa4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007f8c:	490c      	ldr	r1, [pc, #48]	; (8007fc0 <vQueueAddToRegistry+0x50>)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	683a      	ldr	r2, [r7, #0]
 8007f92:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007f96:	4a0a      	ldr	r2, [pc, #40]	; (8007fc0 <vQueueAddToRegistry+0x50>)
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	00db      	lsls	r3, r3, #3
 8007f9c:	4413      	add	r3, r2
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007fa2:	e006      	b.n	8007fb2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	60fb      	str	r3, [r7, #12]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2b07      	cmp	r3, #7
 8007fae:	d9e7      	bls.n	8007f80 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007fb0:	bf00      	nop
 8007fb2:	bf00      	nop
 8007fb4:	3714      	adds	r7, #20
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop
 8007fc0:	240010f8 	.word	0x240010f8

08007fc4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b086      	sub	sp, #24
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	60b9      	str	r1, [r7, #8]
 8007fce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007fd4:	f001 fbce 	bl	8009774 <vPortEnterCritical>
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007fde:	b25b      	sxtb	r3, r3
 8007fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fe4:	d103      	bne.n	8007fee <vQueueWaitForMessageRestricted+0x2a>
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ff4:	b25b      	sxtb	r3, r3
 8007ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ffa:	d103      	bne.n	8008004 <vQueueWaitForMessageRestricted+0x40>
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	2200      	movs	r2, #0
 8008000:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008004:	f001 fbe6 	bl	80097d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800800c:	2b00      	cmp	r3, #0
 800800e:	d106      	bne.n	800801e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	3324      	adds	r3, #36	; 0x24
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	68b9      	ldr	r1, [r7, #8]
 8008018:	4618      	mov	r0, r3
 800801a:	f000 fc61 	bl	80088e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800801e:	6978      	ldr	r0, [r7, #20]
 8008020:	f7ff ff26 	bl	8007e70 <prvUnlockQueue>
	}
 8008024:	bf00      	nop
 8008026:	3718      	adds	r7, #24
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800802c:	b580      	push	{r7, lr}
 800802e:	b08e      	sub	sp, #56	; 0x38
 8008030:	af04      	add	r7, sp, #16
 8008032:	60f8      	str	r0, [r7, #12]
 8008034:	60b9      	str	r1, [r7, #8]
 8008036:	607a      	str	r2, [r7, #4]
 8008038:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800803a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800803c:	2b00      	cmp	r3, #0
 800803e:	d10a      	bne.n	8008056 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008044:	f383 8811 	msr	BASEPRI, r3
 8008048:	f3bf 8f6f 	isb	sy
 800804c:	f3bf 8f4f 	dsb	sy
 8008050:	623b      	str	r3, [r7, #32]
}
 8008052:	bf00      	nop
 8008054:	e7fe      	b.n	8008054 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008058:	2b00      	cmp	r3, #0
 800805a:	d10a      	bne.n	8008072 <xTaskCreateStatic+0x46>
	__asm volatile
 800805c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008060:	f383 8811 	msr	BASEPRI, r3
 8008064:	f3bf 8f6f 	isb	sy
 8008068:	f3bf 8f4f 	dsb	sy
 800806c:	61fb      	str	r3, [r7, #28]
}
 800806e:	bf00      	nop
 8008070:	e7fe      	b.n	8008070 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008072:	23a8      	movs	r3, #168	; 0xa8
 8008074:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	2ba8      	cmp	r3, #168	; 0xa8
 800807a:	d00a      	beq.n	8008092 <xTaskCreateStatic+0x66>
	__asm volatile
 800807c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008080:	f383 8811 	msr	BASEPRI, r3
 8008084:	f3bf 8f6f 	isb	sy
 8008088:	f3bf 8f4f 	dsb	sy
 800808c:	61bb      	str	r3, [r7, #24]
}
 800808e:	bf00      	nop
 8008090:	e7fe      	b.n	8008090 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008092:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008096:	2b00      	cmp	r3, #0
 8008098:	d01e      	beq.n	80080d8 <xTaskCreateStatic+0xac>
 800809a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800809c:	2b00      	cmp	r3, #0
 800809e:	d01b      	beq.n	80080d8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80080a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80080a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80080aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ac:	2202      	movs	r2, #2
 80080ae:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80080b2:	2300      	movs	r3, #0
 80080b4:	9303      	str	r3, [sp, #12]
 80080b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b8:	9302      	str	r3, [sp, #8]
 80080ba:	f107 0314 	add.w	r3, r7, #20
 80080be:	9301      	str	r3, [sp, #4]
 80080c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c2:	9300      	str	r3, [sp, #0]
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	68b9      	ldr	r1, [r7, #8]
 80080ca:	68f8      	ldr	r0, [r7, #12]
 80080cc:	f000 f850 	bl	8008170 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80080d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80080d2:	f000 f8f3 	bl	80082bc <prvAddNewTaskToReadyList>
 80080d6:	e001      	b.n	80080dc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80080d8:	2300      	movs	r3, #0
 80080da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80080dc:	697b      	ldr	r3, [r7, #20]
	}
 80080de:	4618      	mov	r0, r3
 80080e0:	3728      	adds	r7, #40	; 0x28
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80080e6:	b580      	push	{r7, lr}
 80080e8:	b08c      	sub	sp, #48	; 0x30
 80080ea:	af04      	add	r7, sp, #16
 80080ec:	60f8      	str	r0, [r7, #12]
 80080ee:	60b9      	str	r1, [r7, #8]
 80080f0:	603b      	str	r3, [r7, #0]
 80080f2:	4613      	mov	r3, r2
 80080f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80080f6:	88fb      	ldrh	r3, [r7, #6]
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	4618      	mov	r0, r3
 80080fc:	f001 fc5c 	bl	80099b8 <pvPortMalloc>
 8008100:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d00e      	beq.n	8008126 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008108:	20a8      	movs	r0, #168	; 0xa8
 800810a:	f001 fc55 	bl	80099b8 <pvPortMalloc>
 800810e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d003      	beq.n	800811e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008116:	69fb      	ldr	r3, [r7, #28]
 8008118:	697a      	ldr	r2, [r7, #20]
 800811a:	631a      	str	r2, [r3, #48]	; 0x30
 800811c:	e005      	b.n	800812a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800811e:	6978      	ldr	r0, [r7, #20]
 8008120:	f001 fd16 	bl	8009b50 <vPortFree>
 8008124:	e001      	b.n	800812a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008126:	2300      	movs	r3, #0
 8008128:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800812a:	69fb      	ldr	r3, [r7, #28]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d017      	beq.n	8008160 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	2200      	movs	r2, #0
 8008134:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008138:	88fa      	ldrh	r2, [r7, #6]
 800813a:	2300      	movs	r3, #0
 800813c:	9303      	str	r3, [sp, #12]
 800813e:	69fb      	ldr	r3, [r7, #28]
 8008140:	9302      	str	r3, [sp, #8]
 8008142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008144:	9301      	str	r3, [sp, #4]
 8008146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008148:	9300      	str	r3, [sp, #0]
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	68b9      	ldr	r1, [r7, #8]
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	f000 f80e 	bl	8008170 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008154:	69f8      	ldr	r0, [r7, #28]
 8008156:	f000 f8b1 	bl	80082bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800815a:	2301      	movs	r3, #1
 800815c:	61bb      	str	r3, [r7, #24]
 800815e:	e002      	b.n	8008166 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008160:	f04f 33ff 	mov.w	r3, #4294967295
 8008164:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008166:	69bb      	ldr	r3, [r7, #24]
	}
 8008168:	4618      	mov	r0, r3
 800816a:	3720      	adds	r7, #32
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b088      	sub	sp, #32
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	607a      	str	r2, [r7, #4]
 800817c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800817e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008180:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	461a      	mov	r2, r3
 8008188:	21a5      	movs	r1, #165	; 0xa5
 800818a:	f002 fb60 	bl	800a84e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800818e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008190:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008192:	6879      	ldr	r1, [r7, #4]
 8008194:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008198:	440b      	add	r3, r1
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	4413      	add	r3, r2
 800819e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80081a0:	69bb      	ldr	r3, [r7, #24]
 80081a2:	f023 0307 	bic.w	r3, r3, #7
 80081a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80081a8:	69bb      	ldr	r3, [r7, #24]
 80081aa:	f003 0307 	and.w	r3, r3, #7
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d00a      	beq.n	80081c8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80081b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b6:	f383 8811 	msr	BASEPRI, r3
 80081ba:	f3bf 8f6f 	isb	sy
 80081be:	f3bf 8f4f 	dsb	sy
 80081c2:	617b      	str	r3, [r7, #20]
}
 80081c4:	bf00      	nop
 80081c6:	e7fe      	b.n	80081c6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d01f      	beq.n	800820e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80081ce:	2300      	movs	r3, #0
 80081d0:	61fb      	str	r3, [r7, #28]
 80081d2:	e012      	b.n	80081fa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80081d4:	68ba      	ldr	r2, [r7, #8]
 80081d6:	69fb      	ldr	r3, [r7, #28]
 80081d8:	4413      	add	r3, r2
 80081da:	7819      	ldrb	r1, [r3, #0]
 80081dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	4413      	add	r3, r2
 80081e2:	3334      	adds	r3, #52	; 0x34
 80081e4:	460a      	mov	r2, r1
 80081e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80081e8:	68ba      	ldr	r2, [r7, #8]
 80081ea:	69fb      	ldr	r3, [r7, #28]
 80081ec:	4413      	add	r3, r2
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d006      	beq.n	8008202 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80081f4:	69fb      	ldr	r3, [r7, #28]
 80081f6:	3301      	adds	r3, #1
 80081f8:	61fb      	str	r3, [r7, #28]
 80081fa:	69fb      	ldr	r3, [r7, #28]
 80081fc:	2b0f      	cmp	r3, #15
 80081fe:	d9e9      	bls.n	80081d4 <prvInitialiseNewTask+0x64>
 8008200:	e000      	b.n	8008204 <prvInitialiseNewTask+0x94>
			{
				break;
 8008202:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008206:	2200      	movs	r2, #0
 8008208:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800820c:	e003      	b.n	8008216 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800820e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008210:	2200      	movs	r2, #0
 8008212:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008218:	2b37      	cmp	r3, #55	; 0x37
 800821a:	d901      	bls.n	8008220 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800821c:	2337      	movs	r3, #55	; 0x37
 800821e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008222:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008224:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008228:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800822a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800822c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822e:	2200      	movs	r2, #0
 8008230:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008234:	3304      	adds	r3, #4
 8008236:	4618      	mov	r0, r3
 8008238:	f7ff f977 	bl	800752a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800823c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800823e:	3318      	adds	r3, #24
 8008240:	4618      	mov	r0, r3
 8008242:	f7ff f972 	bl	800752a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800824a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800824c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800824e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008254:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800825a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800825c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800825e:	2200      	movs	r2, #0
 8008260:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008266:	2200      	movs	r2, #0
 8008268:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800826c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826e:	3354      	adds	r3, #84	; 0x54
 8008270:	224c      	movs	r2, #76	; 0x4c
 8008272:	2100      	movs	r1, #0
 8008274:	4618      	mov	r0, r3
 8008276:	f002 faea 	bl	800a84e <memset>
 800827a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827c:	4a0c      	ldr	r2, [pc, #48]	; (80082b0 <prvInitialiseNewTask+0x140>)
 800827e:	659a      	str	r2, [r3, #88]	; 0x58
 8008280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008282:	4a0c      	ldr	r2, [pc, #48]	; (80082b4 <prvInitialiseNewTask+0x144>)
 8008284:	65da      	str	r2, [r3, #92]	; 0x5c
 8008286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008288:	4a0b      	ldr	r2, [pc, #44]	; (80082b8 <prvInitialiseNewTask+0x148>)
 800828a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800828c:	683a      	ldr	r2, [r7, #0]
 800828e:	68f9      	ldr	r1, [r7, #12]
 8008290:	69b8      	ldr	r0, [r7, #24]
 8008292:	f001 f941 	bl	8009518 <pxPortInitialiseStack>
 8008296:	4602      	mov	r2, r0
 8008298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800829a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800829c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d002      	beq.n	80082a8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80082a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082a6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082a8:	bf00      	nop
 80082aa:	3720      	adds	r7, #32
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	2400538c 	.word	0x2400538c
 80082b4:	240053f4 	.word	0x240053f4
 80082b8:	2400545c 	.word	0x2400545c

080082bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80082c4:	f001 fa56 	bl	8009774 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80082c8:	4b2d      	ldr	r3, [pc, #180]	; (8008380 <prvAddNewTaskToReadyList+0xc4>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	3301      	adds	r3, #1
 80082ce:	4a2c      	ldr	r2, [pc, #176]	; (8008380 <prvAddNewTaskToReadyList+0xc4>)
 80082d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80082d2:	4b2c      	ldr	r3, [pc, #176]	; (8008384 <prvAddNewTaskToReadyList+0xc8>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d109      	bne.n	80082ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80082da:	4a2a      	ldr	r2, [pc, #168]	; (8008384 <prvAddNewTaskToReadyList+0xc8>)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80082e0:	4b27      	ldr	r3, [pc, #156]	; (8008380 <prvAddNewTaskToReadyList+0xc4>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d110      	bne.n	800830a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80082e8:	f000 fc26 	bl	8008b38 <prvInitialiseTaskLists>
 80082ec:	e00d      	b.n	800830a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80082ee:	4b26      	ldr	r3, [pc, #152]	; (8008388 <prvAddNewTaskToReadyList+0xcc>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d109      	bne.n	800830a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80082f6:	4b23      	ldr	r3, [pc, #140]	; (8008384 <prvAddNewTaskToReadyList+0xc8>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008300:	429a      	cmp	r2, r3
 8008302:	d802      	bhi.n	800830a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008304:	4a1f      	ldr	r2, [pc, #124]	; (8008384 <prvAddNewTaskToReadyList+0xc8>)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800830a:	4b20      	ldr	r3, [pc, #128]	; (800838c <prvAddNewTaskToReadyList+0xd0>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	3301      	adds	r3, #1
 8008310:	4a1e      	ldr	r2, [pc, #120]	; (800838c <prvAddNewTaskToReadyList+0xd0>)
 8008312:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008314:	4b1d      	ldr	r3, [pc, #116]	; (800838c <prvAddNewTaskToReadyList+0xd0>)
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008320:	4b1b      	ldr	r3, [pc, #108]	; (8008390 <prvAddNewTaskToReadyList+0xd4>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	429a      	cmp	r2, r3
 8008326:	d903      	bls.n	8008330 <prvAddNewTaskToReadyList+0x74>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800832c:	4a18      	ldr	r2, [pc, #96]	; (8008390 <prvAddNewTaskToReadyList+0xd4>)
 800832e:	6013      	str	r3, [r2, #0]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008334:	4613      	mov	r3, r2
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	4413      	add	r3, r2
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	4a15      	ldr	r2, [pc, #84]	; (8008394 <prvAddNewTaskToReadyList+0xd8>)
 800833e:	441a      	add	r2, r3
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	3304      	adds	r3, #4
 8008344:	4619      	mov	r1, r3
 8008346:	4610      	mov	r0, r2
 8008348:	f7ff f8fc 	bl	8007544 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800834c:	f001 fa42 	bl	80097d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008350:	4b0d      	ldr	r3, [pc, #52]	; (8008388 <prvAddNewTaskToReadyList+0xcc>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d00e      	beq.n	8008376 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008358:	4b0a      	ldr	r3, [pc, #40]	; (8008384 <prvAddNewTaskToReadyList+0xc8>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008362:	429a      	cmp	r2, r3
 8008364:	d207      	bcs.n	8008376 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008366:	4b0c      	ldr	r3, [pc, #48]	; (8008398 <prvAddNewTaskToReadyList+0xdc>)
 8008368:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800836c:	601a      	str	r2, [r3, #0]
 800836e:	f3bf 8f4f 	dsb	sy
 8008372:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008376:	bf00      	nop
 8008378:	3708      	adds	r7, #8
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
 800837e:	bf00      	nop
 8008380:	2400160c 	.word	0x2400160c
 8008384:	24001138 	.word	0x24001138
 8008388:	24001618 	.word	0x24001618
 800838c:	24001628 	.word	0x24001628
 8008390:	24001614 	.word	0x24001614
 8008394:	2400113c 	.word	0x2400113c
 8008398:	e000ed04 	.word	0xe000ed04

0800839c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80083a4:	2300      	movs	r3, #0
 80083a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d017      	beq.n	80083de <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80083ae:	4b13      	ldr	r3, [pc, #76]	; (80083fc <vTaskDelay+0x60>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d00a      	beq.n	80083cc <vTaskDelay+0x30>
	__asm volatile
 80083b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ba:	f383 8811 	msr	BASEPRI, r3
 80083be:	f3bf 8f6f 	isb	sy
 80083c2:	f3bf 8f4f 	dsb	sy
 80083c6:	60bb      	str	r3, [r7, #8]
}
 80083c8:	bf00      	nop
 80083ca:	e7fe      	b.n	80083ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80083cc:	f000 f88a 	bl	80084e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80083d0:	2100      	movs	r1, #0
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 fcfe 	bl	8008dd4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80083d8:	f000 f892 	bl	8008500 <xTaskResumeAll>
 80083dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d107      	bne.n	80083f4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80083e4:	4b06      	ldr	r3, [pc, #24]	; (8008400 <vTaskDelay+0x64>)
 80083e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083ea:	601a      	str	r2, [r3, #0]
 80083ec:	f3bf 8f4f 	dsb	sy
 80083f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80083f4:	bf00      	nop
 80083f6:	3710      	adds	r7, #16
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}
 80083fc:	24001634 	.word	0x24001634
 8008400:	e000ed04 	.word	0xe000ed04

08008404 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b08a      	sub	sp, #40	; 0x28
 8008408:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800840a:	2300      	movs	r3, #0
 800840c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800840e:	2300      	movs	r3, #0
 8008410:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008412:	463a      	mov	r2, r7
 8008414:	1d39      	adds	r1, r7, #4
 8008416:	f107 0308 	add.w	r3, r7, #8
 800841a:	4618      	mov	r0, r3
 800841c:	f7fe ffe0 	bl	80073e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008420:	6839      	ldr	r1, [r7, #0]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	68ba      	ldr	r2, [r7, #8]
 8008426:	9202      	str	r2, [sp, #8]
 8008428:	9301      	str	r3, [sp, #4]
 800842a:	2300      	movs	r3, #0
 800842c:	9300      	str	r3, [sp, #0]
 800842e:	2300      	movs	r3, #0
 8008430:	460a      	mov	r2, r1
 8008432:	4924      	ldr	r1, [pc, #144]	; (80084c4 <vTaskStartScheduler+0xc0>)
 8008434:	4824      	ldr	r0, [pc, #144]	; (80084c8 <vTaskStartScheduler+0xc4>)
 8008436:	f7ff fdf9 	bl	800802c <xTaskCreateStatic>
 800843a:	4603      	mov	r3, r0
 800843c:	4a23      	ldr	r2, [pc, #140]	; (80084cc <vTaskStartScheduler+0xc8>)
 800843e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008440:	4b22      	ldr	r3, [pc, #136]	; (80084cc <vTaskStartScheduler+0xc8>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d002      	beq.n	800844e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008448:	2301      	movs	r3, #1
 800844a:	617b      	str	r3, [r7, #20]
 800844c:	e001      	b.n	8008452 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800844e:	2300      	movs	r3, #0
 8008450:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	2b01      	cmp	r3, #1
 8008456:	d102      	bne.n	800845e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008458:	f000 fd10 	bl	8008e7c <xTimerCreateTimerTask>
 800845c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	2b01      	cmp	r3, #1
 8008462:	d11b      	bne.n	800849c <vTaskStartScheduler+0x98>
	__asm volatile
 8008464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008468:	f383 8811 	msr	BASEPRI, r3
 800846c:	f3bf 8f6f 	isb	sy
 8008470:	f3bf 8f4f 	dsb	sy
 8008474:	613b      	str	r3, [r7, #16]
}
 8008476:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008478:	4b15      	ldr	r3, [pc, #84]	; (80084d0 <vTaskStartScheduler+0xcc>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	3354      	adds	r3, #84	; 0x54
 800847e:	4a15      	ldr	r2, [pc, #84]	; (80084d4 <vTaskStartScheduler+0xd0>)
 8008480:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008482:	4b15      	ldr	r3, [pc, #84]	; (80084d8 <vTaskStartScheduler+0xd4>)
 8008484:	f04f 32ff 	mov.w	r2, #4294967295
 8008488:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800848a:	4b14      	ldr	r3, [pc, #80]	; (80084dc <vTaskStartScheduler+0xd8>)
 800848c:	2201      	movs	r2, #1
 800848e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008490:	4b13      	ldr	r3, [pc, #76]	; (80084e0 <vTaskStartScheduler+0xdc>)
 8008492:	2200      	movs	r2, #0
 8008494:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008496:	f001 f8cb 	bl	8009630 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800849a:	e00e      	b.n	80084ba <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084a2:	d10a      	bne.n	80084ba <vTaskStartScheduler+0xb6>
	__asm volatile
 80084a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a8:	f383 8811 	msr	BASEPRI, r3
 80084ac:	f3bf 8f6f 	isb	sy
 80084b0:	f3bf 8f4f 	dsb	sy
 80084b4:	60fb      	str	r3, [r7, #12]
}
 80084b6:	bf00      	nop
 80084b8:	e7fe      	b.n	80084b8 <vTaskStartScheduler+0xb4>
}
 80084ba:	bf00      	nop
 80084bc:	3718      	adds	r7, #24
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	0800ca34 	.word	0x0800ca34
 80084c8:	08008b09 	.word	0x08008b09
 80084cc:	24001630 	.word	0x24001630
 80084d0:	24001138 	.word	0x24001138
 80084d4:	2400006c 	.word	0x2400006c
 80084d8:	2400162c 	.word	0x2400162c
 80084dc:	24001618 	.word	0x24001618
 80084e0:	24001610 	.word	0x24001610

080084e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80084e4:	b480      	push	{r7}
 80084e6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80084e8:	4b04      	ldr	r3, [pc, #16]	; (80084fc <vTaskSuspendAll+0x18>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	3301      	adds	r3, #1
 80084ee:	4a03      	ldr	r2, [pc, #12]	; (80084fc <vTaskSuspendAll+0x18>)
 80084f0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80084f2:	bf00      	nop
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr
 80084fc:	24001634 	.word	0x24001634

08008500 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008506:	2300      	movs	r3, #0
 8008508:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800850a:	2300      	movs	r3, #0
 800850c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800850e:	4b42      	ldr	r3, [pc, #264]	; (8008618 <xTaskResumeAll+0x118>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d10a      	bne.n	800852c <xTaskResumeAll+0x2c>
	__asm volatile
 8008516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800851a:	f383 8811 	msr	BASEPRI, r3
 800851e:	f3bf 8f6f 	isb	sy
 8008522:	f3bf 8f4f 	dsb	sy
 8008526:	603b      	str	r3, [r7, #0]
}
 8008528:	bf00      	nop
 800852a:	e7fe      	b.n	800852a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800852c:	f001 f922 	bl	8009774 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008530:	4b39      	ldr	r3, [pc, #228]	; (8008618 <xTaskResumeAll+0x118>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	3b01      	subs	r3, #1
 8008536:	4a38      	ldr	r2, [pc, #224]	; (8008618 <xTaskResumeAll+0x118>)
 8008538:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800853a:	4b37      	ldr	r3, [pc, #220]	; (8008618 <xTaskResumeAll+0x118>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d162      	bne.n	8008608 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008542:	4b36      	ldr	r3, [pc, #216]	; (800861c <xTaskResumeAll+0x11c>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d05e      	beq.n	8008608 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800854a:	e02f      	b.n	80085ac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800854c:	4b34      	ldr	r3, [pc, #208]	; (8008620 <xTaskResumeAll+0x120>)
 800854e:	68db      	ldr	r3, [r3, #12]
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	3318      	adds	r3, #24
 8008558:	4618      	mov	r0, r3
 800855a:	f7ff f850 	bl	80075fe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	3304      	adds	r3, #4
 8008562:	4618      	mov	r0, r3
 8008564:	f7ff f84b 	bl	80075fe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800856c:	4b2d      	ldr	r3, [pc, #180]	; (8008624 <xTaskResumeAll+0x124>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	429a      	cmp	r2, r3
 8008572:	d903      	bls.n	800857c <xTaskResumeAll+0x7c>
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008578:	4a2a      	ldr	r2, [pc, #168]	; (8008624 <xTaskResumeAll+0x124>)
 800857a:	6013      	str	r3, [r2, #0]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008580:	4613      	mov	r3, r2
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	4413      	add	r3, r2
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	4a27      	ldr	r2, [pc, #156]	; (8008628 <xTaskResumeAll+0x128>)
 800858a:	441a      	add	r2, r3
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	3304      	adds	r3, #4
 8008590:	4619      	mov	r1, r3
 8008592:	4610      	mov	r0, r2
 8008594:	f7fe ffd6 	bl	8007544 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800859c:	4b23      	ldr	r3, [pc, #140]	; (800862c <xTaskResumeAll+0x12c>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d302      	bcc.n	80085ac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80085a6:	4b22      	ldr	r3, [pc, #136]	; (8008630 <xTaskResumeAll+0x130>)
 80085a8:	2201      	movs	r2, #1
 80085aa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80085ac:	4b1c      	ldr	r3, [pc, #112]	; (8008620 <xTaskResumeAll+0x120>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d1cb      	bne.n	800854c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d001      	beq.n	80085be <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80085ba:	f000 fb5f 	bl	8008c7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80085be:	4b1d      	ldr	r3, [pc, #116]	; (8008634 <xTaskResumeAll+0x134>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d010      	beq.n	80085ec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80085ca:	f000 f847 	bl	800865c <xTaskIncrementTick>
 80085ce:	4603      	mov	r3, r0
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d002      	beq.n	80085da <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80085d4:	4b16      	ldr	r3, [pc, #88]	; (8008630 <xTaskResumeAll+0x130>)
 80085d6:	2201      	movs	r2, #1
 80085d8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	3b01      	subs	r3, #1
 80085de:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d1f1      	bne.n	80085ca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80085e6:	4b13      	ldr	r3, [pc, #76]	; (8008634 <xTaskResumeAll+0x134>)
 80085e8:	2200      	movs	r2, #0
 80085ea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80085ec:	4b10      	ldr	r3, [pc, #64]	; (8008630 <xTaskResumeAll+0x130>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d009      	beq.n	8008608 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80085f4:	2301      	movs	r3, #1
 80085f6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80085f8:	4b0f      	ldr	r3, [pc, #60]	; (8008638 <xTaskResumeAll+0x138>)
 80085fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085fe:	601a      	str	r2, [r3, #0]
 8008600:	f3bf 8f4f 	dsb	sy
 8008604:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008608:	f001 f8e4 	bl	80097d4 <vPortExitCritical>

	return xAlreadyYielded;
 800860c:	68bb      	ldr	r3, [r7, #8]
}
 800860e:	4618      	mov	r0, r3
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	24001634 	.word	0x24001634
 800861c:	2400160c 	.word	0x2400160c
 8008620:	240015cc 	.word	0x240015cc
 8008624:	24001614 	.word	0x24001614
 8008628:	2400113c 	.word	0x2400113c
 800862c:	24001138 	.word	0x24001138
 8008630:	24001620 	.word	0x24001620
 8008634:	2400161c 	.word	0x2400161c
 8008638:	e000ed04 	.word	0xe000ed04

0800863c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008642:	4b05      	ldr	r3, [pc, #20]	; (8008658 <xTaskGetTickCount+0x1c>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008648:	687b      	ldr	r3, [r7, #4]
}
 800864a:	4618      	mov	r0, r3
 800864c:	370c      	adds	r7, #12
 800864e:	46bd      	mov	sp, r7
 8008650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008654:	4770      	bx	lr
 8008656:	bf00      	nop
 8008658:	24001610 	.word	0x24001610

0800865c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b086      	sub	sp, #24
 8008660:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008662:	2300      	movs	r3, #0
 8008664:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008666:	4b4f      	ldr	r3, [pc, #316]	; (80087a4 <xTaskIncrementTick+0x148>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	2b00      	cmp	r3, #0
 800866c:	f040 808f 	bne.w	800878e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008670:	4b4d      	ldr	r3, [pc, #308]	; (80087a8 <xTaskIncrementTick+0x14c>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	3301      	adds	r3, #1
 8008676:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008678:	4a4b      	ldr	r2, [pc, #300]	; (80087a8 <xTaskIncrementTick+0x14c>)
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d120      	bne.n	80086c6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008684:	4b49      	ldr	r3, [pc, #292]	; (80087ac <xTaskIncrementTick+0x150>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00a      	beq.n	80086a4 <xTaskIncrementTick+0x48>
	__asm volatile
 800868e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008692:	f383 8811 	msr	BASEPRI, r3
 8008696:	f3bf 8f6f 	isb	sy
 800869a:	f3bf 8f4f 	dsb	sy
 800869e:	603b      	str	r3, [r7, #0]
}
 80086a0:	bf00      	nop
 80086a2:	e7fe      	b.n	80086a2 <xTaskIncrementTick+0x46>
 80086a4:	4b41      	ldr	r3, [pc, #260]	; (80087ac <xTaskIncrementTick+0x150>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	60fb      	str	r3, [r7, #12]
 80086aa:	4b41      	ldr	r3, [pc, #260]	; (80087b0 <xTaskIncrementTick+0x154>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a3f      	ldr	r2, [pc, #252]	; (80087ac <xTaskIncrementTick+0x150>)
 80086b0:	6013      	str	r3, [r2, #0]
 80086b2:	4a3f      	ldr	r2, [pc, #252]	; (80087b0 <xTaskIncrementTick+0x154>)
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	6013      	str	r3, [r2, #0]
 80086b8:	4b3e      	ldr	r3, [pc, #248]	; (80087b4 <xTaskIncrementTick+0x158>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	3301      	adds	r3, #1
 80086be:	4a3d      	ldr	r2, [pc, #244]	; (80087b4 <xTaskIncrementTick+0x158>)
 80086c0:	6013      	str	r3, [r2, #0]
 80086c2:	f000 fadb 	bl	8008c7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80086c6:	4b3c      	ldr	r3, [pc, #240]	; (80087b8 <xTaskIncrementTick+0x15c>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	693a      	ldr	r2, [r7, #16]
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d349      	bcc.n	8008764 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086d0:	4b36      	ldr	r3, [pc, #216]	; (80087ac <xTaskIncrementTick+0x150>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d104      	bne.n	80086e4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086da:	4b37      	ldr	r3, [pc, #220]	; (80087b8 <xTaskIncrementTick+0x15c>)
 80086dc:	f04f 32ff 	mov.w	r2, #4294967295
 80086e0:	601a      	str	r2, [r3, #0]
					break;
 80086e2:	e03f      	b.n	8008764 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086e4:	4b31      	ldr	r3, [pc, #196]	; (80087ac <xTaskIncrementTick+0x150>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	68db      	ldr	r3, [r3, #12]
 80086ea:	68db      	ldr	r3, [r3, #12]
 80086ec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80086f4:	693a      	ldr	r2, [r7, #16]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d203      	bcs.n	8008704 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80086fc:	4a2e      	ldr	r2, [pc, #184]	; (80087b8 <xTaskIncrementTick+0x15c>)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008702:	e02f      	b.n	8008764 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	3304      	adds	r3, #4
 8008708:	4618      	mov	r0, r3
 800870a:	f7fe ff78 	bl	80075fe <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008712:	2b00      	cmp	r3, #0
 8008714:	d004      	beq.n	8008720 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	3318      	adds	r3, #24
 800871a:	4618      	mov	r0, r3
 800871c:	f7fe ff6f 	bl	80075fe <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008724:	4b25      	ldr	r3, [pc, #148]	; (80087bc <xTaskIncrementTick+0x160>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	429a      	cmp	r2, r3
 800872a:	d903      	bls.n	8008734 <xTaskIncrementTick+0xd8>
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008730:	4a22      	ldr	r2, [pc, #136]	; (80087bc <xTaskIncrementTick+0x160>)
 8008732:	6013      	str	r3, [r2, #0]
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008738:	4613      	mov	r3, r2
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	4413      	add	r3, r2
 800873e:	009b      	lsls	r3, r3, #2
 8008740:	4a1f      	ldr	r2, [pc, #124]	; (80087c0 <xTaskIncrementTick+0x164>)
 8008742:	441a      	add	r2, r3
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	3304      	adds	r3, #4
 8008748:	4619      	mov	r1, r3
 800874a:	4610      	mov	r0, r2
 800874c:	f7fe fefa 	bl	8007544 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008754:	4b1b      	ldr	r3, [pc, #108]	; (80087c4 <xTaskIncrementTick+0x168>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800875a:	429a      	cmp	r2, r3
 800875c:	d3b8      	bcc.n	80086d0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800875e:	2301      	movs	r3, #1
 8008760:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008762:	e7b5      	b.n	80086d0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008764:	4b17      	ldr	r3, [pc, #92]	; (80087c4 <xTaskIncrementTick+0x168>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800876a:	4915      	ldr	r1, [pc, #84]	; (80087c0 <xTaskIncrementTick+0x164>)
 800876c:	4613      	mov	r3, r2
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	4413      	add	r3, r2
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	440b      	add	r3, r1
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	2b01      	cmp	r3, #1
 800877a:	d901      	bls.n	8008780 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800877c:	2301      	movs	r3, #1
 800877e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008780:	4b11      	ldr	r3, [pc, #68]	; (80087c8 <xTaskIncrementTick+0x16c>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d007      	beq.n	8008798 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008788:	2301      	movs	r3, #1
 800878a:	617b      	str	r3, [r7, #20]
 800878c:	e004      	b.n	8008798 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800878e:	4b0f      	ldr	r3, [pc, #60]	; (80087cc <xTaskIncrementTick+0x170>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	3301      	adds	r3, #1
 8008794:	4a0d      	ldr	r2, [pc, #52]	; (80087cc <xTaskIncrementTick+0x170>)
 8008796:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008798:	697b      	ldr	r3, [r7, #20]
}
 800879a:	4618      	mov	r0, r3
 800879c:	3718      	adds	r7, #24
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	bf00      	nop
 80087a4:	24001634 	.word	0x24001634
 80087a8:	24001610 	.word	0x24001610
 80087ac:	240015c4 	.word	0x240015c4
 80087b0:	240015c8 	.word	0x240015c8
 80087b4:	24001624 	.word	0x24001624
 80087b8:	2400162c 	.word	0x2400162c
 80087bc:	24001614 	.word	0x24001614
 80087c0:	2400113c 	.word	0x2400113c
 80087c4:	24001138 	.word	0x24001138
 80087c8:	24001620 	.word	0x24001620
 80087cc:	2400161c 	.word	0x2400161c

080087d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80087d0:	b480      	push	{r7}
 80087d2:	b085      	sub	sp, #20
 80087d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80087d6:	4b2a      	ldr	r3, [pc, #168]	; (8008880 <vTaskSwitchContext+0xb0>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d003      	beq.n	80087e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80087de:	4b29      	ldr	r3, [pc, #164]	; (8008884 <vTaskSwitchContext+0xb4>)
 80087e0:	2201      	movs	r2, #1
 80087e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80087e4:	e046      	b.n	8008874 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80087e6:	4b27      	ldr	r3, [pc, #156]	; (8008884 <vTaskSwitchContext+0xb4>)
 80087e8:	2200      	movs	r2, #0
 80087ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087ec:	4b26      	ldr	r3, [pc, #152]	; (8008888 <vTaskSwitchContext+0xb8>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	60fb      	str	r3, [r7, #12]
 80087f2:	e010      	b.n	8008816 <vTaskSwitchContext+0x46>
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d10a      	bne.n	8008810 <vTaskSwitchContext+0x40>
	__asm volatile
 80087fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087fe:	f383 8811 	msr	BASEPRI, r3
 8008802:	f3bf 8f6f 	isb	sy
 8008806:	f3bf 8f4f 	dsb	sy
 800880a:	607b      	str	r3, [r7, #4]
}
 800880c:	bf00      	nop
 800880e:	e7fe      	b.n	800880e <vTaskSwitchContext+0x3e>
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	3b01      	subs	r3, #1
 8008814:	60fb      	str	r3, [r7, #12]
 8008816:	491d      	ldr	r1, [pc, #116]	; (800888c <vTaskSwitchContext+0xbc>)
 8008818:	68fa      	ldr	r2, [r7, #12]
 800881a:	4613      	mov	r3, r2
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	4413      	add	r3, r2
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	440b      	add	r3, r1
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d0e4      	beq.n	80087f4 <vTaskSwitchContext+0x24>
 800882a:	68fa      	ldr	r2, [r7, #12]
 800882c:	4613      	mov	r3, r2
 800882e:	009b      	lsls	r3, r3, #2
 8008830:	4413      	add	r3, r2
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	4a15      	ldr	r2, [pc, #84]	; (800888c <vTaskSwitchContext+0xbc>)
 8008836:	4413      	add	r3, r2
 8008838:	60bb      	str	r3, [r7, #8]
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	685a      	ldr	r2, [r3, #4]
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	605a      	str	r2, [r3, #4]
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	685a      	ldr	r2, [r3, #4]
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	3308      	adds	r3, #8
 800884c:	429a      	cmp	r2, r3
 800884e:	d104      	bne.n	800885a <vTaskSwitchContext+0x8a>
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	685a      	ldr	r2, [r3, #4]
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	605a      	str	r2, [r3, #4]
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	4a0b      	ldr	r2, [pc, #44]	; (8008890 <vTaskSwitchContext+0xc0>)
 8008862:	6013      	str	r3, [r2, #0]
 8008864:	4a08      	ldr	r2, [pc, #32]	; (8008888 <vTaskSwitchContext+0xb8>)
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800886a:	4b09      	ldr	r3, [pc, #36]	; (8008890 <vTaskSwitchContext+0xc0>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	3354      	adds	r3, #84	; 0x54
 8008870:	4a08      	ldr	r2, [pc, #32]	; (8008894 <vTaskSwitchContext+0xc4>)
 8008872:	6013      	str	r3, [r2, #0]
}
 8008874:	bf00      	nop
 8008876:	3714      	adds	r7, #20
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr
 8008880:	24001634 	.word	0x24001634
 8008884:	24001620 	.word	0x24001620
 8008888:	24001614 	.word	0x24001614
 800888c:	2400113c 	.word	0x2400113c
 8008890:	24001138 	.word	0x24001138
 8008894:	2400006c 	.word	0x2400006c

08008898 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d10a      	bne.n	80088be <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80088a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ac:	f383 8811 	msr	BASEPRI, r3
 80088b0:	f3bf 8f6f 	isb	sy
 80088b4:	f3bf 8f4f 	dsb	sy
 80088b8:	60fb      	str	r3, [r7, #12]
}
 80088ba:	bf00      	nop
 80088bc:	e7fe      	b.n	80088bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80088be:	4b07      	ldr	r3, [pc, #28]	; (80088dc <vTaskPlaceOnEventList+0x44>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	3318      	adds	r3, #24
 80088c4:	4619      	mov	r1, r3
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f7fe fe60 	bl	800758c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80088cc:	2101      	movs	r1, #1
 80088ce:	6838      	ldr	r0, [r7, #0]
 80088d0:	f000 fa80 	bl	8008dd4 <prvAddCurrentTaskToDelayedList>
}
 80088d4:	bf00      	nop
 80088d6:	3710      	adds	r7, #16
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}
 80088dc:	24001138 	.word	0x24001138

080088e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b086      	sub	sp, #24
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	60f8      	str	r0, [r7, #12]
 80088e8:	60b9      	str	r1, [r7, #8]
 80088ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d10a      	bne.n	8008908 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80088f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f6:	f383 8811 	msr	BASEPRI, r3
 80088fa:	f3bf 8f6f 	isb	sy
 80088fe:	f3bf 8f4f 	dsb	sy
 8008902:	617b      	str	r3, [r7, #20]
}
 8008904:	bf00      	nop
 8008906:	e7fe      	b.n	8008906 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008908:	4b0a      	ldr	r3, [pc, #40]	; (8008934 <vTaskPlaceOnEventListRestricted+0x54>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	3318      	adds	r3, #24
 800890e:	4619      	mov	r1, r3
 8008910:	68f8      	ldr	r0, [r7, #12]
 8008912:	f7fe fe17 	bl	8007544 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d002      	beq.n	8008922 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800891c:	f04f 33ff 	mov.w	r3, #4294967295
 8008920:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008922:	6879      	ldr	r1, [r7, #4]
 8008924:	68b8      	ldr	r0, [r7, #8]
 8008926:	f000 fa55 	bl	8008dd4 <prvAddCurrentTaskToDelayedList>
	}
 800892a:	bf00      	nop
 800892c:	3718      	adds	r7, #24
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop
 8008934:	24001138 	.word	0x24001138

08008938 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b086      	sub	sp, #24
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	68db      	ldr	r3, [r3, #12]
 8008944:	68db      	ldr	r3, [r3, #12]
 8008946:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d10a      	bne.n	8008964 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800894e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008952:	f383 8811 	msr	BASEPRI, r3
 8008956:	f3bf 8f6f 	isb	sy
 800895a:	f3bf 8f4f 	dsb	sy
 800895e:	60fb      	str	r3, [r7, #12]
}
 8008960:	bf00      	nop
 8008962:	e7fe      	b.n	8008962 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	3318      	adds	r3, #24
 8008968:	4618      	mov	r0, r3
 800896a:	f7fe fe48 	bl	80075fe <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800896e:	4b1e      	ldr	r3, [pc, #120]	; (80089e8 <xTaskRemoveFromEventList+0xb0>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d11d      	bne.n	80089b2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	3304      	adds	r3, #4
 800897a:	4618      	mov	r0, r3
 800897c:	f7fe fe3f 	bl	80075fe <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008984:	4b19      	ldr	r3, [pc, #100]	; (80089ec <xTaskRemoveFromEventList+0xb4>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	429a      	cmp	r2, r3
 800898a:	d903      	bls.n	8008994 <xTaskRemoveFromEventList+0x5c>
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008990:	4a16      	ldr	r2, [pc, #88]	; (80089ec <xTaskRemoveFromEventList+0xb4>)
 8008992:	6013      	str	r3, [r2, #0]
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008998:	4613      	mov	r3, r2
 800899a:	009b      	lsls	r3, r3, #2
 800899c:	4413      	add	r3, r2
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	4a13      	ldr	r2, [pc, #76]	; (80089f0 <xTaskRemoveFromEventList+0xb8>)
 80089a2:	441a      	add	r2, r3
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	3304      	adds	r3, #4
 80089a8:	4619      	mov	r1, r3
 80089aa:	4610      	mov	r0, r2
 80089ac:	f7fe fdca 	bl	8007544 <vListInsertEnd>
 80089b0:	e005      	b.n	80089be <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	3318      	adds	r3, #24
 80089b6:	4619      	mov	r1, r3
 80089b8:	480e      	ldr	r0, [pc, #56]	; (80089f4 <xTaskRemoveFromEventList+0xbc>)
 80089ba:	f7fe fdc3 	bl	8007544 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089c2:	4b0d      	ldr	r3, [pc, #52]	; (80089f8 <xTaskRemoveFromEventList+0xc0>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d905      	bls.n	80089d8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80089cc:	2301      	movs	r3, #1
 80089ce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80089d0:	4b0a      	ldr	r3, [pc, #40]	; (80089fc <xTaskRemoveFromEventList+0xc4>)
 80089d2:	2201      	movs	r2, #1
 80089d4:	601a      	str	r2, [r3, #0]
 80089d6:	e001      	b.n	80089dc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80089d8:	2300      	movs	r3, #0
 80089da:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80089dc:	697b      	ldr	r3, [r7, #20]
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3718      	adds	r7, #24
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
 80089e6:	bf00      	nop
 80089e8:	24001634 	.word	0x24001634
 80089ec:	24001614 	.word	0x24001614
 80089f0:	2400113c 	.word	0x2400113c
 80089f4:	240015cc 	.word	0x240015cc
 80089f8:	24001138 	.word	0x24001138
 80089fc:	24001620 	.word	0x24001620

08008a00 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008a00:	b480      	push	{r7}
 8008a02:	b083      	sub	sp, #12
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008a08:	4b06      	ldr	r3, [pc, #24]	; (8008a24 <vTaskInternalSetTimeOutState+0x24>)
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008a10:	4b05      	ldr	r3, [pc, #20]	; (8008a28 <vTaskInternalSetTimeOutState+0x28>)
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	605a      	str	r2, [r3, #4]
}
 8008a18:	bf00      	nop
 8008a1a:	370c      	adds	r7, #12
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr
 8008a24:	24001624 	.word	0x24001624
 8008a28:	24001610 	.word	0x24001610

08008a2c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b088      	sub	sp, #32
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d10a      	bne.n	8008a52 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a40:	f383 8811 	msr	BASEPRI, r3
 8008a44:	f3bf 8f6f 	isb	sy
 8008a48:	f3bf 8f4f 	dsb	sy
 8008a4c:	613b      	str	r3, [r7, #16]
}
 8008a4e:	bf00      	nop
 8008a50:	e7fe      	b.n	8008a50 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d10a      	bne.n	8008a6e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a5c:	f383 8811 	msr	BASEPRI, r3
 8008a60:	f3bf 8f6f 	isb	sy
 8008a64:	f3bf 8f4f 	dsb	sy
 8008a68:	60fb      	str	r3, [r7, #12]
}
 8008a6a:	bf00      	nop
 8008a6c:	e7fe      	b.n	8008a6c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008a6e:	f000 fe81 	bl	8009774 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008a72:	4b1d      	ldr	r3, [pc, #116]	; (8008ae8 <xTaskCheckForTimeOut+0xbc>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	69ba      	ldr	r2, [r7, #24]
 8008a7e:	1ad3      	subs	r3, r2, r3
 8008a80:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a8a:	d102      	bne.n	8008a92 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	61fb      	str	r3, [r7, #28]
 8008a90:	e023      	b.n	8008ada <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	4b15      	ldr	r3, [pc, #84]	; (8008aec <xTaskCheckForTimeOut+0xc0>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d007      	beq.n	8008aae <xTaskCheckForTimeOut+0x82>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	69ba      	ldr	r2, [r7, #24]
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	d302      	bcc.n	8008aae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	61fb      	str	r3, [r7, #28]
 8008aac:	e015      	b.n	8008ada <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	697a      	ldr	r2, [r7, #20]
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d20b      	bcs.n	8008ad0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	1ad2      	subs	r2, r2, r3
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f7ff ff9b 	bl	8008a00 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008aca:	2300      	movs	r3, #0
 8008acc:	61fb      	str	r3, [r7, #28]
 8008ace:	e004      	b.n	8008ada <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008ada:	f000 fe7b 	bl	80097d4 <vPortExitCritical>

	return xReturn;
 8008ade:	69fb      	ldr	r3, [r7, #28]
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3720      	adds	r7, #32
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}
 8008ae8:	24001610 	.word	0x24001610
 8008aec:	24001624 	.word	0x24001624

08008af0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008af0:	b480      	push	{r7}
 8008af2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008af4:	4b03      	ldr	r3, [pc, #12]	; (8008b04 <vTaskMissedYield+0x14>)
 8008af6:	2201      	movs	r2, #1
 8008af8:	601a      	str	r2, [r3, #0]
}
 8008afa:	bf00      	nop
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr
 8008b04:	24001620 	.word	0x24001620

08008b08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008b10:	f000 f852 	bl	8008bb8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008b14:	4b06      	ldr	r3, [pc, #24]	; (8008b30 <prvIdleTask+0x28>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d9f9      	bls.n	8008b10 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008b1c:	4b05      	ldr	r3, [pc, #20]	; (8008b34 <prvIdleTask+0x2c>)
 8008b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b22:	601a      	str	r2, [r3, #0]
 8008b24:	f3bf 8f4f 	dsb	sy
 8008b28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008b2c:	e7f0      	b.n	8008b10 <prvIdleTask+0x8>
 8008b2e:	bf00      	nop
 8008b30:	2400113c 	.word	0x2400113c
 8008b34:	e000ed04 	.word	0xe000ed04

08008b38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b082      	sub	sp, #8
 8008b3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008b3e:	2300      	movs	r3, #0
 8008b40:	607b      	str	r3, [r7, #4]
 8008b42:	e00c      	b.n	8008b5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	4613      	mov	r3, r2
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	4413      	add	r3, r2
 8008b4c:	009b      	lsls	r3, r3, #2
 8008b4e:	4a12      	ldr	r2, [pc, #72]	; (8008b98 <prvInitialiseTaskLists+0x60>)
 8008b50:	4413      	add	r3, r2
 8008b52:	4618      	mov	r0, r3
 8008b54:	f7fe fcc9 	bl	80074ea <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	607b      	str	r3, [r7, #4]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2b37      	cmp	r3, #55	; 0x37
 8008b62:	d9ef      	bls.n	8008b44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008b64:	480d      	ldr	r0, [pc, #52]	; (8008b9c <prvInitialiseTaskLists+0x64>)
 8008b66:	f7fe fcc0 	bl	80074ea <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008b6a:	480d      	ldr	r0, [pc, #52]	; (8008ba0 <prvInitialiseTaskLists+0x68>)
 8008b6c:	f7fe fcbd 	bl	80074ea <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008b70:	480c      	ldr	r0, [pc, #48]	; (8008ba4 <prvInitialiseTaskLists+0x6c>)
 8008b72:	f7fe fcba 	bl	80074ea <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008b76:	480c      	ldr	r0, [pc, #48]	; (8008ba8 <prvInitialiseTaskLists+0x70>)
 8008b78:	f7fe fcb7 	bl	80074ea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008b7c:	480b      	ldr	r0, [pc, #44]	; (8008bac <prvInitialiseTaskLists+0x74>)
 8008b7e:	f7fe fcb4 	bl	80074ea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008b82:	4b0b      	ldr	r3, [pc, #44]	; (8008bb0 <prvInitialiseTaskLists+0x78>)
 8008b84:	4a05      	ldr	r2, [pc, #20]	; (8008b9c <prvInitialiseTaskLists+0x64>)
 8008b86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008b88:	4b0a      	ldr	r3, [pc, #40]	; (8008bb4 <prvInitialiseTaskLists+0x7c>)
 8008b8a:	4a05      	ldr	r2, [pc, #20]	; (8008ba0 <prvInitialiseTaskLists+0x68>)
 8008b8c:	601a      	str	r2, [r3, #0]
}
 8008b8e:	bf00      	nop
 8008b90:	3708      	adds	r7, #8
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop
 8008b98:	2400113c 	.word	0x2400113c
 8008b9c:	2400159c 	.word	0x2400159c
 8008ba0:	240015b0 	.word	0x240015b0
 8008ba4:	240015cc 	.word	0x240015cc
 8008ba8:	240015e0 	.word	0x240015e0
 8008bac:	240015f8 	.word	0x240015f8
 8008bb0:	240015c4 	.word	0x240015c4
 8008bb4:	240015c8 	.word	0x240015c8

08008bb8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008bbe:	e019      	b.n	8008bf4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008bc0:	f000 fdd8 	bl	8009774 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bc4:	4b10      	ldr	r3, [pc, #64]	; (8008c08 <prvCheckTasksWaitingTermination+0x50>)
 8008bc6:	68db      	ldr	r3, [r3, #12]
 8008bc8:	68db      	ldr	r3, [r3, #12]
 8008bca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	3304      	adds	r3, #4
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f7fe fd14 	bl	80075fe <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008bd6:	4b0d      	ldr	r3, [pc, #52]	; (8008c0c <prvCheckTasksWaitingTermination+0x54>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	3b01      	subs	r3, #1
 8008bdc:	4a0b      	ldr	r2, [pc, #44]	; (8008c0c <prvCheckTasksWaitingTermination+0x54>)
 8008bde:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008be0:	4b0b      	ldr	r3, [pc, #44]	; (8008c10 <prvCheckTasksWaitingTermination+0x58>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	3b01      	subs	r3, #1
 8008be6:	4a0a      	ldr	r2, [pc, #40]	; (8008c10 <prvCheckTasksWaitingTermination+0x58>)
 8008be8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008bea:	f000 fdf3 	bl	80097d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 f810 	bl	8008c14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008bf4:	4b06      	ldr	r3, [pc, #24]	; (8008c10 <prvCheckTasksWaitingTermination+0x58>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d1e1      	bne.n	8008bc0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008bfc:	bf00      	nop
 8008bfe:	bf00      	nop
 8008c00:	3708      	adds	r7, #8
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	bf00      	nop
 8008c08:	240015e0 	.word	0x240015e0
 8008c0c:	2400160c 	.word	0x2400160c
 8008c10:	240015f4 	.word	0x240015f4

08008c14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b084      	sub	sp, #16
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	3354      	adds	r3, #84	; 0x54
 8008c20:	4618      	mov	r0, r3
 8008c22:	f001 fe31 	bl	800a888 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d108      	bne.n	8008c42 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c34:	4618      	mov	r0, r3
 8008c36:	f000 ff8b 	bl	8009b50 <vPortFree>
				vPortFree( pxTCB );
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 ff88 	bl	8009b50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008c40:	e018      	b.n	8008c74 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d103      	bne.n	8008c54 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 ff7f 	bl	8009b50 <vPortFree>
	}
 8008c52:	e00f      	b.n	8008c74 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008c5a:	2b02      	cmp	r3, #2
 8008c5c:	d00a      	beq.n	8008c74 <prvDeleteTCB+0x60>
	__asm volatile
 8008c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c62:	f383 8811 	msr	BASEPRI, r3
 8008c66:	f3bf 8f6f 	isb	sy
 8008c6a:	f3bf 8f4f 	dsb	sy
 8008c6e:	60fb      	str	r3, [r7, #12]
}
 8008c70:	bf00      	nop
 8008c72:	e7fe      	b.n	8008c72 <prvDeleteTCB+0x5e>
	}
 8008c74:	bf00      	nop
 8008c76:	3710      	adds	r7, #16
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b083      	sub	sp, #12
 8008c80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c82:	4b0c      	ldr	r3, [pc, #48]	; (8008cb4 <prvResetNextTaskUnblockTime+0x38>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d104      	bne.n	8008c96 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008c8c:	4b0a      	ldr	r3, [pc, #40]	; (8008cb8 <prvResetNextTaskUnblockTime+0x3c>)
 8008c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8008c92:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008c94:	e008      	b.n	8008ca8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c96:	4b07      	ldr	r3, [pc, #28]	; (8008cb4 <prvResetNextTaskUnblockTime+0x38>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	68db      	ldr	r3, [r3, #12]
 8008c9c:	68db      	ldr	r3, [r3, #12]
 8008c9e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	4a04      	ldr	r2, [pc, #16]	; (8008cb8 <prvResetNextTaskUnblockTime+0x3c>)
 8008ca6:	6013      	str	r3, [r2, #0]
}
 8008ca8:	bf00      	nop
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr
 8008cb4:	240015c4 	.word	0x240015c4
 8008cb8:	2400162c 	.word	0x2400162c

08008cbc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b083      	sub	sp, #12
 8008cc0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008cc2:	4b0b      	ldr	r3, [pc, #44]	; (8008cf0 <xTaskGetSchedulerState+0x34>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d102      	bne.n	8008cd0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008cca:	2301      	movs	r3, #1
 8008ccc:	607b      	str	r3, [r7, #4]
 8008cce:	e008      	b.n	8008ce2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cd0:	4b08      	ldr	r3, [pc, #32]	; (8008cf4 <xTaskGetSchedulerState+0x38>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d102      	bne.n	8008cde <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008cd8:	2302      	movs	r3, #2
 8008cda:	607b      	str	r3, [r7, #4]
 8008cdc:	e001      	b.n	8008ce2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008ce2:	687b      	ldr	r3, [r7, #4]
	}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	370c      	adds	r7, #12
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr
 8008cf0:	24001618 	.word	0x24001618
 8008cf4:	24001634 	.word	0x24001634

08008cf8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b086      	sub	sp, #24
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008d04:	2300      	movs	r3, #0
 8008d06:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d056      	beq.n	8008dbc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008d0e:	4b2e      	ldr	r3, [pc, #184]	; (8008dc8 <xTaskPriorityDisinherit+0xd0>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	693a      	ldr	r2, [r7, #16]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d00a      	beq.n	8008d2e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d1c:	f383 8811 	msr	BASEPRI, r3
 8008d20:	f3bf 8f6f 	isb	sy
 8008d24:	f3bf 8f4f 	dsb	sy
 8008d28:	60fb      	str	r3, [r7, #12]
}
 8008d2a:	bf00      	nop
 8008d2c:	e7fe      	b.n	8008d2c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d10a      	bne.n	8008d4c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d3a:	f383 8811 	msr	BASEPRI, r3
 8008d3e:	f3bf 8f6f 	isb	sy
 8008d42:	f3bf 8f4f 	dsb	sy
 8008d46:	60bb      	str	r3, [r7, #8]
}
 8008d48:	bf00      	nop
 8008d4a:	e7fe      	b.n	8008d4a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d50:	1e5a      	subs	r2, r3, #1
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d02c      	beq.n	8008dbc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d128      	bne.n	8008dbc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	3304      	adds	r3, #4
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7fe fc45 	bl	80075fe <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d80:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d8c:	4b0f      	ldr	r3, [pc, #60]	; (8008dcc <xTaskPriorityDisinherit+0xd4>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d903      	bls.n	8008d9c <xTaskPriorityDisinherit+0xa4>
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d98:	4a0c      	ldr	r2, [pc, #48]	; (8008dcc <xTaskPriorityDisinherit+0xd4>)
 8008d9a:	6013      	str	r3, [r2, #0]
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008da0:	4613      	mov	r3, r2
 8008da2:	009b      	lsls	r3, r3, #2
 8008da4:	4413      	add	r3, r2
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	4a09      	ldr	r2, [pc, #36]	; (8008dd0 <xTaskPriorityDisinherit+0xd8>)
 8008daa:	441a      	add	r2, r3
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	3304      	adds	r3, #4
 8008db0:	4619      	mov	r1, r3
 8008db2:	4610      	mov	r0, r2
 8008db4:	f7fe fbc6 	bl	8007544 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008db8:	2301      	movs	r3, #1
 8008dba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008dbc:	697b      	ldr	r3, [r7, #20]
	}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3718      	adds	r7, #24
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	bf00      	nop
 8008dc8:	24001138 	.word	0x24001138
 8008dcc:	24001614 	.word	0x24001614
 8008dd0:	2400113c 	.word	0x2400113c

08008dd4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008dde:	4b21      	ldr	r3, [pc, #132]	; (8008e64 <prvAddCurrentTaskToDelayedList+0x90>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008de4:	4b20      	ldr	r3, [pc, #128]	; (8008e68 <prvAddCurrentTaskToDelayedList+0x94>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	3304      	adds	r3, #4
 8008dea:	4618      	mov	r0, r3
 8008dec:	f7fe fc07 	bl	80075fe <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008df6:	d10a      	bne.n	8008e0e <prvAddCurrentTaskToDelayedList+0x3a>
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d007      	beq.n	8008e0e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008dfe:	4b1a      	ldr	r3, [pc, #104]	; (8008e68 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	3304      	adds	r3, #4
 8008e04:	4619      	mov	r1, r3
 8008e06:	4819      	ldr	r0, [pc, #100]	; (8008e6c <prvAddCurrentTaskToDelayedList+0x98>)
 8008e08:	f7fe fb9c 	bl	8007544 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008e0c:	e026      	b.n	8008e5c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008e0e:	68fa      	ldr	r2, [r7, #12]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	4413      	add	r3, r2
 8008e14:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008e16:	4b14      	ldr	r3, [pc, #80]	; (8008e68 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	68ba      	ldr	r2, [r7, #8]
 8008e1c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008e1e:	68ba      	ldr	r2, [r7, #8]
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d209      	bcs.n	8008e3a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e26:	4b12      	ldr	r3, [pc, #72]	; (8008e70 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	4b0f      	ldr	r3, [pc, #60]	; (8008e68 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	3304      	adds	r3, #4
 8008e30:	4619      	mov	r1, r3
 8008e32:	4610      	mov	r0, r2
 8008e34:	f7fe fbaa 	bl	800758c <vListInsert>
}
 8008e38:	e010      	b.n	8008e5c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e3a:	4b0e      	ldr	r3, [pc, #56]	; (8008e74 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	4b0a      	ldr	r3, [pc, #40]	; (8008e68 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	3304      	adds	r3, #4
 8008e44:	4619      	mov	r1, r3
 8008e46:	4610      	mov	r0, r2
 8008e48:	f7fe fba0 	bl	800758c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008e4c:	4b0a      	ldr	r3, [pc, #40]	; (8008e78 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	68ba      	ldr	r2, [r7, #8]
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d202      	bcs.n	8008e5c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008e56:	4a08      	ldr	r2, [pc, #32]	; (8008e78 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	6013      	str	r3, [r2, #0]
}
 8008e5c:	bf00      	nop
 8008e5e:	3710      	adds	r7, #16
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}
 8008e64:	24001610 	.word	0x24001610
 8008e68:	24001138 	.word	0x24001138
 8008e6c:	240015f8 	.word	0x240015f8
 8008e70:	240015c8 	.word	0x240015c8
 8008e74:	240015c4 	.word	0x240015c4
 8008e78:	2400162c 	.word	0x2400162c

08008e7c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b08a      	sub	sp, #40	; 0x28
 8008e80:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008e82:	2300      	movs	r3, #0
 8008e84:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008e86:	f000 fb07 	bl	8009498 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008e8a:	4b1c      	ldr	r3, [pc, #112]	; (8008efc <xTimerCreateTimerTask+0x80>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d021      	beq.n	8008ed6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008e92:	2300      	movs	r3, #0
 8008e94:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008e96:	2300      	movs	r3, #0
 8008e98:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008e9a:	1d3a      	adds	r2, r7, #4
 8008e9c:	f107 0108 	add.w	r1, r7, #8
 8008ea0:	f107 030c 	add.w	r3, r7, #12
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f7fe fab5 	bl	8007414 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008eaa:	6879      	ldr	r1, [r7, #4]
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	68fa      	ldr	r2, [r7, #12]
 8008eb0:	9202      	str	r2, [sp, #8]
 8008eb2:	9301      	str	r3, [sp, #4]
 8008eb4:	2302      	movs	r3, #2
 8008eb6:	9300      	str	r3, [sp, #0]
 8008eb8:	2300      	movs	r3, #0
 8008eba:	460a      	mov	r2, r1
 8008ebc:	4910      	ldr	r1, [pc, #64]	; (8008f00 <xTimerCreateTimerTask+0x84>)
 8008ebe:	4811      	ldr	r0, [pc, #68]	; (8008f04 <xTimerCreateTimerTask+0x88>)
 8008ec0:	f7ff f8b4 	bl	800802c <xTaskCreateStatic>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	4a10      	ldr	r2, [pc, #64]	; (8008f08 <xTimerCreateTimerTask+0x8c>)
 8008ec8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008eca:	4b0f      	ldr	r3, [pc, #60]	; (8008f08 <xTimerCreateTimerTask+0x8c>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d001      	beq.n	8008ed6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d10a      	bne.n	8008ef2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee0:	f383 8811 	msr	BASEPRI, r3
 8008ee4:	f3bf 8f6f 	isb	sy
 8008ee8:	f3bf 8f4f 	dsb	sy
 8008eec:	613b      	str	r3, [r7, #16]
}
 8008eee:	bf00      	nop
 8008ef0:	e7fe      	b.n	8008ef0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008ef2:	697b      	ldr	r3, [r7, #20]
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3718      	adds	r7, #24
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}
 8008efc:	24001668 	.word	0x24001668
 8008f00:	0800ca3c 	.word	0x0800ca3c
 8008f04:	08009041 	.word	0x08009041
 8008f08:	2400166c 	.word	0x2400166c

08008f0c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b08a      	sub	sp, #40	; 0x28
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	60f8      	str	r0, [r7, #12]
 8008f14:	60b9      	str	r1, [r7, #8]
 8008f16:	607a      	str	r2, [r7, #4]
 8008f18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d10a      	bne.n	8008f3a <xTimerGenericCommand+0x2e>
	__asm volatile
 8008f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f28:	f383 8811 	msr	BASEPRI, r3
 8008f2c:	f3bf 8f6f 	isb	sy
 8008f30:	f3bf 8f4f 	dsb	sy
 8008f34:	623b      	str	r3, [r7, #32]
}
 8008f36:	bf00      	nop
 8008f38:	e7fe      	b.n	8008f38 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008f3a:	4b1a      	ldr	r3, [pc, #104]	; (8008fa4 <xTimerGenericCommand+0x98>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d02a      	beq.n	8008f98 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	2b05      	cmp	r3, #5
 8008f52:	dc18      	bgt.n	8008f86 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008f54:	f7ff feb2 	bl	8008cbc <xTaskGetSchedulerState>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	2b02      	cmp	r3, #2
 8008f5c:	d109      	bne.n	8008f72 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008f5e:	4b11      	ldr	r3, [pc, #68]	; (8008fa4 <xTimerGenericCommand+0x98>)
 8008f60:	6818      	ldr	r0, [r3, #0]
 8008f62:	f107 0110 	add.w	r1, r7, #16
 8008f66:	2300      	movs	r3, #0
 8008f68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f6a:	f7fe fc77 	bl	800785c <xQueueGenericSend>
 8008f6e:	6278      	str	r0, [r7, #36]	; 0x24
 8008f70:	e012      	b.n	8008f98 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008f72:	4b0c      	ldr	r3, [pc, #48]	; (8008fa4 <xTimerGenericCommand+0x98>)
 8008f74:	6818      	ldr	r0, [r3, #0]
 8008f76:	f107 0110 	add.w	r1, r7, #16
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	f7fe fc6d 	bl	800785c <xQueueGenericSend>
 8008f82:	6278      	str	r0, [r7, #36]	; 0x24
 8008f84:	e008      	b.n	8008f98 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008f86:	4b07      	ldr	r3, [pc, #28]	; (8008fa4 <xTimerGenericCommand+0x98>)
 8008f88:	6818      	ldr	r0, [r3, #0]
 8008f8a:	f107 0110 	add.w	r1, r7, #16
 8008f8e:	2300      	movs	r3, #0
 8008f90:	683a      	ldr	r2, [r7, #0]
 8008f92:	f7fe fd61 	bl	8007a58 <xQueueGenericSendFromISR>
 8008f96:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3728      	adds	r7, #40	; 0x28
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	bf00      	nop
 8008fa4:	24001668 	.word	0x24001668

08008fa8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b088      	sub	sp, #32
 8008fac:	af02      	add	r7, sp, #8
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fb2:	4b22      	ldr	r3, [pc, #136]	; (800903c <prvProcessExpiredTimer+0x94>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	68db      	ldr	r3, [r3, #12]
 8008fba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	3304      	adds	r3, #4
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f7fe fb1c 	bl	80075fe <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008fcc:	f003 0304 	and.w	r3, r3, #4
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d022      	beq.n	800901a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	699a      	ldr	r2, [r3, #24]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	18d1      	adds	r1, r2, r3
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	683a      	ldr	r2, [r7, #0]
 8008fe0:	6978      	ldr	r0, [r7, #20]
 8008fe2:	f000 f8d1 	bl	8009188 <prvInsertTimerInActiveList>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d01f      	beq.n	800902c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008fec:	2300      	movs	r3, #0
 8008fee:	9300      	str	r3, [sp, #0]
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	687a      	ldr	r2, [r7, #4]
 8008ff4:	2100      	movs	r1, #0
 8008ff6:	6978      	ldr	r0, [r7, #20]
 8008ff8:	f7ff ff88 	bl	8008f0c <xTimerGenericCommand>
 8008ffc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d113      	bne.n	800902c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009008:	f383 8811 	msr	BASEPRI, r3
 800900c:	f3bf 8f6f 	isb	sy
 8009010:	f3bf 8f4f 	dsb	sy
 8009014:	60fb      	str	r3, [r7, #12]
}
 8009016:	bf00      	nop
 8009018:	e7fe      	b.n	8009018 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009020:	f023 0301 	bic.w	r3, r3, #1
 8009024:	b2da      	uxtb	r2, r3
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	6a1b      	ldr	r3, [r3, #32]
 8009030:	6978      	ldr	r0, [r7, #20]
 8009032:	4798      	blx	r3
}
 8009034:	bf00      	nop
 8009036:	3718      	adds	r7, #24
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}
 800903c:	24001660 	.word	0x24001660

08009040 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009048:	f107 0308 	add.w	r3, r7, #8
 800904c:	4618      	mov	r0, r3
 800904e:	f000 f857 	bl	8009100 <prvGetNextExpireTime>
 8009052:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	4619      	mov	r1, r3
 8009058:	68f8      	ldr	r0, [r7, #12]
 800905a:	f000 f803 	bl	8009064 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800905e:	f000 f8d5 	bl	800920c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009062:	e7f1      	b.n	8009048 <prvTimerTask+0x8>

08009064 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b084      	sub	sp, #16
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800906e:	f7ff fa39 	bl	80084e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009072:	f107 0308 	add.w	r3, r7, #8
 8009076:	4618      	mov	r0, r3
 8009078:	f000 f866 	bl	8009148 <prvSampleTimeNow>
 800907c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d130      	bne.n	80090e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d10a      	bne.n	80090a0 <prvProcessTimerOrBlockTask+0x3c>
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	429a      	cmp	r2, r3
 8009090:	d806      	bhi.n	80090a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009092:	f7ff fa35 	bl	8008500 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009096:	68f9      	ldr	r1, [r7, #12]
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f7ff ff85 	bl	8008fa8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800909e:	e024      	b.n	80090ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d008      	beq.n	80090b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80090a6:	4b13      	ldr	r3, [pc, #76]	; (80090f4 <prvProcessTimerOrBlockTask+0x90>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d101      	bne.n	80090b4 <prvProcessTimerOrBlockTask+0x50>
 80090b0:	2301      	movs	r3, #1
 80090b2:	e000      	b.n	80090b6 <prvProcessTimerOrBlockTask+0x52>
 80090b4:	2300      	movs	r3, #0
 80090b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80090b8:	4b0f      	ldr	r3, [pc, #60]	; (80090f8 <prvProcessTimerOrBlockTask+0x94>)
 80090ba:	6818      	ldr	r0, [r3, #0]
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	1ad3      	subs	r3, r2, r3
 80090c2:	683a      	ldr	r2, [r7, #0]
 80090c4:	4619      	mov	r1, r3
 80090c6:	f7fe ff7d 	bl	8007fc4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80090ca:	f7ff fa19 	bl	8008500 <xTaskResumeAll>
 80090ce:	4603      	mov	r3, r0
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d10a      	bne.n	80090ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80090d4:	4b09      	ldr	r3, [pc, #36]	; (80090fc <prvProcessTimerOrBlockTask+0x98>)
 80090d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090da:	601a      	str	r2, [r3, #0]
 80090dc:	f3bf 8f4f 	dsb	sy
 80090e0:	f3bf 8f6f 	isb	sy
}
 80090e4:	e001      	b.n	80090ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80090e6:	f7ff fa0b 	bl	8008500 <xTaskResumeAll>
}
 80090ea:	bf00      	nop
 80090ec:	3710      	adds	r7, #16
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}
 80090f2:	bf00      	nop
 80090f4:	24001664 	.word	0x24001664
 80090f8:	24001668 	.word	0x24001668
 80090fc:	e000ed04 	.word	0xe000ed04

08009100 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009100:	b480      	push	{r7}
 8009102:	b085      	sub	sp, #20
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009108:	4b0e      	ldr	r3, [pc, #56]	; (8009144 <prvGetNextExpireTime+0x44>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d101      	bne.n	8009116 <prvGetNextExpireTime+0x16>
 8009112:	2201      	movs	r2, #1
 8009114:	e000      	b.n	8009118 <prvGetNextExpireTime+0x18>
 8009116:	2200      	movs	r2, #0
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d105      	bne.n	8009130 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009124:	4b07      	ldr	r3, [pc, #28]	; (8009144 <prvGetNextExpireTime+0x44>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	68db      	ldr	r3, [r3, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	60fb      	str	r3, [r7, #12]
 800912e:	e001      	b.n	8009134 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009130:	2300      	movs	r3, #0
 8009132:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009134:	68fb      	ldr	r3, [r7, #12]
}
 8009136:	4618      	mov	r0, r3
 8009138:	3714      	adds	r7, #20
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr
 8009142:	bf00      	nop
 8009144:	24001660 	.word	0x24001660

08009148 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009150:	f7ff fa74 	bl	800863c <xTaskGetTickCount>
 8009154:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009156:	4b0b      	ldr	r3, [pc, #44]	; (8009184 <prvSampleTimeNow+0x3c>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	68fa      	ldr	r2, [r7, #12]
 800915c:	429a      	cmp	r2, r3
 800915e:	d205      	bcs.n	800916c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009160:	f000 f936 	bl	80093d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2201      	movs	r2, #1
 8009168:	601a      	str	r2, [r3, #0]
 800916a:	e002      	b.n	8009172 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009172:	4a04      	ldr	r2, [pc, #16]	; (8009184 <prvSampleTimeNow+0x3c>)
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009178:	68fb      	ldr	r3, [r7, #12]
}
 800917a:	4618      	mov	r0, r3
 800917c:	3710      	adds	r7, #16
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
 8009182:	bf00      	nop
 8009184:	24001670 	.word	0x24001670

08009188 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b086      	sub	sp, #24
 800918c:	af00      	add	r7, sp, #0
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	607a      	str	r2, [r7, #4]
 8009194:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009196:	2300      	movs	r3, #0
 8009198:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	68ba      	ldr	r2, [r7, #8]
 800919e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	68fa      	ldr	r2, [r7, #12]
 80091a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80091a6:	68ba      	ldr	r2, [r7, #8]
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d812      	bhi.n	80091d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091ae:	687a      	ldr	r2, [r7, #4]
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	1ad2      	subs	r2, r2, r3
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	699b      	ldr	r3, [r3, #24]
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d302      	bcc.n	80091c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80091bc:	2301      	movs	r3, #1
 80091be:	617b      	str	r3, [r7, #20]
 80091c0:	e01b      	b.n	80091fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80091c2:	4b10      	ldr	r3, [pc, #64]	; (8009204 <prvInsertTimerInActiveList+0x7c>)
 80091c4:	681a      	ldr	r2, [r3, #0]
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	3304      	adds	r3, #4
 80091ca:	4619      	mov	r1, r3
 80091cc:	4610      	mov	r0, r2
 80091ce:	f7fe f9dd 	bl	800758c <vListInsert>
 80091d2:	e012      	b.n	80091fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80091d4:	687a      	ldr	r2, [r7, #4]
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	429a      	cmp	r2, r3
 80091da:	d206      	bcs.n	80091ea <prvInsertTimerInActiveList+0x62>
 80091dc:	68ba      	ldr	r2, [r7, #8]
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d302      	bcc.n	80091ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80091e4:	2301      	movs	r3, #1
 80091e6:	617b      	str	r3, [r7, #20]
 80091e8:	e007      	b.n	80091fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80091ea:	4b07      	ldr	r3, [pc, #28]	; (8009208 <prvInsertTimerInActiveList+0x80>)
 80091ec:	681a      	ldr	r2, [r3, #0]
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	3304      	adds	r3, #4
 80091f2:	4619      	mov	r1, r3
 80091f4:	4610      	mov	r0, r2
 80091f6:	f7fe f9c9 	bl	800758c <vListInsert>
		}
	}

	return xProcessTimerNow;
 80091fa:	697b      	ldr	r3, [r7, #20]
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3718      	adds	r7, #24
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}
 8009204:	24001664 	.word	0x24001664
 8009208:	24001660 	.word	0x24001660

0800920c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b08e      	sub	sp, #56	; 0x38
 8009210:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009212:	e0ca      	b.n	80093aa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2b00      	cmp	r3, #0
 8009218:	da18      	bge.n	800924c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800921a:	1d3b      	adds	r3, r7, #4
 800921c:	3304      	adds	r3, #4
 800921e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009222:	2b00      	cmp	r3, #0
 8009224:	d10a      	bne.n	800923c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800922a:	f383 8811 	msr	BASEPRI, r3
 800922e:	f3bf 8f6f 	isb	sy
 8009232:	f3bf 8f4f 	dsb	sy
 8009236:	61fb      	str	r3, [r7, #28]
}
 8009238:	bf00      	nop
 800923a:	e7fe      	b.n	800923a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800923c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009242:	6850      	ldr	r0, [r2, #4]
 8009244:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009246:	6892      	ldr	r2, [r2, #8]
 8009248:	4611      	mov	r1, r2
 800924a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2b00      	cmp	r3, #0
 8009250:	f2c0 80ab 	blt.w	80093aa <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800925a:	695b      	ldr	r3, [r3, #20]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d004      	beq.n	800926a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009262:	3304      	adds	r3, #4
 8009264:	4618      	mov	r0, r3
 8009266:	f7fe f9ca 	bl	80075fe <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800926a:	463b      	mov	r3, r7
 800926c:	4618      	mov	r0, r3
 800926e:	f7ff ff6b 	bl	8009148 <prvSampleTimeNow>
 8009272:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2b09      	cmp	r3, #9
 8009278:	f200 8096 	bhi.w	80093a8 <prvProcessReceivedCommands+0x19c>
 800927c:	a201      	add	r2, pc, #4	; (adr r2, 8009284 <prvProcessReceivedCommands+0x78>)
 800927e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009282:	bf00      	nop
 8009284:	080092ad 	.word	0x080092ad
 8009288:	080092ad 	.word	0x080092ad
 800928c:	080092ad 	.word	0x080092ad
 8009290:	08009321 	.word	0x08009321
 8009294:	08009335 	.word	0x08009335
 8009298:	0800937f 	.word	0x0800937f
 800929c:	080092ad 	.word	0x080092ad
 80092a0:	080092ad 	.word	0x080092ad
 80092a4:	08009321 	.word	0x08009321
 80092a8:	08009335 	.word	0x08009335
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80092ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092b2:	f043 0301 	orr.w	r3, r3, #1
 80092b6:	b2da      	uxtb	r2, r3
 80092b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80092be:	68ba      	ldr	r2, [r7, #8]
 80092c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c2:	699b      	ldr	r3, [r3, #24]
 80092c4:	18d1      	adds	r1, r2, r3
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092cc:	f7ff ff5c 	bl	8009188 <prvInsertTimerInActiveList>
 80092d0:	4603      	mov	r3, r0
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d069      	beq.n	80093aa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80092d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d8:	6a1b      	ldr	r3, [r3, #32]
 80092da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80092de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092e4:	f003 0304 	and.w	r3, r3, #4
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d05e      	beq.n	80093aa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80092ec:	68ba      	ldr	r2, [r7, #8]
 80092ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f0:	699b      	ldr	r3, [r3, #24]
 80092f2:	441a      	add	r2, r3
 80092f4:	2300      	movs	r3, #0
 80092f6:	9300      	str	r3, [sp, #0]
 80092f8:	2300      	movs	r3, #0
 80092fa:	2100      	movs	r1, #0
 80092fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092fe:	f7ff fe05 	bl	8008f0c <xTimerGenericCommand>
 8009302:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009304:	6a3b      	ldr	r3, [r7, #32]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d14f      	bne.n	80093aa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800930a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930e:	f383 8811 	msr	BASEPRI, r3
 8009312:	f3bf 8f6f 	isb	sy
 8009316:	f3bf 8f4f 	dsb	sy
 800931a:	61bb      	str	r3, [r7, #24]
}
 800931c:	bf00      	nop
 800931e:	e7fe      	b.n	800931e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009322:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009326:	f023 0301 	bic.w	r3, r3, #1
 800932a:	b2da      	uxtb	r2, r3
 800932c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800932e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009332:	e03a      	b.n	80093aa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009336:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800933a:	f043 0301 	orr.w	r3, r3, #1
 800933e:	b2da      	uxtb	r2, r3
 8009340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009342:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009346:	68ba      	ldr	r2, [r7, #8]
 8009348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800934a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800934c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800934e:	699b      	ldr	r3, [r3, #24]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d10a      	bne.n	800936a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009358:	f383 8811 	msr	BASEPRI, r3
 800935c:	f3bf 8f6f 	isb	sy
 8009360:	f3bf 8f4f 	dsb	sy
 8009364:	617b      	str	r3, [r7, #20]
}
 8009366:	bf00      	nop
 8009368:	e7fe      	b.n	8009368 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800936a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800936c:	699a      	ldr	r2, [r3, #24]
 800936e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009370:	18d1      	adds	r1, r2, r3
 8009372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009376:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009378:	f7ff ff06 	bl	8009188 <prvInsertTimerInActiveList>
					break;
 800937c:	e015      	b.n	80093aa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800937e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009380:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009384:	f003 0302 	and.w	r3, r3, #2
 8009388:	2b00      	cmp	r3, #0
 800938a:	d103      	bne.n	8009394 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800938c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800938e:	f000 fbdf 	bl	8009b50 <vPortFree>
 8009392:	e00a      	b.n	80093aa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009396:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800939a:	f023 0301 	bic.w	r3, r3, #1
 800939e:	b2da      	uxtb	r2, r3
 80093a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80093a6:	e000      	b.n	80093aa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80093a8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80093aa:	4b08      	ldr	r3, [pc, #32]	; (80093cc <prvProcessReceivedCommands+0x1c0>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	1d39      	adds	r1, r7, #4
 80093b0:	2200      	movs	r2, #0
 80093b2:	4618      	mov	r0, r3
 80093b4:	f7fe fbec 	bl	8007b90 <xQueueReceive>
 80093b8:	4603      	mov	r3, r0
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	f47f af2a 	bne.w	8009214 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80093c0:	bf00      	nop
 80093c2:	bf00      	nop
 80093c4:	3730      	adds	r7, #48	; 0x30
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	24001668 	.word	0x24001668

080093d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b088      	sub	sp, #32
 80093d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80093d6:	e048      	b.n	800946a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80093d8:	4b2d      	ldr	r3, [pc, #180]	; (8009490 <prvSwitchTimerLists+0xc0>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	68db      	ldr	r3, [r3, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093e2:	4b2b      	ldr	r3, [pc, #172]	; (8009490 <prvSwitchTimerLists+0xc0>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	68db      	ldr	r3, [r3, #12]
 80093e8:	68db      	ldr	r3, [r3, #12]
 80093ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	3304      	adds	r3, #4
 80093f0:	4618      	mov	r0, r3
 80093f2:	f7fe f904 	bl	80075fe <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	6a1b      	ldr	r3, [r3, #32]
 80093fa:	68f8      	ldr	r0, [r7, #12]
 80093fc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009404:	f003 0304 	and.w	r3, r3, #4
 8009408:	2b00      	cmp	r3, #0
 800940a:	d02e      	beq.n	800946a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	699b      	ldr	r3, [r3, #24]
 8009410:	693a      	ldr	r2, [r7, #16]
 8009412:	4413      	add	r3, r2
 8009414:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009416:	68ba      	ldr	r2, [r7, #8]
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	429a      	cmp	r2, r3
 800941c:	d90e      	bls.n	800943c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	68ba      	ldr	r2, [r7, #8]
 8009422:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	68fa      	ldr	r2, [r7, #12]
 8009428:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800942a:	4b19      	ldr	r3, [pc, #100]	; (8009490 <prvSwitchTimerLists+0xc0>)
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	3304      	adds	r3, #4
 8009432:	4619      	mov	r1, r3
 8009434:	4610      	mov	r0, r2
 8009436:	f7fe f8a9 	bl	800758c <vListInsert>
 800943a:	e016      	b.n	800946a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800943c:	2300      	movs	r3, #0
 800943e:	9300      	str	r3, [sp, #0]
 8009440:	2300      	movs	r3, #0
 8009442:	693a      	ldr	r2, [r7, #16]
 8009444:	2100      	movs	r1, #0
 8009446:	68f8      	ldr	r0, [r7, #12]
 8009448:	f7ff fd60 	bl	8008f0c <xTimerGenericCommand>
 800944c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d10a      	bne.n	800946a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009458:	f383 8811 	msr	BASEPRI, r3
 800945c:	f3bf 8f6f 	isb	sy
 8009460:	f3bf 8f4f 	dsb	sy
 8009464:	603b      	str	r3, [r7, #0]
}
 8009466:	bf00      	nop
 8009468:	e7fe      	b.n	8009468 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800946a:	4b09      	ldr	r3, [pc, #36]	; (8009490 <prvSwitchTimerLists+0xc0>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d1b1      	bne.n	80093d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009474:	4b06      	ldr	r3, [pc, #24]	; (8009490 <prvSwitchTimerLists+0xc0>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800947a:	4b06      	ldr	r3, [pc, #24]	; (8009494 <prvSwitchTimerLists+0xc4>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4a04      	ldr	r2, [pc, #16]	; (8009490 <prvSwitchTimerLists+0xc0>)
 8009480:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009482:	4a04      	ldr	r2, [pc, #16]	; (8009494 <prvSwitchTimerLists+0xc4>)
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	6013      	str	r3, [r2, #0]
}
 8009488:	bf00      	nop
 800948a:	3718      	adds	r7, #24
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}
 8009490:	24001660 	.word	0x24001660
 8009494:	24001664 	.word	0x24001664

08009498 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b082      	sub	sp, #8
 800949c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800949e:	f000 f969 	bl	8009774 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80094a2:	4b15      	ldr	r3, [pc, #84]	; (80094f8 <prvCheckForValidListAndQueue+0x60>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d120      	bne.n	80094ec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80094aa:	4814      	ldr	r0, [pc, #80]	; (80094fc <prvCheckForValidListAndQueue+0x64>)
 80094ac:	f7fe f81d 	bl	80074ea <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80094b0:	4813      	ldr	r0, [pc, #76]	; (8009500 <prvCheckForValidListAndQueue+0x68>)
 80094b2:	f7fe f81a 	bl	80074ea <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80094b6:	4b13      	ldr	r3, [pc, #76]	; (8009504 <prvCheckForValidListAndQueue+0x6c>)
 80094b8:	4a10      	ldr	r2, [pc, #64]	; (80094fc <prvCheckForValidListAndQueue+0x64>)
 80094ba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80094bc:	4b12      	ldr	r3, [pc, #72]	; (8009508 <prvCheckForValidListAndQueue+0x70>)
 80094be:	4a10      	ldr	r2, [pc, #64]	; (8009500 <prvCheckForValidListAndQueue+0x68>)
 80094c0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80094c2:	2300      	movs	r3, #0
 80094c4:	9300      	str	r3, [sp, #0]
 80094c6:	4b11      	ldr	r3, [pc, #68]	; (800950c <prvCheckForValidListAndQueue+0x74>)
 80094c8:	4a11      	ldr	r2, [pc, #68]	; (8009510 <prvCheckForValidListAndQueue+0x78>)
 80094ca:	2110      	movs	r1, #16
 80094cc:	200a      	movs	r0, #10
 80094ce:	f7fe f929 	bl	8007724 <xQueueGenericCreateStatic>
 80094d2:	4603      	mov	r3, r0
 80094d4:	4a08      	ldr	r2, [pc, #32]	; (80094f8 <prvCheckForValidListAndQueue+0x60>)
 80094d6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80094d8:	4b07      	ldr	r3, [pc, #28]	; (80094f8 <prvCheckForValidListAndQueue+0x60>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d005      	beq.n	80094ec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80094e0:	4b05      	ldr	r3, [pc, #20]	; (80094f8 <prvCheckForValidListAndQueue+0x60>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	490b      	ldr	r1, [pc, #44]	; (8009514 <prvCheckForValidListAndQueue+0x7c>)
 80094e6:	4618      	mov	r0, r3
 80094e8:	f7fe fd42 	bl	8007f70 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80094ec:	f000 f972 	bl	80097d4 <vPortExitCritical>
}
 80094f0:	bf00      	nop
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	bf00      	nop
 80094f8:	24001668 	.word	0x24001668
 80094fc:	24001638 	.word	0x24001638
 8009500:	2400164c 	.word	0x2400164c
 8009504:	24001660 	.word	0x24001660
 8009508:	24001664 	.word	0x24001664
 800950c:	24001714 	.word	0x24001714
 8009510:	24001674 	.word	0x24001674
 8009514:	0800ca44 	.word	0x0800ca44

08009518 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009518:	b480      	push	{r7}
 800951a:	b085      	sub	sp, #20
 800951c:	af00      	add	r7, sp, #0
 800951e:	60f8      	str	r0, [r7, #12]
 8009520:	60b9      	str	r1, [r7, #8]
 8009522:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	3b04      	subs	r3, #4
 8009528:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009530:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	3b04      	subs	r3, #4
 8009536:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	f023 0201 	bic.w	r2, r3, #1
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	3b04      	subs	r3, #4
 8009546:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009548:	4a0c      	ldr	r2, [pc, #48]	; (800957c <pxPortInitialiseStack+0x64>)
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	3b14      	subs	r3, #20
 8009552:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	3b04      	subs	r3, #4
 800955e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	f06f 0202 	mvn.w	r2, #2
 8009566:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	3b20      	subs	r3, #32
 800956c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800956e:	68fb      	ldr	r3, [r7, #12]
}
 8009570:	4618      	mov	r0, r3
 8009572:	3714      	adds	r7, #20
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr
 800957c:	08009581 	.word	0x08009581

08009580 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009580:	b480      	push	{r7}
 8009582:	b085      	sub	sp, #20
 8009584:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009586:	2300      	movs	r3, #0
 8009588:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800958a:	4b12      	ldr	r3, [pc, #72]	; (80095d4 <prvTaskExitError+0x54>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009592:	d00a      	beq.n	80095aa <prvTaskExitError+0x2a>
	__asm volatile
 8009594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009598:	f383 8811 	msr	BASEPRI, r3
 800959c:	f3bf 8f6f 	isb	sy
 80095a0:	f3bf 8f4f 	dsb	sy
 80095a4:	60fb      	str	r3, [r7, #12]
}
 80095a6:	bf00      	nop
 80095a8:	e7fe      	b.n	80095a8 <prvTaskExitError+0x28>
	__asm volatile
 80095aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ae:	f383 8811 	msr	BASEPRI, r3
 80095b2:	f3bf 8f6f 	isb	sy
 80095b6:	f3bf 8f4f 	dsb	sy
 80095ba:	60bb      	str	r3, [r7, #8]
}
 80095bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80095be:	bf00      	nop
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d0fc      	beq.n	80095c0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80095c6:	bf00      	nop
 80095c8:	bf00      	nop
 80095ca:	3714      	adds	r7, #20
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr
 80095d4:	24000010 	.word	0x24000010
	...

080095e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80095e0:	4b07      	ldr	r3, [pc, #28]	; (8009600 <pxCurrentTCBConst2>)
 80095e2:	6819      	ldr	r1, [r3, #0]
 80095e4:	6808      	ldr	r0, [r1, #0]
 80095e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ea:	f380 8809 	msr	PSP, r0
 80095ee:	f3bf 8f6f 	isb	sy
 80095f2:	f04f 0000 	mov.w	r0, #0
 80095f6:	f380 8811 	msr	BASEPRI, r0
 80095fa:	4770      	bx	lr
 80095fc:	f3af 8000 	nop.w

08009600 <pxCurrentTCBConst2>:
 8009600:	24001138 	.word	0x24001138
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009604:	bf00      	nop
 8009606:	bf00      	nop

08009608 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009608:	4808      	ldr	r0, [pc, #32]	; (800962c <prvPortStartFirstTask+0x24>)
 800960a:	6800      	ldr	r0, [r0, #0]
 800960c:	6800      	ldr	r0, [r0, #0]
 800960e:	f380 8808 	msr	MSP, r0
 8009612:	f04f 0000 	mov.w	r0, #0
 8009616:	f380 8814 	msr	CONTROL, r0
 800961a:	b662      	cpsie	i
 800961c:	b661      	cpsie	f
 800961e:	f3bf 8f4f 	dsb	sy
 8009622:	f3bf 8f6f 	isb	sy
 8009626:	df00      	svc	0
 8009628:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800962a:	bf00      	nop
 800962c:	e000ed08 	.word	0xe000ed08

08009630 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b086      	sub	sp, #24
 8009634:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009636:	4b46      	ldr	r3, [pc, #280]	; (8009750 <xPortStartScheduler+0x120>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4a46      	ldr	r2, [pc, #280]	; (8009754 <xPortStartScheduler+0x124>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d10a      	bne.n	8009656 <xPortStartScheduler+0x26>
	__asm volatile
 8009640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009644:	f383 8811 	msr	BASEPRI, r3
 8009648:	f3bf 8f6f 	isb	sy
 800964c:	f3bf 8f4f 	dsb	sy
 8009650:	613b      	str	r3, [r7, #16]
}
 8009652:	bf00      	nop
 8009654:	e7fe      	b.n	8009654 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009656:	4b3e      	ldr	r3, [pc, #248]	; (8009750 <xPortStartScheduler+0x120>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a3f      	ldr	r2, [pc, #252]	; (8009758 <xPortStartScheduler+0x128>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d10a      	bne.n	8009676 <xPortStartScheduler+0x46>
	__asm volatile
 8009660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009664:	f383 8811 	msr	BASEPRI, r3
 8009668:	f3bf 8f6f 	isb	sy
 800966c:	f3bf 8f4f 	dsb	sy
 8009670:	60fb      	str	r3, [r7, #12]
}
 8009672:	bf00      	nop
 8009674:	e7fe      	b.n	8009674 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009676:	4b39      	ldr	r3, [pc, #228]	; (800975c <xPortStartScheduler+0x12c>)
 8009678:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	b2db      	uxtb	r3, r3
 8009680:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	22ff      	movs	r2, #255	; 0xff
 8009686:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	781b      	ldrb	r3, [r3, #0]
 800968c:	b2db      	uxtb	r3, r3
 800968e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009690:	78fb      	ldrb	r3, [r7, #3]
 8009692:	b2db      	uxtb	r3, r3
 8009694:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009698:	b2da      	uxtb	r2, r3
 800969a:	4b31      	ldr	r3, [pc, #196]	; (8009760 <xPortStartScheduler+0x130>)
 800969c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800969e:	4b31      	ldr	r3, [pc, #196]	; (8009764 <xPortStartScheduler+0x134>)
 80096a0:	2207      	movs	r2, #7
 80096a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80096a4:	e009      	b.n	80096ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80096a6:	4b2f      	ldr	r3, [pc, #188]	; (8009764 <xPortStartScheduler+0x134>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	3b01      	subs	r3, #1
 80096ac:	4a2d      	ldr	r2, [pc, #180]	; (8009764 <xPortStartScheduler+0x134>)
 80096ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80096b0:	78fb      	ldrb	r3, [r7, #3]
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	005b      	lsls	r3, r3, #1
 80096b6:	b2db      	uxtb	r3, r3
 80096b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80096ba:	78fb      	ldrb	r3, [r7, #3]
 80096bc:	b2db      	uxtb	r3, r3
 80096be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096c2:	2b80      	cmp	r3, #128	; 0x80
 80096c4:	d0ef      	beq.n	80096a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80096c6:	4b27      	ldr	r3, [pc, #156]	; (8009764 <xPortStartScheduler+0x134>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f1c3 0307 	rsb	r3, r3, #7
 80096ce:	2b04      	cmp	r3, #4
 80096d0:	d00a      	beq.n	80096e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80096d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d6:	f383 8811 	msr	BASEPRI, r3
 80096da:	f3bf 8f6f 	isb	sy
 80096de:	f3bf 8f4f 	dsb	sy
 80096e2:	60bb      	str	r3, [r7, #8]
}
 80096e4:	bf00      	nop
 80096e6:	e7fe      	b.n	80096e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80096e8:	4b1e      	ldr	r3, [pc, #120]	; (8009764 <xPortStartScheduler+0x134>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	021b      	lsls	r3, r3, #8
 80096ee:	4a1d      	ldr	r2, [pc, #116]	; (8009764 <xPortStartScheduler+0x134>)
 80096f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80096f2:	4b1c      	ldr	r3, [pc, #112]	; (8009764 <xPortStartScheduler+0x134>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80096fa:	4a1a      	ldr	r2, [pc, #104]	; (8009764 <xPortStartScheduler+0x134>)
 80096fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	b2da      	uxtb	r2, r3
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009706:	4b18      	ldr	r3, [pc, #96]	; (8009768 <xPortStartScheduler+0x138>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a17      	ldr	r2, [pc, #92]	; (8009768 <xPortStartScheduler+0x138>)
 800970c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009710:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009712:	4b15      	ldr	r3, [pc, #84]	; (8009768 <xPortStartScheduler+0x138>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a14      	ldr	r2, [pc, #80]	; (8009768 <xPortStartScheduler+0x138>)
 8009718:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800971c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800971e:	f000 f8dd 	bl	80098dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009722:	4b12      	ldr	r3, [pc, #72]	; (800976c <xPortStartScheduler+0x13c>)
 8009724:	2200      	movs	r2, #0
 8009726:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009728:	f000 f8fc 	bl	8009924 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800972c:	4b10      	ldr	r3, [pc, #64]	; (8009770 <xPortStartScheduler+0x140>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4a0f      	ldr	r2, [pc, #60]	; (8009770 <xPortStartScheduler+0x140>)
 8009732:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009736:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009738:	f7ff ff66 	bl	8009608 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800973c:	f7ff f848 	bl	80087d0 <vTaskSwitchContext>
	prvTaskExitError();
 8009740:	f7ff ff1e 	bl	8009580 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009744:	2300      	movs	r3, #0
}
 8009746:	4618      	mov	r0, r3
 8009748:	3718      	adds	r7, #24
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
 800974e:	bf00      	nop
 8009750:	e000ed00 	.word	0xe000ed00
 8009754:	410fc271 	.word	0x410fc271
 8009758:	410fc270 	.word	0x410fc270
 800975c:	e000e400 	.word	0xe000e400
 8009760:	24001764 	.word	0x24001764
 8009764:	24001768 	.word	0x24001768
 8009768:	e000ed20 	.word	0xe000ed20
 800976c:	24000010 	.word	0x24000010
 8009770:	e000ef34 	.word	0xe000ef34

08009774 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009774:	b480      	push	{r7}
 8009776:	b083      	sub	sp, #12
 8009778:	af00      	add	r7, sp, #0
	__asm volatile
 800977a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800977e:	f383 8811 	msr	BASEPRI, r3
 8009782:	f3bf 8f6f 	isb	sy
 8009786:	f3bf 8f4f 	dsb	sy
 800978a:	607b      	str	r3, [r7, #4]
}
 800978c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800978e:	4b0f      	ldr	r3, [pc, #60]	; (80097cc <vPortEnterCritical+0x58>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	3301      	adds	r3, #1
 8009794:	4a0d      	ldr	r2, [pc, #52]	; (80097cc <vPortEnterCritical+0x58>)
 8009796:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009798:	4b0c      	ldr	r3, [pc, #48]	; (80097cc <vPortEnterCritical+0x58>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	2b01      	cmp	r3, #1
 800979e:	d10f      	bne.n	80097c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80097a0:	4b0b      	ldr	r3, [pc, #44]	; (80097d0 <vPortEnterCritical+0x5c>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d00a      	beq.n	80097c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80097aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ae:	f383 8811 	msr	BASEPRI, r3
 80097b2:	f3bf 8f6f 	isb	sy
 80097b6:	f3bf 8f4f 	dsb	sy
 80097ba:	603b      	str	r3, [r7, #0]
}
 80097bc:	bf00      	nop
 80097be:	e7fe      	b.n	80097be <vPortEnterCritical+0x4a>
	}
}
 80097c0:	bf00      	nop
 80097c2:	370c      	adds	r7, #12
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr
 80097cc:	24000010 	.word	0x24000010
 80097d0:	e000ed04 	.word	0xe000ed04

080097d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80097d4:	b480      	push	{r7}
 80097d6:	b083      	sub	sp, #12
 80097d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80097da:	4b12      	ldr	r3, [pc, #72]	; (8009824 <vPortExitCritical+0x50>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d10a      	bne.n	80097f8 <vPortExitCritical+0x24>
	__asm volatile
 80097e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e6:	f383 8811 	msr	BASEPRI, r3
 80097ea:	f3bf 8f6f 	isb	sy
 80097ee:	f3bf 8f4f 	dsb	sy
 80097f2:	607b      	str	r3, [r7, #4]
}
 80097f4:	bf00      	nop
 80097f6:	e7fe      	b.n	80097f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80097f8:	4b0a      	ldr	r3, [pc, #40]	; (8009824 <vPortExitCritical+0x50>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	3b01      	subs	r3, #1
 80097fe:	4a09      	ldr	r2, [pc, #36]	; (8009824 <vPortExitCritical+0x50>)
 8009800:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009802:	4b08      	ldr	r3, [pc, #32]	; (8009824 <vPortExitCritical+0x50>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d105      	bne.n	8009816 <vPortExitCritical+0x42>
 800980a:	2300      	movs	r3, #0
 800980c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	f383 8811 	msr	BASEPRI, r3
}
 8009814:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009816:	bf00      	nop
 8009818:	370c      	adds	r7, #12
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr
 8009822:	bf00      	nop
 8009824:	24000010 	.word	0x24000010
	...

08009830 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009830:	f3ef 8009 	mrs	r0, PSP
 8009834:	f3bf 8f6f 	isb	sy
 8009838:	4b15      	ldr	r3, [pc, #84]	; (8009890 <pxCurrentTCBConst>)
 800983a:	681a      	ldr	r2, [r3, #0]
 800983c:	f01e 0f10 	tst.w	lr, #16
 8009840:	bf08      	it	eq
 8009842:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009846:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800984a:	6010      	str	r0, [r2, #0]
 800984c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009850:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009854:	f380 8811 	msr	BASEPRI, r0
 8009858:	f3bf 8f4f 	dsb	sy
 800985c:	f3bf 8f6f 	isb	sy
 8009860:	f7fe ffb6 	bl	80087d0 <vTaskSwitchContext>
 8009864:	f04f 0000 	mov.w	r0, #0
 8009868:	f380 8811 	msr	BASEPRI, r0
 800986c:	bc09      	pop	{r0, r3}
 800986e:	6819      	ldr	r1, [r3, #0]
 8009870:	6808      	ldr	r0, [r1, #0]
 8009872:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009876:	f01e 0f10 	tst.w	lr, #16
 800987a:	bf08      	it	eq
 800987c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009880:	f380 8809 	msr	PSP, r0
 8009884:	f3bf 8f6f 	isb	sy
 8009888:	4770      	bx	lr
 800988a:	bf00      	nop
 800988c:	f3af 8000 	nop.w

08009890 <pxCurrentTCBConst>:
 8009890:	24001138 	.word	0x24001138
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009894:	bf00      	nop
 8009896:	bf00      	nop

08009898 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b082      	sub	sp, #8
 800989c:	af00      	add	r7, sp, #0
	__asm volatile
 800989e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a2:	f383 8811 	msr	BASEPRI, r3
 80098a6:	f3bf 8f6f 	isb	sy
 80098aa:	f3bf 8f4f 	dsb	sy
 80098ae:	607b      	str	r3, [r7, #4]
}
 80098b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80098b2:	f7fe fed3 	bl	800865c <xTaskIncrementTick>
 80098b6:	4603      	mov	r3, r0
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d003      	beq.n	80098c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80098bc:	4b06      	ldr	r3, [pc, #24]	; (80098d8 <xPortSysTickHandler+0x40>)
 80098be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098c2:	601a      	str	r2, [r3, #0]
 80098c4:	2300      	movs	r3, #0
 80098c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	f383 8811 	msr	BASEPRI, r3
}
 80098ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80098d0:	bf00      	nop
 80098d2:	3708      	adds	r7, #8
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}
 80098d8:	e000ed04 	.word	0xe000ed04

080098dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80098dc:	b480      	push	{r7}
 80098de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80098e0:	4b0b      	ldr	r3, [pc, #44]	; (8009910 <vPortSetupTimerInterrupt+0x34>)
 80098e2:	2200      	movs	r2, #0
 80098e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80098e6:	4b0b      	ldr	r3, [pc, #44]	; (8009914 <vPortSetupTimerInterrupt+0x38>)
 80098e8:	2200      	movs	r2, #0
 80098ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80098ec:	4b0a      	ldr	r3, [pc, #40]	; (8009918 <vPortSetupTimerInterrupt+0x3c>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	4a0a      	ldr	r2, [pc, #40]	; (800991c <vPortSetupTimerInterrupt+0x40>)
 80098f2:	fba2 2303 	umull	r2, r3, r2, r3
 80098f6:	099b      	lsrs	r3, r3, #6
 80098f8:	4a09      	ldr	r2, [pc, #36]	; (8009920 <vPortSetupTimerInterrupt+0x44>)
 80098fa:	3b01      	subs	r3, #1
 80098fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80098fe:	4b04      	ldr	r3, [pc, #16]	; (8009910 <vPortSetupTimerInterrupt+0x34>)
 8009900:	2207      	movs	r2, #7
 8009902:	601a      	str	r2, [r3, #0]
}
 8009904:	bf00      	nop
 8009906:	46bd      	mov	sp, r7
 8009908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990c:	4770      	bx	lr
 800990e:	bf00      	nop
 8009910:	e000e010 	.word	0xe000e010
 8009914:	e000e018 	.word	0xe000e018
 8009918:	24000000 	.word	0x24000000
 800991c:	10624dd3 	.word	0x10624dd3
 8009920:	e000e014 	.word	0xe000e014

08009924 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009924:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009934 <vPortEnableVFP+0x10>
 8009928:	6801      	ldr	r1, [r0, #0]
 800992a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800992e:	6001      	str	r1, [r0, #0]
 8009930:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009932:	bf00      	nop
 8009934:	e000ed88 	.word	0xe000ed88

08009938 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009938:	b480      	push	{r7}
 800993a:	b085      	sub	sp, #20
 800993c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800993e:	f3ef 8305 	mrs	r3, IPSR
 8009942:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2b0f      	cmp	r3, #15
 8009948:	d914      	bls.n	8009974 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800994a:	4a17      	ldr	r2, [pc, #92]	; (80099a8 <vPortValidateInterruptPriority+0x70>)
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	4413      	add	r3, r2
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009954:	4b15      	ldr	r3, [pc, #84]	; (80099ac <vPortValidateInterruptPriority+0x74>)
 8009956:	781b      	ldrb	r3, [r3, #0]
 8009958:	7afa      	ldrb	r2, [r7, #11]
 800995a:	429a      	cmp	r2, r3
 800995c:	d20a      	bcs.n	8009974 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800995e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009962:	f383 8811 	msr	BASEPRI, r3
 8009966:	f3bf 8f6f 	isb	sy
 800996a:	f3bf 8f4f 	dsb	sy
 800996e:	607b      	str	r3, [r7, #4]
}
 8009970:	bf00      	nop
 8009972:	e7fe      	b.n	8009972 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009974:	4b0e      	ldr	r3, [pc, #56]	; (80099b0 <vPortValidateInterruptPriority+0x78>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800997c:	4b0d      	ldr	r3, [pc, #52]	; (80099b4 <vPortValidateInterruptPriority+0x7c>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	429a      	cmp	r2, r3
 8009982:	d90a      	bls.n	800999a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009988:	f383 8811 	msr	BASEPRI, r3
 800998c:	f3bf 8f6f 	isb	sy
 8009990:	f3bf 8f4f 	dsb	sy
 8009994:	603b      	str	r3, [r7, #0]
}
 8009996:	bf00      	nop
 8009998:	e7fe      	b.n	8009998 <vPortValidateInterruptPriority+0x60>
	}
 800999a:	bf00      	nop
 800999c:	3714      	adds	r7, #20
 800999e:	46bd      	mov	sp, r7
 80099a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a4:	4770      	bx	lr
 80099a6:	bf00      	nop
 80099a8:	e000e3f0 	.word	0xe000e3f0
 80099ac:	24001764 	.word	0x24001764
 80099b0:	e000ed0c 	.word	0xe000ed0c
 80099b4:	24001768 	.word	0x24001768

080099b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b08a      	sub	sp, #40	; 0x28
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80099c0:	2300      	movs	r3, #0
 80099c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80099c4:	f7fe fd8e 	bl	80084e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80099c8:	4b5b      	ldr	r3, [pc, #364]	; (8009b38 <pvPortMalloc+0x180>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d101      	bne.n	80099d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80099d0:	f000 f920 	bl	8009c14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80099d4:	4b59      	ldr	r3, [pc, #356]	; (8009b3c <pvPortMalloc+0x184>)
 80099d6:	681a      	ldr	r2, [r3, #0]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	4013      	ands	r3, r2
 80099dc:	2b00      	cmp	r3, #0
 80099de:	f040 8093 	bne.w	8009b08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d01d      	beq.n	8009a24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80099e8:	2208      	movs	r2, #8
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	4413      	add	r3, r2
 80099ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f003 0307 	and.w	r3, r3, #7
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d014      	beq.n	8009a24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f023 0307 	bic.w	r3, r3, #7
 8009a00:	3308      	adds	r3, #8
 8009a02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f003 0307 	and.w	r3, r3, #7
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d00a      	beq.n	8009a24 <pvPortMalloc+0x6c>
	__asm volatile
 8009a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a12:	f383 8811 	msr	BASEPRI, r3
 8009a16:	f3bf 8f6f 	isb	sy
 8009a1a:	f3bf 8f4f 	dsb	sy
 8009a1e:	617b      	str	r3, [r7, #20]
}
 8009a20:	bf00      	nop
 8009a22:	e7fe      	b.n	8009a22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d06e      	beq.n	8009b08 <pvPortMalloc+0x150>
 8009a2a:	4b45      	ldr	r3, [pc, #276]	; (8009b40 <pvPortMalloc+0x188>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	687a      	ldr	r2, [r7, #4]
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d869      	bhi.n	8009b08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009a34:	4b43      	ldr	r3, [pc, #268]	; (8009b44 <pvPortMalloc+0x18c>)
 8009a36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009a38:	4b42      	ldr	r3, [pc, #264]	; (8009b44 <pvPortMalloc+0x18c>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a3e:	e004      	b.n	8009a4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4c:	685b      	ldr	r3, [r3, #4]
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d903      	bls.n	8009a5c <pvPortMalloc+0xa4>
 8009a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d1f1      	bne.n	8009a40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009a5c:	4b36      	ldr	r3, [pc, #216]	; (8009b38 <pvPortMalloc+0x180>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d050      	beq.n	8009b08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009a66:	6a3b      	ldr	r3, [r7, #32]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	2208      	movs	r2, #8
 8009a6c:	4413      	add	r3, r2
 8009a6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a72:	681a      	ldr	r2, [r3, #0]
 8009a74:	6a3b      	ldr	r3, [r7, #32]
 8009a76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a7a:	685a      	ldr	r2, [r3, #4]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	1ad2      	subs	r2, r2, r3
 8009a80:	2308      	movs	r3, #8
 8009a82:	005b      	lsls	r3, r3, #1
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d91f      	bls.n	8009ac8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	4413      	add	r3, r2
 8009a8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a90:	69bb      	ldr	r3, [r7, #24]
 8009a92:	f003 0307 	and.w	r3, r3, #7
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d00a      	beq.n	8009ab0 <pvPortMalloc+0xf8>
	__asm volatile
 8009a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a9e:	f383 8811 	msr	BASEPRI, r3
 8009aa2:	f3bf 8f6f 	isb	sy
 8009aa6:	f3bf 8f4f 	dsb	sy
 8009aaa:	613b      	str	r3, [r7, #16]
}
 8009aac:	bf00      	nop
 8009aae:	e7fe      	b.n	8009aae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab2:	685a      	ldr	r2, [r3, #4]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	1ad2      	subs	r2, r2, r3
 8009ab8:	69bb      	ldr	r3, [r7, #24]
 8009aba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009abe:	687a      	ldr	r2, [r7, #4]
 8009ac0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009ac2:	69b8      	ldr	r0, [r7, #24]
 8009ac4:	f000 f908 	bl	8009cd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009ac8:	4b1d      	ldr	r3, [pc, #116]	; (8009b40 <pvPortMalloc+0x188>)
 8009aca:	681a      	ldr	r2, [r3, #0]
 8009acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	1ad3      	subs	r3, r2, r3
 8009ad2:	4a1b      	ldr	r2, [pc, #108]	; (8009b40 <pvPortMalloc+0x188>)
 8009ad4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009ad6:	4b1a      	ldr	r3, [pc, #104]	; (8009b40 <pvPortMalloc+0x188>)
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	4b1b      	ldr	r3, [pc, #108]	; (8009b48 <pvPortMalloc+0x190>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	429a      	cmp	r2, r3
 8009ae0:	d203      	bcs.n	8009aea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009ae2:	4b17      	ldr	r3, [pc, #92]	; (8009b40 <pvPortMalloc+0x188>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4a18      	ldr	r2, [pc, #96]	; (8009b48 <pvPortMalloc+0x190>)
 8009ae8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aec:	685a      	ldr	r2, [r3, #4]
 8009aee:	4b13      	ldr	r3, [pc, #76]	; (8009b3c <pvPortMalloc+0x184>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	431a      	orrs	r2, r3
 8009af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009afa:	2200      	movs	r2, #0
 8009afc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009afe:	4b13      	ldr	r3, [pc, #76]	; (8009b4c <pvPortMalloc+0x194>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	3301      	adds	r3, #1
 8009b04:	4a11      	ldr	r2, [pc, #68]	; (8009b4c <pvPortMalloc+0x194>)
 8009b06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009b08:	f7fe fcfa 	bl	8008500 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b0c:	69fb      	ldr	r3, [r7, #28]
 8009b0e:	f003 0307 	and.w	r3, r3, #7
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d00a      	beq.n	8009b2c <pvPortMalloc+0x174>
	__asm volatile
 8009b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b1a:	f383 8811 	msr	BASEPRI, r3
 8009b1e:	f3bf 8f6f 	isb	sy
 8009b22:	f3bf 8f4f 	dsb	sy
 8009b26:	60fb      	str	r3, [r7, #12]
}
 8009b28:	bf00      	nop
 8009b2a:	e7fe      	b.n	8009b2a <pvPortMalloc+0x172>
	return pvReturn;
 8009b2c:	69fb      	ldr	r3, [r7, #28]
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3728      	adds	r7, #40	; 0x28
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	bf00      	nop
 8009b38:	24005374 	.word	0x24005374
 8009b3c:	24005388 	.word	0x24005388
 8009b40:	24005378 	.word	0x24005378
 8009b44:	2400536c 	.word	0x2400536c
 8009b48:	2400537c 	.word	0x2400537c
 8009b4c:	24005380 	.word	0x24005380

08009b50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b086      	sub	sp, #24
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d04d      	beq.n	8009bfe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009b62:	2308      	movs	r3, #8
 8009b64:	425b      	negs	r3, r3
 8009b66:	697a      	ldr	r2, [r7, #20]
 8009b68:	4413      	add	r3, r2
 8009b6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	685a      	ldr	r2, [r3, #4]
 8009b74:	4b24      	ldr	r3, [pc, #144]	; (8009c08 <vPortFree+0xb8>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4013      	ands	r3, r2
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d10a      	bne.n	8009b94 <vPortFree+0x44>
	__asm volatile
 8009b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b82:	f383 8811 	msr	BASEPRI, r3
 8009b86:	f3bf 8f6f 	isb	sy
 8009b8a:	f3bf 8f4f 	dsb	sy
 8009b8e:	60fb      	str	r3, [r7, #12]
}
 8009b90:	bf00      	nop
 8009b92:	e7fe      	b.n	8009b92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d00a      	beq.n	8009bb2 <vPortFree+0x62>
	__asm volatile
 8009b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba0:	f383 8811 	msr	BASEPRI, r3
 8009ba4:	f3bf 8f6f 	isb	sy
 8009ba8:	f3bf 8f4f 	dsb	sy
 8009bac:	60bb      	str	r3, [r7, #8]
}
 8009bae:	bf00      	nop
 8009bb0:	e7fe      	b.n	8009bb0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	685a      	ldr	r2, [r3, #4]
 8009bb6:	4b14      	ldr	r3, [pc, #80]	; (8009c08 <vPortFree+0xb8>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4013      	ands	r3, r2
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d01e      	beq.n	8009bfe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d11a      	bne.n	8009bfe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	685a      	ldr	r2, [r3, #4]
 8009bcc:	4b0e      	ldr	r3, [pc, #56]	; (8009c08 <vPortFree+0xb8>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	43db      	mvns	r3, r3
 8009bd2:	401a      	ands	r2, r3
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009bd8:	f7fe fc84 	bl	80084e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009bdc:	693b      	ldr	r3, [r7, #16]
 8009bde:	685a      	ldr	r2, [r3, #4]
 8009be0:	4b0a      	ldr	r3, [pc, #40]	; (8009c0c <vPortFree+0xbc>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4413      	add	r3, r2
 8009be6:	4a09      	ldr	r2, [pc, #36]	; (8009c0c <vPortFree+0xbc>)
 8009be8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009bea:	6938      	ldr	r0, [r7, #16]
 8009bec:	f000 f874 	bl	8009cd8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009bf0:	4b07      	ldr	r3, [pc, #28]	; (8009c10 <vPortFree+0xc0>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	3301      	adds	r3, #1
 8009bf6:	4a06      	ldr	r2, [pc, #24]	; (8009c10 <vPortFree+0xc0>)
 8009bf8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009bfa:	f7fe fc81 	bl	8008500 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009bfe:	bf00      	nop
 8009c00:	3718      	adds	r7, #24
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	bf00      	nop
 8009c08:	24005388 	.word	0x24005388
 8009c0c:	24005378 	.word	0x24005378
 8009c10:	24005384 	.word	0x24005384

08009c14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009c14:	b480      	push	{r7}
 8009c16:	b085      	sub	sp, #20
 8009c18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009c1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009c1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009c20:	4b27      	ldr	r3, [pc, #156]	; (8009cc0 <prvHeapInit+0xac>)
 8009c22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	f003 0307 	and.w	r3, r3, #7
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d00c      	beq.n	8009c48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	3307      	adds	r3, #7
 8009c32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	f023 0307 	bic.w	r3, r3, #7
 8009c3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009c3c:	68ba      	ldr	r2, [r7, #8]
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	1ad3      	subs	r3, r2, r3
 8009c42:	4a1f      	ldr	r2, [pc, #124]	; (8009cc0 <prvHeapInit+0xac>)
 8009c44:	4413      	add	r3, r2
 8009c46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009c4c:	4a1d      	ldr	r2, [pc, #116]	; (8009cc4 <prvHeapInit+0xb0>)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009c52:	4b1c      	ldr	r3, [pc, #112]	; (8009cc4 <prvHeapInit+0xb0>)
 8009c54:	2200      	movs	r2, #0
 8009c56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	68ba      	ldr	r2, [r7, #8]
 8009c5c:	4413      	add	r3, r2
 8009c5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009c60:	2208      	movs	r2, #8
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	1a9b      	subs	r3, r3, r2
 8009c66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f023 0307 	bic.w	r3, r3, #7
 8009c6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	4a15      	ldr	r2, [pc, #84]	; (8009cc8 <prvHeapInit+0xb4>)
 8009c74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009c76:	4b14      	ldr	r3, [pc, #80]	; (8009cc8 <prvHeapInit+0xb4>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009c7e:	4b12      	ldr	r3, [pc, #72]	; (8009cc8 <prvHeapInit+0xb4>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	2200      	movs	r2, #0
 8009c84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	68fa      	ldr	r2, [r7, #12]
 8009c8e:	1ad2      	subs	r2, r2, r3
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009c94:	4b0c      	ldr	r3, [pc, #48]	; (8009cc8 <prvHeapInit+0xb4>)
 8009c96:	681a      	ldr	r2, [r3, #0]
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	4a0a      	ldr	r2, [pc, #40]	; (8009ccc <prvHeapInit+0xb8>)
 8009ca2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	685b      	ldr	r3, [r3, #4]
 8009ca8:	4a09      	ldr	r2, [pc, #36]	; (8009cd0 <prvHeapInit+0xbc>)
 8009caa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009cac:	4b09      	ldr	r3, [pc, #36]	; (8009cd4 <prvHeapInit+0xc0>)
 8009cae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009cb2:	601a      	str	r2, [r3, #0]
}
 8009cb4:	bf00      	nop
 8009cb6:	3714      	adds	r7, #20
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbe:	4770      	bx	lr
 8009cc0:	2400176c 	.word	0x2400176c
 8009cc4:	2400536c 	.word	0x2400536c
 8009cc8:	24005374 	.word	0x24005374
 8009ccc:	2400537c 	.word	0x2400537c
 8009cd0:	24005378 	.word	0x24005378
 8009cd4:	24005388 	.word	0x24005388

08009cd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b085      	sub	sp, #20
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009ce0:	4b28      	ldr	r3, [pc, #160]	; (8009d84 <prvInsertBlockIntoFreeList+0xac>)
 8009ce2:	60fb      	str	r3, [r7, #12]
 8009ce4:	e002      	b.n	8009cec <prvInsertBlockIntoFreeList+0x14>
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	60fb      	str	r3, [r7, #12]
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	687a      	ldr	r2, [r7, #4]
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	d8f7      	bhi.n	8009ce6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	68ba      	ldr	r2, [r7, #8]
 8009d00:	4413      	add	r3, r2
 8009d02:	687a      	ldr	r2, [r7, #4]
 8009d04:	429a      	cmp	r2, r3
 8009d06:	d108      	bne.n	8009d1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	685a      	ldr	r2, [r3, #4]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	685b      	ldr	r3, [r3, #4]
 8009d10:	441a      	add	r2, r3
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	685b      	ldr	r3, [r3, #4]
 8009d22:	68ba      	ldr	r2, [r7, #8]
 8009d24:	441a      	add	r2, r3
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d118      	bne.n	8009d60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681a      	ldr	r2, [r3, #0]
 8009d32:	4b15      	ldr	r3, [pc, #84]	; (8009d88 <prvInsertBlockIntoFreeList+0xb0>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	429a      	cmp	r2, r3
 8009d38:	d00d      	beq.n	8009d56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	685a      	ldr	r2, [r3, #4]
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	685b      	ldr	r3, [r3, #4]
 8009d44:	441a      	add	r2, r3
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	681a      	ldr	r2, [r3, #0]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	601a      	str	r2, [r3, #0]
 8009d54:	e008      	b.n	8009d68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009d56:	4b0c      	ldr	r3, [pc, #48]	; (8009d88 <prvInsertBlockIntoFreeList+0xb0>)
 8009d58:	681a      	ldr	r2, [r3, #0]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	601a      	str	r2, [r3, #0]
 8009d5e:	e003      	b.n	8009d68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681a      	ldr	r2, [r3, #0]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009d68:	68fa      	ldr	r2, [r7, #12]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	429a      	cmp	r2, r3
 8009d6e:	d002      	beq.n	8009d76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d76:	bf00      	nop
 8009d78:	3714      	adds	r7, #20
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr
 8009d82:	bf00      	nop
 8009d84:	2400536c 	.word	0x2400536c
 8009d88:	24005374 	.word	0x24005374

08009d8c <__cvt>:
 8009d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d8e:	ed2d 8b02 	vpush	{d8}
 8009d92:	eeb0 8b40 	vmov.f64	d8, d0
 8009d96:	b085      	sub	sp, #20
 8009d98:	4617      	mov	r7, r2
 8009d9a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009d9c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009d9e:	ee18 2a90 	vmov	r2, s17
 8009da2:	f025 0520 	bic.w	r5, r5, #32
 8009da6:	2a00      	cmp	r2, #0
 8009da8:	bfb6      	itet	lt
 8009daa:	222d      	movlt	r2, #45	; 0x2d
 8009dac:	2200      	movge	r2, #0
 8009dae:	eeb1 8b40 	vneglt.f64	d8, d0
 8009db2:	2d46      	cmp	r5, #70	; 0x46
 8009db4:	460c      	mov	r4, r1
 8009db6:	701a      	strb	r2, [r3, #0]
 8009db8:	d004      	beq.n	8009dc4 <__cvt+0x38>
 8009dba:	2d45      	cmp	r5, #69	; 0x45
 8009dbc:	d100      	bne.n	8009dc0 <__cvt+0x34>
 8009dbe:	3401      	adds	r4, #1
 8009dc0:	2102      	movs	r1, #2
 8009dc2:	e000      	b.n	8009dc6 <__cvt+0x3a>
 8009dc4:	2103      	movs	r1, #3
 8009dc6:	ab03      	add	r3, sp, #12
 8009dc8:	9301      	str	r3, [sp, #4]
 8009dca:	ab02      	add	r3, sp, #8
 8009dcc:	9300      	str	r3, [sp, #0]
 8009dce:	4622      	mov	r2, r4
 8009dd0:	4633      	mov	r3, r6
 8009dd2:	eeb0 0b48 	vmov.f64	d0, d8
 8009dd6:	f000 fea7 	bl	800ab28 <_dtoa_r>
 8009dda:	2d47      	cmp	r5, #71	; 0x47
 8009ddc:	d101      	bne.n	8009de2 <__cvt+0x56>
 8009dde:	07fb      	lsls	r3, r7, #31
 8009de0:	d51a      	bpl.n	8009e18 <__cvt+0x8c>
 8009de2:	2d46      	cmp	r5, #70	; 0x46
 8009de4:	eb00 0204 	add.w	r2, r0, r4
 8009de8:	d10c      	bne.n	8009e04 <__cvt+0x78>
 8009dea:	7803      	ldrb	r3, [r0, #0]
 8009dec:	2b30      	cmp	r3, #48	; 0x30
 8009dee:	d107      	bne.n	8009e00 <__cvt+0x74>
 8009df0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009df8:	bf1c      	itt	ne
 8009dfa:	f1c4 0401 	rsbne	r4, r4, #1
 8009dfe:	6034      	strne	r4, [r6, #0]
 8009e00:	6833      	ldr	r3, [r6, #0]
 8009e02:	441a      	add	r2, r3
 8009e04:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e0c:	bf08      	it	eq
 8009e0e:	9203      	streq	r2, [sp, #12]
 8009e10:	2130      	movs	r1, #48	; 0x30
 8009e12:	9b03      	ldr	r3, [sp, #12]
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d307      	bcc.n	8009e28 <__cvt+0x9c>
 8009e18:	9b03      	ldr	r3, [sp, #12]
 8009e1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e1c:	1a1b      	subs	r3, r3, r0
 8009e1e:	6013      	str	r3, [r2, #0]
 8009e20:	b005      	add	sp, #20
 8009e22:	ecbd 8b02 	vpop	{d8}
 8009e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e28:	1c5c      	adds	r4, r3, #1
 8009e2a:	9403      	str	r4, [sp, #12]
 8009e2c:	7019      	strb	r1, [r3, #0]
 8009e2e:	e7f0      	b.n	8009e12 <__cvt+0x86>

08009e30 <__exponent>:
 8009e30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e32:	4603      	mov	r3, r0
 8009e34:	2900      	cmp	r1, #0
 8009e36:	bfb8      	it	lt
 8009e38:	4249      	neglt	r1, r1
 8009e3a:	f803 2b02 	strb.w	r2, [r3], #2
 8009e3e:	bfb4      	ite	lt
 8009e40:	222d      	movlt	r2, #45	; 0x2d
 8009e42:	222b      	movge	r2, #43	; 0x2b
 8009e44:	2909      	cmp	r1, #9
 8009e46:	7042      	strb	r2, [r0, #1]
 8009e48:	dd2a      	ble.n	8009ea0 <__exponent+0x70>
 8009e4a:	f10d 0207 	add.w	r2, sp, #7
 8009e4e:	4617      	mov	r7, r2
 8009e50:	260a      	movs	r6, #10
 8009e52:	4694      	mov	ip, r2
 8009e54:	fb91 f5f6 	sdiv	r5, r1, r6
 8009e58:	fb06 1415 	mls	r4, r6, r5, r1
 8009e5c:	3430      	adds	r4, #48	; 0x30
 8009e5e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009e62:	460c      	mov	r4, r1
 8009e64:	2c63      	cmp	r4, #99	; 0x63
 8009e66:	f102 32ff 	add.w	r2, r2, #4294967295
 8009e6a:	4629      	mov	r1, r5
 8009e6c:	dcf1      	bgt.n	8009e52 <__exponent+0x22>
 8009e6e:	3130      	adds	r1, #48	; 0x30
 8009e70:	f1ac 0402 	sub.w	r4, ip, #2
 8009e74:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009e78:	1c41      	adds	r1, r0, #1
 8009e7a:	4622      	mov	r2, r4
 8009e7c:	42ba      	cmp	r2, r7
 8009e7e:	d30a      	bcc.n	8009e96 <__exponent+0x66>
 8009e80:	f10d 0209 	add.w	r2, sp, #9
 8009e84:	eba2 020c 	sub.w	r2, r2, ip
 8009e88:	42bc      	cmp	r4, r7
 8009e8a:	bf88      	it	hi
 8009e8c:	2200      	movhi	r2, #0
 8009e8e:	4413      	add	r3, r2
 8009e90:	1a18      	subs	r0, r3, r0
 8009e92:	b003      	add	sp, #12
 8009e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e96:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009e9a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009e9e:	e7ed      	b.n	8009e7c <__exponent+0x4c>
 8009ea0:	2330      	movs	r3, #48	; 0x30
 8009ea2:	3130      	adds	r1, #48	; 0x30
 8009ea4:	7083      	strb	r3, [r0, #2]
 8009ea6:	70c1      	strb	r1, [r0, #3]
 8009ea8:	1d03      	adds	r3, r0, #4
 8009eaa:	e7f1      	b.n	8009e90 <__exponent+0x60>
 8009eac:	0000      	movs	r0, r0
	...

08009eb0 <_printf_float>:
 8009eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eb4:	b08b      	sub	sp, #44	; 0x2c
 8009eb6:	460c      	mov	r4, r1
 8009eb8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8009ebc:	4616      	mov	r6, r2
 8009ebe:	461f      	mov	r7, r3
 8009ec0:	4605      	mov	r5, r0
 8009ec2:	f000 fccd 	bl	800a860 <_localeconv_r>
 8009ec6:	f8d0 b000 	ldr.w	fp, [r0]
 8009eca:	4658      	mov	r0, fp
 8009ecc:	f7f6 fa58 	bl	8000380 <strlen>
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	9308      	str	r3, [sp, #32]
 8009ed4:	f8d8 3000 	ldr.w	r3, [r8]
 8009ed8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009edc:	6822      	ldr	r2, [r4, #0]
 8009ede:	3307      	adds	r3, #7
 8009ee0:	f023 0307 	bic.w	r3, r3, #7
 8009ee4:	f103 0108 	add.w	r1, r3, #8
 8009ee8:	f8c8 1000 	str.w	r1, [r8]
 8009eec:	ed93 0b00 	vldr	d0, [r3]
 8009ef0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800a150 <_printf_float+0x2a0>
 8009ef4:	eeb0 7bc0 	vabs.f64	d7, d0
 8009ef8:	eeb4 7b46 	vcmp.f64	d7, d6
 8009efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f00:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8009f04:	4682      	mov	sl, r0
 8009f06:	dd24      	ble.n	8009f52 <_printf_float+0xa2>
 8009f08:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f10:	d502      	bpl.n	8009f18 <_printf_float+0x68>
 8009f12:	232d      	movs	r3, #45	; 0x2d
 8009f14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f18:	498f      	ldr	r1, [pc, #572]	; (800a158 <_printf_float+0x2a8>)
 8009f1a:	4b90      	ldr	r3, [pc, #576]	; (800a15c <_printf_float+0x2ac>)
 8009f1c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009f20:	bf94      	ite	ls
 8009f22:	4688      	movls	r8, r1
 8009f24:	4698      	movhi	r8, r3
 8009f26:	2303      	movs	r3, #3
 8009f28:	6123      	str	r3, [r4, #16]
 8009f2a:	f022 0204 	bic.w	r2, r2, #4
 8009f2e:	2300      	movs	r3, #0
 8009f30:	6022      	str	r2, [r4, #0]
 8009f32:	9304      	str	r3, [sp, #16]
 8009f34:	9700      	str	r7, [sp, #0]
 8009f36:	4633      	mov	r3, r6
 8009f38:	aa09      	add	r2, sp, #36	; 0x24
 8009f3a:	4621      	mov	r1, r4
 8009f3c:	4628      	mov	r0, r5
 8009f3e:	f000 f9d1 	bl	800a2e4 <_printf_common>
 8009f42:	3001      	adds	r0, #1
 8009f44:	f040 808a 	bne.w	800a05c <_printf_float+0x1ac>
 8009f48:	f04f 30ff 	mov.w	r0, #4294967295
 8009f4c:	b00b      	add	sp, #44	; 0x2c
 8009f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f52:	eeb4 0b40 	vcmp.f64	d0, d0
 8009f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f5a:	d709      	bvc.n	8009f70 <_printf_float+0xc0>
 8009f5c:	ee10 3a90 	vmov	r3, s1
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	bfbc      	itt	lt
 8009f64:	232d      	movlt	r3, #45	; 0x2d
 8009f66:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009f6a:	497d      	ldr	r1, [pc, #500]	; (800a160 <_printf_float+0x2b0>)
 8009f6c:	4b7d      	ldr	r3, [pc, #500]	; (800a164 <_printf_float+0x2b4>)
 8009f6e:	e7d5      	b.n	8009f1c <_printf_float+0x6c>
 8009f70:	6863      	ldr	r3, [r4, #4]
 8009f72:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009f76:	9104      	str	r1, [sp, #16]
 8009f78:	1c59      	adds	r1, r3, #1
 8009f7a:	d13c      	bne.n	8009ff6 <_printf_float+0x146>
 8009f7c:	2306      	movs	r3, #6
 8009f7e:	6063      	str	r3, [r4, #4]
 8009f80:	2300      	movs	r3, #0
 8009f82:	9303      	str	r3, [sp, #12]
 8009f84:	ab08      	add	r3, sp, #32
 8009f86:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8009f8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009f8e:	ab07      	add	r3, sp, #28
 8009f90:	6861      	ldr	r1, [r4, #4]
 8009f92:	9300      	str	r3, [sp, #0]
 8009f94:	6022      	str	r2, [r4, #0]
 8009f96:	f10d 031b 	add.w	r3, sp, #27
 8009f9a:	4628      	mov	r0, r5
 8009f9c:	f7ff fef6 	bl	8009d8c <__cvt>
 8009fa0:	9b04      	ldr	r3, [sp, #16]
 8009fa2:	9907      	ldr	r1, [sp, #28]
 8009fa4:	2b47      	cmp	r3, #71	; 0x47
 8009fa6:	4680      	mov	r8, r0
 8009fa8:	d108      	bne.n	8009fbc <_printf_float+0x10c>
 8009faa:	1cc8      	adds	r0, r1, #3
 8009fac:	db02      	blt.n	8009fb4 <_printf_float+0x104>
 8009fae:	6863      	ldr	r3, [r4, #4]
 8009fb0:	4299      	cmp	r1, r3
 8009fb2:	dd41      	ble.n	800a038 <_printf_float+0x188>
 8009fb4:	f1a9 0902 	sub.w	r9, r9, #2
 8009fb8:	fa5f f989 	uxtb.w	r9, r9
 8009fbc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009fc0:	d820      	bhi.n	800a004 <_printf_float+0x154>
 8009fc2:	3901      	subs	r1, #1
 8009fc4:	464a      	mov	r2, r9
 8009fc6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009fca:	9107      	str	r1, [sp, #28]
 8009fcc:	f7ff ff30 	bl	8009e30 <__exponent>
 8009fd0:	9a08      	ldr	r2, [sp, #32]
 8009fd2:	9004      	str	r0, [sp, #16]
 8009fd4:	1813      	adds	r3, r2, r0
 8009fd6:	2a01      	cmp	r2, #1
 8009fd8:	6123      	str	r3, [r4, #16]
 8009fda:	dc02      	bgt.n	8009fe2 <_printf_float+0x132>
 8009fdc:	6822      	ldr	r2, [r4, #0]
 8009fde:	07d2      	lsls	r2, r2, #31
 8009fe0:	d501      	bpl.n	8009fe6 <_printf_float+0x136>
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	6123      	str	r3, [r4, #16]
 8009fe6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d0a2      	beq.n	8009f34 <_printf_float+0x84>
 8009fee:	232d      	movs	r3, #45	; 0x2d
 8009ff0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ff4:	e79e      	b.n	8009f34 <_printf_float+0x84>
 8009ff6:	9904      	ldr	r1, [sp, #16]
 8009ff8:	2947      	cmp	r1, #71	; 0x47
 8009ffa:	d1c1      	bne.n	8009f80 <_printf_float+0xd0>
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d1bf      	bne.n	8009f80 <_printf_float+0xd0>
 800a000:	2301      	movs	r3, #1
 800a002:	e7bc      	b.n	8009f7e <_printf_float+0xce>
 800a004:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800a008:	d118      	bne.n	800a03c <_printf_float+0x18c>
 800a00a:	2900      	cmp	r1, #0
 800a00c:	6863      	ldr	r3, [r4, #4]
 800a00e:	dd0b      	ble.n	800a028 <_printf_float+0x178>
 800a010:	6121      	str	r1, [r4, #16]
 800a012:	b913      	cbnz	r3, 800a01a <_printf_float+0x16a>
 800a014:	6822      	ldr	r2, [r4, #0]
 800a016:	07d0      	lsls	r0, r2, #31
 800a018:	d502      	bpl.n	800a020 <_printf_float+0x170>
 800a01a:	3301      	adds	r3, #1
 800a01c:	440b      	add	r3, r1
 800a01e:	6123      	str	r3, [r4, #16]
 800a020:	2300      	movs	r3, #0
 800a022:	65a1      	str	r1, [r4, #88]	; 0x58
 800a024:	9304      	str	r3, [sp, #16]
 800a026:	e7de      	b.n	8009fe6 <_printf_float+0x136>
 800a028:	b913      	cbnz	r3, 800a030 <_printf_float+0x180>
 800a02a:	6822      	ldr	r2, [r4, #0]
 800a02c:	07d2      	lsls	r2, r2, #31
 800a02e:	d501      	bpl.n	800a034 <_printf_float+0x184>
 800a030:	3302      	adds	r3, #2
 800a032:	e7f4      	b.n	800a01e <_printf_float+0x16e>
 800a034:	2301      	movs	r3, #1
 800a036:	e7f2      	b.n	800a01e <_printf_float+0x16e>
 800a038:	f04f 0967 	mov.w	r9, #103	; 0x67
 800a03c:	9b08      	ldr	r3, [sp, #32]
 800a03e:	4299      	cmp	r1, r3
 800a040:	db05      	blt.n	800a04e <_printf_float+0x19e>
 800a042:	6823      	ldr	r3, [r4, #0]
 800a044:	6121      	str	r1, [r4, #16]
 800a046:	07d8      	lsls	r0, r3, #31
 800a048:	d5ea      	bpl.n	800a020 <_printf_float+0x170>
 800a04a:	1c4b      	adds	r3, r1, #1
 800a04c:	e7e7      	b.n	800a01e <_printf_float+0x16e>
 800a04e:	2900      	cmp	r1, #0
 800a050:	bfd4      	ite	le
 800a052:	f1c1 0202 	rsble	r2, r1, #2
 800a056:	2201      	movgt	r2, #1
 800a058:	4413      	add	r3, r2
 800a05a:	e7e0      	b.n	800a01e <_printf_float+0x16e>
 800a05c:	6823      	ldr	r3, [r4, #0]
 800a05e:	055a      	lsls	r2, r3, #21
 800a060:	d407      	bmi.n	800a072 <_printf_float+0x1c2>
 800a062:	6923      	ldr	r3, [r4, #16]
 800a064:	4642      	mov	r2, r8
 800a066:	4631      	mov	r1, r6
 800a068:	4628      	mov	r0, r5
 800a06a:	47b8      	blx	r7
 800a06c:	3001      	adds	r0, #1
 800a06e:	d12a      	bne.n	800a0c6 <_printf_float+0x216>
 800a070:	e76a      	b.n	8009f48 <_printf_float+0x98>
 800a072:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a076:	f240 80e0 	bls.w	800a23a <_printf_float+0x38a>
 800a07a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800a07e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a086:	d133      	bne.n	800a0f0 <_printf_float+0x240>
 800a088:	4a37      	ldr	r2, [pc, #220]	; (800a168 <_printf_float+0x2b8>)
 800a08a:	2301      	movs	r3, #1
 800a08c:	4631      	mov	r1, r6
 800a08e:	4628      	mov	r0, r5
 800a090:	47b8      	blx	r7
 800a092:	3001      	adds	r0, #1
 800a094:	f43f af58 	beq.w	8009f48 <_printf_float+0x98>
 800a098:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a09c:	429a      	cmp	r2, r3
 800a09e:	db02      	blt.n	800a0a6 <_printf_float+0x1f6>
 800a0a0:	6823      	ldr	r3, [r4, #0]
 800a0a2:	07d8      	lsls	r0, r3, #31
 800a0a4:	d50f      	bpl.n	800a0c6 <_printf_float+0x216>
 800a0a6:	4653      	mov	r3, sl
 800a0a8:	465a      	mov	r2, fp
 800a0aa:	4631      	mov	r1, r6
 800a0ac:	4628      	mov	r0, r5
 800a0ae:	47b8      	blx	r7
 800a0b0:	3001      	adds	r0, #1
 800a0b2:	f43f af49 	beq.w	8009f48 <_printf_float+0x98>
 800a0b6:	f04f 0800 	mov.w	r8, #0
 800a0ba:	f104 091a 	add.w	r9, r4, #26
 800a0be:	9b08      	ldr	r3, [sp, #32]
 800a0c0:	3b01      	subs	r3, #1
 800a0c2:	4543      	cmp	r3, r8
 800a0c4:	dc09      	bgt.n	800a0da <_printf_float+0x22a>
 800a0c6:	6823      	ldr	r3, [r4, #0]
 800a0c8:	079b      	lsls	r3, r3, #30
 800a0ca:	f100 8106 	bmi.w	800a2da <_printf_float+0x42a>
 800a0ce:	68e0      	ldr	r0, [r4, #12]
 800a0d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0d2:	4298      	cmp	r0, r3
 800a0d4:	bfb8      	it	lt
 800a0d6:	4618      	movlt	r0, r3
 800a0d8:	e738      	b.n	8009f4c <_printf_float+0x9c>
 800a0da:	2301      	movs	r3, #1
 800a0dc:	464a      	mov	r2, r9
 800a0de:	4631      	mov	r1, r6
 800a0e0:	4628      	mov	r0, r5
 800a0e2:	47b8      	blx	r7
 800a0e4:	3001      	adds	r0, #1
 800a0e6:	f43f af2f 	beq.w	8009f48 <_printf_float+0x98>
 800a0ea:	f108 0801 	add.w	r8, r8, #1
 800a0ee:	e7e6      	b.n	800a0be <_printf_float+0x20e>
 800a0f0:	9b07      	ldr	r3, [sp, #28]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	dc3a      	bgt.n	800a16c <_printf_float+0x2bc>
 800a0f6:	4a1c      	ldr	r2, [pc, #112]	; (800a168 <_printf_float+0x2b8>)
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	4631      	mov	r1, r6
 800a0fc:	4628      	mov	r0, r5
 800a0fe:	47b8      	blx	r7
 800a100:	3001      	adds	r0, #1
 800a102:	f43f af21 	beq.w	8009f48 <_printf_float+0x98>
 800a106:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800a10a:	4313      	orrs	r3, r2
 800a10c:	d102      	bne.n	800a114 <_printf_float+0x264>
 800a10e:	6823      	ldr	r3, [r4, #0]
 800a110:	07d9      	lsls	r1, r3, #31
 800a112:	d5d8      	bpl.n	800a0c6 <_printf_float+0x216>
 800a114:	4653      	mov	r3, sl
 800a116:	465a      	mov	r2, fp
 800a118:	4631      	mov	r1, r6
 800a11a:	4628      	mov	r0, r5
 800a11c:	47b8      	blx	r7
 800a11e:	3001      	adds	r0, #1
 800a120:	f43f af12 	beq.w	8009f48 <_printf_float+0x98>
 800a124:	f04f 0900 	mov.w	r9, #0
 800a128:	f104 0a1a 	add.w	sl, r4, #26
 800a12c:	9b07      	ldr	r3, [sp, #28]
 800a12e:	425b      	negs	r3, r3
 800a130:	454b      	cmp	r3, r9
 800a132:	dc01      	bgt.n	800a138 <_printf_float+0x288>
 800a134:	9b08      	ldr	r3, [sp, #32]
 800a136:	e795      	b.n	800a064 <_printf_float+0x1b4>
 800a138:	2301      	movs	r3, #1
 800a13a:	4652      	mov	r2, sl
 800a13c:	4631      	mov	r1, r6
 800a13e:	4628      	mov	r0, r5
 800a140:	47b8      	blx	r7
 800a142:	3001      	adds	r0, #1
 800a144:	f43f af00 	beq.w	8009f48 <_printf_float+0x98>
 800a148:	f109 0901 	add.w	r9, r9, #1
 800a14c:	e7ee      	b.n	800a12c <_printf_float+0x27c>
 800a14e:	bf00      	nop
 800a150:	ffffffff 	.word	0xffffffff
 800a154:	7fefffff 	.word	0x7fefffff
 800a158:	0800cab8 	.word	0x0800cab8
 800a15c:	0800cabc 	.word	0x0800cabc
 800a160:	0800cac0 	.word	0x0800cac0
 800a164:	0800cac4 	.word	0x0800cac4
 800a168:	0800cac8 	.word	0x0800cac8
 800a16c:	9a08      	ldr	r2, [sp, #32]
 800a16e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a170:	429a      	cmp	r2, r3
 800a172:	bfa8      	it	ge
 800a174:	461a      	movge	r2, r3
 800a176:	2a00      	cmp	r2, #0
 800a178:	4691      	mov	r9, r2
 800a17a:	dc38      	bgt.n	800a1ee <_printf_float+0x33e>
 800a17c:	2300      	movs	r3, #0
 800a17e:	9305      	str	r3, [sp, #20]
 800a180:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a184:	f104 021a 	add.w	r2, r4, #26
 800a188:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a18a:	9905      	ldr	r1, [sp, #20]
 800a18c:	9304      	str	r3, [sp, #16]
 800a18e:	eba3 0309 	sub.w	r3, r3, r9
 800a192:	428b      	cmp	r3, r1
 800a194:	dc33      	bgt.n	800a1fe <_printf_float+0x34e>
 800a196:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a19a:	429a      	cmp	r2, r3
 800a19c:	db3c      	blt.n	800a218 <_printf_float+0x368>
 800a19e:	6823      	ldr	r3, [r4, #0]
 800a1a0:	07da      	lsls	r2, r3, #31
 800a1a2:	d439      	bmi.n	800a218 <_printf_float+0x368>
 800a1a4:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800a1a8:	eba2 0903 	sub.w	r9, r2, r3
 800a1ac:	9b04      	ldr	r3, [sp, #16]
 800a1ae:	1ad2      	subs	r2, r2, r3
 800a1b0:	4591      	cmp	r9, r2
 800a1b2:	bfa8      	it	ge
 800a1b4:	4691      	movge	r9, r2
 800a1b6:	f1b9 0f00 	cmp.w	r9, #0
 800a1ba:	dc35      	bgt.n	800a228 <_printf_float+0x378>
 800a1bc:	f04f 0800 	mov.w	r8, #0
 800a1c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a1c4:	f104 0a1a 	add.w	sl, r4, #26
 800a1c8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a1cc:	1a9b      	subs	r3, r3, r2
 800a1ce:	eba3 0309 	sub.w	r3, r3, r9
 800a1d2:	4543      	cmp	r3, r8
 800a1d4:	f77f af77 	ble.w	800a0c6 <_printf_float+0x216>
 800a1d8:	2301      	movs	r3, #1
 800a1da:	4652      	mov	r2, sl
 800a1dc:	4631      	mov	r1, r6
 800a1de:	4628      	mov	r0, r5
 800a1e0:	47b8      	blx	r7
 800a1e2:	3001      	adds	r0, #1
 800a1e4:	f43f aeb0 	beq.w	8009f48 <_printf_float+0x98>
 800a1e8:	f108 0801 	add.w	r8, r8, #1
 800a1ec:	e7ec      	b.n	800a1c8 <_printf_float+0x318>
 800a1ee:	4613      	mov	r3, r2
 800a1f0:	4631      	mov	r1, r6
 800a1f2:	4642      	mov	r2, r8
 800a1f4:	4628      	mov	r0, r5
 800a1f6:	47b8      	blx	r7
 800a1f8:	3001      	adds	r0, #1
 800a1fa:	d1bf      	bne.n	800a17c <_printf_float+0x2cc>
 800a1fc:	e6a4      	b.n	8009f48 <_printf_float+0x98>
 800a1fe:	2301      	movs	r3, #1
 800a200:	4631      	mov	r1, r6
 800a202:	4628      	mov	r0, r5
 800a204:	9204      	str	r2, [sp, #16]
 800a206:	47b8      	blx	r7
 800a208:	3001      	adds	r0, #1
 800a20a:	f43f ae9d 	beq.w	8009f48 <_printf_float+0x98>
 800a20e:	9b05      	ldr	r3, [sp, #20]
 800a210:	9a04      	ldr	r2, [sp, #16]
 800a212:	3301      	adds	r3, #1
 800a214:	9305      	str	r3, [sp, #20]
 800a216:	e7b7      	b.n	800a188 <_printf_float+0x2d8>
 800a218:	4653      	mov	r3, sl
 800a21a:	465a      	mov	r2, fp
 800a21c:	4631      	mov	r1, r6
 800a21e:	4628      	mov	r0, r5
 800a220:	47b8      	blx	r7
 800a222:	3001      	adds	r0, #1
 800a224:	d1be      	bne.n	800a1a4 <_printf_float+0x2f4>
 800a226:	e68f      	b.n	8009f48 <_printf_float+0x98>
 800a228:	9a04      	ldr	r2, [sp, #16]
 800a22a:	464b      	mov	r3, r9
 800a22c:	4442      	add	r2, r8
 800a22e:	4631      	mov	r1, r6
 800a230:	4628      	mov	r0, r5
 800a232:	47b8      	blx	r7
 800a234:	3001      	adds	r0, #1
 800a236:	d1c1      	bne.n	800a1bc <_printf_float+0x30c>
 800a238:	e686      	b.n	8009f48 <_printf_float+0x98>
 800a23a:	9a08      	ldr	r2, [sp, #32]
 800a23c:	2a01      	cmp	r2, #1
 800a23e:	dc01      	bgt.n	800a244 <_printf_float+0x394>
 800a240:	07db      	lsls	r3, r3, #31
 800a242:	d537      	bpl.n	800a2b4 <_printf_float+0x404>
 800a244:	2301      	movs	r3, #1
 800a246:	4642      	mov	r2, r8
 800a248:	4631      	mov	r1, r6
 800a24a:	4628      	mov	r0, r5
 800a24c:	47b8      	blx	r7
 800a24e:	3001      	adds	r0, #1
 800a250:	f43f ae7a 	beq.w	8009f48 <_printf_float+0x98>
 800a254:	4653      	mov	r3, sl
 800a256:	465a      	mov	r2, fp
 800a258:	4631      	mov	r1, r6
 800a25a:	4628      	mov	r0, r5
 800a25c:	47b8      	blx	r7
 800a25e:	3001      	adds	r0, #1
 800a260:	f43f ae72 	beq.w	8009f48 <_printf_float+0x98>
 800a264:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800a268:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a26c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a270:	9b08      	ldr	r3, [sp, #32]
 800a272:	d01a      	beq.n	800a2aa <_printf_float+0x3fa>
 800a274:	3b01      	subs	r3, #1
 800a276:	f108 0201 	add.w	r2, r8, #1
 800a27a:	4631      	mov	r1, r6
 800a27c:	4628      	mov	r0, r5
 800a27e:	47b8      	blx	r7
 800a280:	3001      	adds	r0, #1
 800a282:	d10e      	bne.n	800a2a2 <_printf_float+0x3f2>
 800a284:	e660      	b.n	8009f48 <_printf_float+0x98>
 800a286:	2301      	movs	r3, #1
 800a288:	464a      	mov	r2, r9
 800a28a:	4631      	mov	r1, r6
 800a28c:	4628      	mov	r0, r5
 800a28e:	47b8      	blx	r7
 800a290:	3001      	adds	r0, #1
 800a292:	f43f ae59 	beq.w	8009f48 <_printf_float+0x98>
 800a296:	f108 0801 	add.w	r8, r8, #1
 800a29a:	9b08      	ldr	r3, [sp, #32]
 800a29c:	3b01      	subs	r3, #1
 800a29e:	4543      	cmp	r3, r8
 800a2a0:	dcf1      	bgt.n	800a286 <_printf_float+0x3d6>
 800a2a2:	9b04      	ldr	r3, [sp, #16]
 800a2a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a2a8:	e6dd      	b.n	800a066 <_printf_float+0x1b6>
 800a2aa:	f04f 0800 	mov.w	r8, #0
 800a2ae:	f104 091a 	add.w	r9, r4, #26
 800a2b2:	e7f2      	b.n	800a29a <_printf_float+0x3ea>
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	4642      	mov	r2, r8
 800a2b8:	e7df      	b.n	800a27a <_printf_float+0x3ca>
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	464a      	mov	r2, r9
 800a2be:	4631      	mov	r1, r6
 800a2c0:	4628      	mov	r0, r5
 800a2c2:	47b8      	blx	r7
 800a2c4:	3001      	adds	r0, #1
 800a2c6:	f43f ae3f 	beq.w	8009f48 <_printf_float+0x98>
 800a2ca:	f108 0801 	add.w	r8, r8, #1
 800a2ce:	68e3      	ldr	r3, [r4, #12]
 800a2d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a2d2:	1a5b      	subs	r3, r3, r1
 800a2d4:	4543      	cmp	r3, r8
 800a2d6:	dcf0      	bgt.n	800a2ba <_printf_float+0x40a>
 800a2d8:	e6f9      	b.n	800a0ce <_printf_float+0x21e>
 800a2da:	f04f 0800 	mov.w	r8, #0
 800a2de:	f104 0919 	add.w	r9, r4, #25
 800a2e2:	e7f4      	b.n	800a2ce <_printf_float+0x41e>

0800a2e4 <_printf_common>:
 800a2e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2e8:	4616      	mov	r6, r2
 800a2ea:	4699      	mov	r9, r3
 800a2ec:	688a      	ldr	r2, [r1, #8]
 800a2ee:	690b      	ldr	r3, [r1, #16]
 800a2f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a2f4:	4293      	cmp	r3, r2
 800a2f6:	bfb8      	it	lt
 800a2f8:	4613      	movlt	r3, r2
 800a2fa:	6033      	str	r3, [r6, #0]
 800a2fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a300:	4607      	mov	r7, r0
 800a302:	460c      	mov	r4, r1
 800a304:	b10a      	cbz	r2, 800a30a <_printf_common+0x26>
 800a306:	3301      	adds	r3, #1
 800a308:	6033      	str	r3, [r6, #0]
 800a30a:	6823      	ldr	r3, [r4, #0]
 800a30c:	0699      	lsls	r1, r3, #26
 800a30e:	bf42      	ittt	mi
 800a310:	6833      	ldrmi	r3, [r6, #0]
 800a312:	3302      	addmi	r3, #2
 800a314:	6033      	strmi	r3, [r6, #0]
 800a316:	6825      	ldr	r5, [r4, #0]
 800a318:	f015 0506 	ands.w	r5, r5, #6
 800a31c:	d106      	bne.n	800a32c <_printf_common+0x48>
 800a31e:	f104 0a19 	add.w	sl, r4, #25
 800a322:	68e3      	ldr	r3, [r4, #12]
 800a324:	6832      	ldr	r2, [r6, #0]
 800a326:	1a9b      	subs	r3, r3, r2
 800a328:	42ab      	cmp	r3, r5
 800a32a:	dc26      	bgt.n	800a37a <_printf_common+0x96>
 800a32c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a330:	1e13      	subs	r3, r2, #0
 800a332:	6822      	ldr	r2, [r4, #0]
 800a334:	bf18      	it	ne
 800a336:	2301      	movne	r3, #1
 800a338:	0692      	lsls	r2, r2, #26
 800a33a:	d42b      	bmi.n	800a394 <_printf_common+0xb0>
 800a33c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a340:	4649      	mov	r1, r9
 800a342:	4638      	mov	r0, r7
 800a344:	47c0      	blx	r8
 800a346:	3001      	adds	r0, #1
 800a348:	d01e      	beq.n	800a388 <_printf_common+0xa4>
 800a34a:	6823      	ldr	r3, [r4, #0]
 800a34c:	6922      	ldr	r2, [r4, #16]
 800a34e:	f003 0306 	and.w	r3, r3, #6
 800a352:	2b04      	cmp	r3, #4
 800a354:	bf02      	ittt	eq
 800a356:	68e5      	ldreq	r5, [r4, #12]
 800a358:	6833      	ldreq	r3, [r6, #0]
 800a35a:	1aed      	subeq	r5, r5, r3
 800a35c:	68a3      	ldr	r3, [r4, #8]
 800a35e:	bf0c      	ite	eq
 800a360:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a364:	2500      	movne	r5, #0
 800a366:	4293      	cmp	r3, r2
 800a368:	bfc4      	itt	gt
 800a36a:	1a9b      	subgt	r3, r3, r2
 800a36c:	18ed      	addgt	r5, r5, r3
 800a36e:	2600      	movs	r6, #0
 800a370:	341a      	adds	r4, #26
 800a372:	42b5      	cmp	r5, r6
 800a374:	d11a      	bne.n	800a3ac <_printf_common+0xc8>
 800a376:	2000      	movs	r0, #0
 800a378:	e008      	b.n	800a38c <_printf_common+0xa8>
 800a37a:	2301      	movs	r3, #1
 800a37c:	4652      	mov	r2, sl
 800a37e:	4649      	mov	r1, r9
 800a380:	4638      	mov	r0, r7
 800a382:	47c0      	blx	r8
 800a384:	3001      	adds	r0, #1
 800a386:	d103      	bne.n	800a390 <_printf_common+0xac>
 800a388:	f04f 30ff 	mov.w	r0, #4294967295
 800a38c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a390:	3501      	adds	r5, #1
 800a392:	e7c6      	b.n	800a322 <_printf_common+0x3e>
 800a394:	18e1      	adds	r1, r4, r3
 800a396:	1c5a      	adds	r2, r3, #1
 800a398:	2030      	movs	r0, #48	; 0x30
 800a39a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a39e:	4422      	add	r2, r4
 800a3a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a3a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a3a8:	3302      	adds	r3, #2
 800a3aa:	e7c7      	b.n	800a33c <_printf_common+0x58>
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	4622      	mov	r2, r4
 800a3b0:	4649      	mov	r1, r9
 800a3b2:	4638      	mov	r0, r7
 800a3b4:	47c0      	blx	r8
 800a3b6:	3001      	adds	r0, #1
 800a3b8:	d0e6      	beq.n	800a388 <_printf_common+0xa4>
 800a3ba:	3601      	adds	r6, #1
 800a3bc:	e7d9      	b.n	800a372 <_printf_common+0x8e>
	...

0800a3c0 <_printf_i>:
 800a3c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a3c4:	7e0f      	ldrb	r7, [r1, #24]
 800a3c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a3c8:	2f78      	cmp	r7, #120	; 0x78
 800a3ca:	4691      	mov	r9, r2
 800a3cc:	4680      	mov	r8, r0
 800a3ce:	460c      	mov	r4, r1
 800a3d0:	469a      	mov	sl, r3
 800a3d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a3d6:	d807      	bhi.n	800a3e8 <_printf_i+0x28>
 800a3d8:	2f62      	cmp	r7, #98	; 0x62
 800a3da:	d80a      	bhi.n	800a3f2 <_printf_i+0x32>
 800a3dc:	2f00      	cmp	r7, #0
 800a3de:	f000 80d4 	beq.w	800a58a <_printf_i+0x1ca>
 800a3e2:	2f58      	cmp	r7, #88	; 0x58
 800a3e4:	f000 80c0 	beq.w	800a568 <_printf_i+0x1a8>
 800a3e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a3f0:	e03a      	b.n	800a468 <_printf_i+0xa8>
 800a3f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a3f6:	2b15      	cmp	r3, #21
 800a3f8:	d8f6      	bhi.n	800a3e8 <_printf_i+0x28>
 800a3fa:	a101      	add	r1, pc, #4	; (adr r1, 800a400 <_printf_i+0x40>)
 800a3fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a400:	0800a459 	.word	0x0800a459
 800a404:	0800a46d 	.word	0x0800a46d
 800a408:	0800a3e9 	.word	0x0800a3e9
 800a40c:	0800a3e9 	.word	0x0800a3e9
 800a410:	0800a3e9 	.word	0x0800a3e9
 800a414:	0800a3e9 	.word	0x0800a3e9
 800a418:	0800a46d 	.word	0x0800a46d
 800a41c:	0800a3e9 	.word	0x0800a3e9
 800a420:	0800a3e9 	.word	0x0800a3e9
 800a424:	0800a3e9 	.word	0x0800a3e9
 800a428:	0800a3e9 	.word	0x0800a3e9
 800a42c:	0800a571 	.word	0x0800a571
 800a430:	0800a499 	.word	0x0800a499
 800a434:	0800a52b 	.word	0x0800a52b
 800a438:	0800a3e9 	.word	0x0800a3e9
 800a43c:	0800a3e9 	.word	0x0800a3e9
 800a440:	0800a593 	.word	0x0800a593
 800a444:	0800a3e9 	.word	0x0800a3e9
 800a448:	0800a499 	.word	0x0800a499
 800a44c:	0800a3e9 	.word	0x0800a3e9
 800a450:	0800a3e9 	.word	0x0800a3e9
 800a454:	0800a533 	.word	0x0800a533
 800a458:	682b      	ldr	r3, [r5, #0]
 800a45a:	1d1a      	adds	r2, r3, #4
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	602a      	str	r2, [r5, #0]
 800a460:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a464:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a468:	2301      	movs	r3, #1
 800a46a:	e09f      	b.n	800a5ac <_printf_i+0x1ec>
 800a46c:	6820      	ldr	r0, [r4, #0]
 800a46e:	682b      	ldr	r3, [r5, #0]
 800a470:	0607      	lsls	r7, r0, #24
 800a472:	f103 0104 	add.w	r1, r3, #4
 800a476:	6029      	str	r1, [r5, #0]
 800a478:	d501      	bpl.n	800a47e <_printf_i+0xbe>
 800a47a:	681e      	ldr	r6, [r3, #0]
 800a47c:	e003      	b.n	800a486 <_printf_i+0xc6>
 800a47e:	0646      	lsls	r6, r0, #25
 800a480:	d5fb      	bpl.n	800a47a <_printf_i+0xba>
 800a482:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a486:	2e00      	cmp	r6, #0
 800a488:	da03      	bge.n	800a492 <_printf_i+0xd2>
 800a48a:	232d      	movs	r3, #45	; 0x2d
 800a48c:	4276      	negs	r6, r6
 800a48e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a492:	485a      	ldr	r0, [pc, #360]	; (800a5fc <_printf_i+0x23c>)
 800a494:	230a      	movs	r3, #10
 800a496:	e012      	b.n	800a4be <_printf_i+0xfe>
 800a498:	682b      	ldr	r3, [r5, #0]
 800a49a:	6820      	ldr	r0, [r4, #0]
 800a49c:	1d19      	adds	r1, r3, #4
 800a49e:	6029      	str	r1, [r5, #0]
 800a4a0:	0605      	lsls	r5, r0, #24
 800a4a2:	d501      	bpl.n	800a4a8 <_printf_i+0xe8>
 800a4a4:	681e      	ldr	r6, [r3, #0]
 800a4a6:	e002      	b.n	800a4ae <_printf_i+0xee>
 800a4a8:	0641      	lsls	r1, r0, #25
 800a4aa:	d5fb      	bpl.n	800a4a4 <_printf_i+0xe4>
 800a4ac:	881e      	ldrh	r6, [r3, #0]
 800a4ae:	4853      	ldr	r0, [pc, #332]	; (800a5fc <_printf_i+0x23c>)
 800a4b0:	2f6f      	cmp	r7, #111	; 0x6f
 800a4b2:	bf0c      	ite	eq
 800a4b4:	2308      	moveq	r3, #8
 800a4b6:	230a      	movne	r3, #10
 800a4b8:	2100      	movs	r1, #0
 800a4ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a4be:	6865      	ldr	r5, [r4, #4]
 800a4c0:	60a5      	str	r5, [r4, #8]
 800a4c2:	2d00      	cmp	r5, #0
 800a4c4:	bfa2      	ittt	ge
 800a4c6:	6821      	ldrge	r1, [r4, #0]
 800a4c8:	f021 0104 	bicge.w	r1, r1, #4
 800a4cc:	6021      	strge	r1, [r4, #0]
 800a4ce:	b90e      	cbnz	r6, 800a4d4 <_printf_i+0x114>
 800a4d0:	2d00      	cmp	r5, #0
 800a4d2:	d04b      	beq.n	800a56c <_printf_i+0x1ac>
 800a4d4:	4615      	mov	r5, r2
 800a4d6:	fbb6 f1f3 	udiv	r1, r6, r3
 800a4da:	fb03 6711 	mls	r7, r3, r1, r6
 800a4de:	5dc7      	ldrb	r7, [r0, r7]
 800a4e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a4e4:	4637      	mov	r7, r6
 800a4e6:	42bb      	cmp	r3, r7
 800a4e8:	460e      	mov	r6, r1
 800a4ea:	d9f4      	bls.n	800a4d6 <_printf_i+0x116>
 800a4ec:	2b08      	cmp	r3, #8
 800a4ee:	d10b      	bne.n	800a508 <_printf_i+0x148>
 800a4f0:	6823      	ldr	r3, [r4, #0]
 800a4f2:	07de      	lsls	r6, r3, #31
 800a4f4:	d508      	bpl.n	800a508 <_printf_i+0x148>
 800a4f6:	6923      	ldr	r3, [r4, #16]
 800a4f8:	6861      	ldr	r1, [r4, #4]
 800a4fa:	4299      	cmp	r1, r3
 800a4fc:	bfde      	ittt	le
 800a4fe:	2330      	movle	r3, #48	; 0x30
 800a500:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a504:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a508:	1b52      	subs	r2, r2, r5
 800a50a:	6122      	str	r2, [r4, #16]
 800a50c:	f8cd a000 	str.w	sl, [sp]
 800a510:	464b      	mov	r3, r9
 800a512:	aa03      	add	r2, sp, #12
 800a514:	4621      	mov	r1, r4
 800a516:	4640      	mov	r0, r8
 800a518:	f7ff fee4 	bl	800a2e4 <_printf_common>
 800a51c:	3001      	adds	r0, #1
 800a51e:	d14a      	bne.n	800a5b6 <_printf_i+0x1f6>
 800a520:	f04f 30ff 	mov.w	r0, #4294967295
 800a524:	b004      	add	sp, #16
 800a526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a52a:	6823      	ldr	r3, [r4, #0]
 800a52c:	f043 0320 	orr.w	r3, r3, #32
 800a530:	6023      	str	r3, [r4, #0]
 800a532:	4833      	ldr	r0, [pc, #204]	; (800a600 <_printf_i+0x240>)
 800a534:	2778      	movs	r7, #120	; 0x78
 800a536:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a53a:	6823      	ldr	r3, [r4, #0]
 800a53c:	6829      	ldr	r1, [r5, #0]
 800a53e:	061f      	lsls	r7, r3, #24
 800a540:	f851 6b04 	ldr.w	r6, [r1], #4
 800a544:	d402      	bmi.n	800a54c <_printf_i+0x18c>
 800a546:	065f      	lsls	r7, r3, #25
 800a548:	bf48      	it	mi
 800a54a:	b2b6      	uxthmi	r6, r6
 800a54c:	07df      	lsls	r7, r3, #31
 800a54e:	bf48      	it	mi
 800a550:	f043 0320 	orrmi.w	r3, r3, #32
 800a554:	6029      	str	r1, [r5, #0]
 800a556:	bf48      	it	mi
 800a558:	6023      	strmi	r3, [r4, #0]
 800a55a:	b91e      	cbnz	r6, 800a564 <_printf_i+0x1a4>
 800a55c:	6823      	ldr	r3, [r4, #0]
 800a55e:	f023 0320 	bic.w	r3, r3, #32
 800a562:	6023      	str	r3, [r4, #0]
 800a564:	2310      	movs	r3, #16
 800a566:	e7a7      	b.n	800a4b8 <_printf_i+0xf8>
 800a568:	4824      	ldr	r0, [pc, #144]	; (800a5fc <_printf_i+0x23c>)
 800a56a:	e7e4      	b.n	800a536 <_printf_i+0x176>
 800a56c:	4615      	mov	r5, r2
 800a56e:	e7bd      	b.n	800a4ec <_printf_i+0x12c>
 800a570:	682b      	ldr	r3, [r5, #0]
 800a572:	6826      	ldr	r6, [r4, #0]
 800a574:	6961      	ldr	r1, [r4, #20]
 800a576:	1d18      	adds	r0, r3, #4
 800a578:	6028      	str	r0, [r5, #0]
 800a57a:	0635      	lsls	r5, r6, #24
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	d501      	bpl.n	800a584 <_printf_i+0x1c4>
 800a580:	6019      	str	r1, [r3, #0]
 800a582:	e002      	b.n	800a58a <_printf_i+0x1ca>
 800a584:	0670      	lsls	r0, r6, #25
 800a586:	d5fb      	bpl.n	800a580 <_printf_i+0x1c0>
 800a588:	8019      	strh	r1, [r3, #0]
 800a58a:	2300      	movs	r3, #0
 800a58c:	6123      	str	r3, [r4, #16]
 800a58e:	4615      	mov	r5, r2
 800a590:	e7bc      	b.n	800a50c <_printf_i+0x14c>
 800a592:	682b      	ldr	r3, [r5, #0]
 800a594:	1d1a      	adds	r2, r3, #4
 800a596:	602a      	str	r2, [r5, #0]
 800a598:	681d      	ldr	r5, [r3, #0]
 800a59a:	6862      	ldr	r2, [r4, #4]
 800a59c:	2100      	movs	r1, #0
 800a59e:	4628      	mov	r0, r5
 800a5a0:	f7f5 fe9e 	bl	80002e0 <memchr>
 800a5a4:	b108      	cbz	r0, 800a5aa <_printf_i+0x1ea>
 800a5a6:	1b40      	subs	r0, r0, r5
 800a5a8:	6060      	str	r0, [r4, #4]
 800a5aa:	6863      	ldr	r3, [r4, #4]
 800a5ac:	6123      	str	r3, [r4, #16]
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5b4:	e7aa      	b.n	800a50c <_printf_i+0x14c>
 800a5b6:	6923      	ldr	r3, [r4, #16]
 800a5b8:	462a      	mov	r2, r5
 800a5ba:	4649      	mov	r1, r9
 800a5bc:	4640      	mov	r0, r8
 800a5be:	47d0      	blx	sl
 800a5c0:	3001      	adds	r0, #1
 800a5c2:	d0ad      	beq.n	800a520 <_printf_i+0x160>
 800a5c4:	6823      	ldr	r3, [r4, #0]
 800a5c6:	079b      	lsls	r3, r3, #30
 800a5c8:	d413      	bmi.n	800a5f2 <_printf_i+0x232>
 800a5ca:	68e0      	ldr	r0, [r4, #12]
 800a5cc:	9b03      	ldr	r3, [sp, #12]
 800a5ce:	4298      	cmp	r0, r3
 800a5d0:	bfb8      	it	lt
 800a5d2:	4618      	movlt	r0, r3
 800a5d4:	e7a6      	b.n	800a524 <_printf_i+0x164>
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	4632      	mov	r2, r6
 800a5da:	4649      	mov	r1, r9
 800a5dc:	4640      	mov	r0, r8
 800a5de:	47d0      	blx	sl
 800a5e0:	3001      	adds	r0, #1
 800a5e2:	d09d      	beq.n	800a520 <_printf_i+0x160>
 800a5e4:	3501      	adds	r5, #1
 800a5e6:	68e3      	ldr	r3, [r4, #12]
 800a5e8:	9903      	ldr	r1, [sp, #12]
 800a5ea:	1a5b      	subs	r3, r3, r1
 800a5ec:	42ab      	cmp	r3, r5
 800a5ee:	dcf2      	bgt.n	800a5d6 <_printf_i+0x216>
 800a5f0:	e7eb      	b.n	800a5ca <_printf_i+0x20a>
 800a5f2:	2500      	movs	r5, #0
 800a5f4:	f104 0619 	add.w	r6, r4, #25
 800a5f8:	e7f5      	b.n	800a5e6 <_printf_i+0x226>
 800a5fa:	bf00      	nop
 800a5fc:	0800caca 	.word	0x0800caca
 800a600:	0800cadb 	.word	0x0800cadb

0800a604 <std>:
 800a604:	2300      	movs	r3, #0
 800a606:	b510      	push	{r4, lr}
 800a608:	4604      	mov	r4, r0
 800a60a:	e9c0 3300 	strd	r3, r3, [r0]
 800a60e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a612:	6083      	str	r3, [r0, #8]
 800a614:	8181      	strh	r1, [r0, #12]
 800a616:	6643      	str	r3, [r0, #100]	; 0x64
 800a618:	81c2      	strh	r2, [r0, #14]
 800a61a:	6183      	str	r3, [r0, #24]
 800a61c:	4619      	mov	r1, r3
 800a61e:	2208      	movs	r2, #8
 800a620:	305c      	adds	r0, #92	; 0x5c
 800a622:	f000 f914 	bl	800a84e <memset>
 800a626:	4b0d      	ldr	r3, [pc, #52]	; (800a65c <std+0x58>)
 800a628:	6263      	str	r3, [r4, #36]	; 0x24
 800a62a:	4b0d      	ldr	r3, [pc, #52]	; (800a660 <std+0x5c>)
 800a62c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a62e:	4b0d      	ldr	r3, [pc, #52]	; (800a664 <std+0x60>)
 800a630:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a632:	4b0d      	ldr	r3, [pc, #52]	; (800a668 <std+0x64>)
 800a634:	6323      	str	r3, [r4, #48]	; 0x30
 800a636:	4b0d      	ldr	r3, [pc, #52]	; (800a66c <std+0x68>)
 800a638:	6224      	str	r4, [r4, #32]
 800a63a:	429c      	cmp	r4, r3
 800a63c:	d006      	beq.n	800a64c <std+0x48>
 800a63e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a642:	4294      	cmp	r4, r2
 800a644:	d002      	beq.n	800a64c <std+0x48>
 800a646:	33d0      	adds	r3, #208	; 0xd0
 800a648:	429c      	cmp	r4, r3
 800a64a:	d105      	bne.n	800a658 <std+0x54>
 800a64c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a654:	f000 b9ce 	b.w	800a9f4 <__retarget_lock_init_recursive>
 800a658:	bd10      	pop	{r4, pc}
 800a65a:	bf00      	nop
 800a65c:	0800a7c9 	.word	0x0800a7c9
 800a660:	0800a7eb 	.word	0x0800a7eb
 800a664:	0800a823 	.word	0x0800a823
 800a668:	0800a847 	.word	0x0800a847
 800a66c:	2400538c 	.word	0x2400538c

0800a670 <stdio_exit_handler>:
 800a670:	4a02      	ldr	r2, [pc, #8]	; (800a67c <stdio_exit_handler+0xc>)
 800a672:	4903      	ldr	r1, [pc, #12]	; (800a680 <stdio_exit_handler+0x10>)
 800a674:	4803      	ldr	r0, [pc, #12]	; (800a684 <stdio_exit_handler+0x14>)
 800a676:	f000 b869 	b.w	800a74c <_fwalk_sglue>
 800a67a:	bf00      	nop
 800a67c:	24000014 	.word	0x24000014
 800a680:	0800c2b5 	.word	0x0800c2b5
 800a684:	24000020 	.word	0x24000020

0800a688 <cleanup_stdio>:
 800a688:	6841      	ldr	r1, [r0, #4]
 800a68a:	4b0c      	ldr	r3, [pc, #48]	; (800a6bc <cleanup_stdio+0x34>)
 800a68c:	4299      	cmp	r1, r3
 800a68e:	b510      	push	{r4, lr}
 800a690:	4604      	mov	r4, r0
 800a692:	d001      	beq.n	800a698 <cleanup_stdio+0x10>
 800a694:	f001 fe0e 	bl	800c2b4 <_fflush_r>
 800a698:	68a1      	ldr	r1, [r4, #8]
 800a69a:	4b09      	ldr	r3, [pc, #36]	; (800a6c0 <cleanup_stdio+0x38>)
 800a69c:	4299      	cmp	r1, r3
 800a69e:	d002      	beq.n	800a6a6 <cleanup_stdio+0x1e>
 800a6a0:	4620      	mov	r0, r4
 800a6a2:	f001 fe07 	bl	800c2b4 <_fflush_r>
 800a6a6:	68e1      	ldr	r1, [r4, #12]
 800a6a8:	4b06      	ldr	r3, [pc, #24]	; (800a6c4 <cleanup_stdio+0x3c>)
 800a6aa:	4299      	cmp	r1, r3
 800a6ac:	d004      	beq.n	800a6b8 <cleanup_stdio+0x30>
 800a6ae:	4620      	mov	r0, r4
 800a6b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6b4:	f001 bdfe 	b.w	800c2b4 <_fflush_r>
 800a6b8:	bd10      	pop	{r4, pc}
 800a6ba:	bf00      	nop
 800a6bc:	2400538c 	.word	0x2400538c
 800a6c0:	240053f4 	.word	0x240053f4
 800a6c4:	2400545c 	.word	0x2400545c

0800a6c8 <global_stdio_init.part.0>:
 800a6c8:	b510      	push	{r4, lr}
 800a6ca:	4b0b      	ldr	r3, [pc, #44]	; (800a6f8 <global_stdio_init.part.0+0x30>)
 800a6cc:	4c0b      	ldr	r4, [pc, #44]	; (800a6fc <global_stdio_init.part.0+0x34>)
 800a6ce:	4a0c      	ldr	r2, [pc, #48]	; (800a700 <global_stdio_init.part.0+0x38>)
 800a6d0:	601a      	str	r2, [r3, #0]
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	2104      	movs	r1, #4
 800a6d8:	f7ff ff94 	bl	800a604 <std>
 800a6dc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	2109      	movs	r1, #9
 800a6e4:	f7ff ff8e 	bl	800a604 <std>
 800a6e8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a6ec:	2202      	movs	r2, #2
 800a6ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6f2:	2112      	movs	r1, #18
 800a6f4:	f7ff bf86 	b.w	800a604 <std>
 800a6f8:	240054c4 	.word	0x240054c4
 800a6fc:	2400538c 	.word	0x2400538c
 800a700:	0800a671 	.word	0x0800a671

0800a704 <__sfp_lock_acquire>:
 800a704:	4801      	ldr	r0, [pc, #4]	; (800a70c <__sfp_lock_acquire+0x8>)
 800a706:	f000 b976 	b.w	800a9f6 <__retarget_lock_acquire_recursive>
 800a70a:	bf00      	nop
 800a70c:	240054cd 	.word	0x240054cd

0800a710 <__sfp_lock_release>:
 800a710:	4801      	ldr	r0, [pc, #4]	; (800a718 <__sfp_lock_release+0x8>)
 800a712:	f000 b971 	b.w	800a9f8 <__retarget_lock_release_recursive>
 800a716:	bf00      	nop
 800a718:	240054cd 	.word	0x240054cd

0800a71c <__sinit>:
 800a71c:	b510      	push	{r4, lr}
 800a71e:	4604      	mov	r4, r0
 800a720:	f7ff fff0 	bl	800a704 <__sfp_lock_acquire>
 800a724:	6a23      	ldr	r3, [r4, #32]
 800a726:	b11b      	cbz	r3, 800a730 <__sinit+0x14>
 800a728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a72c:	f7ff bff0 	b.w	800a710 <__sfp_lock_release>
 800a730:	4b04      	ldr	r3, [pc, #16]	; (800a744 <__sinit+0x28>)
 800a732:	6223      	str	r3, [r4, #32]
 800a734:	4b04      	ldr	r3, [pc, #16]	; (800a748 <__sinit+0x2c>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d1f5      	bne.n	800a728 <__sinit+0xc>
 800a73c:	f7ff ffc4 	bl	800a6c8 <global_stdio_init.part.0>
 800a740:	e7f2      	b.n	800a728 <__sinit+0xc>
 800a742:	bf00      	nop
 800a744:	0800a689 	.word	0x0800a689
 800a748:	240054c4 	.word	0x240054c4

0800a74c <_fwalk_sglue>:
 800a74c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a750:	4607      	mov	r7, r0
 800a752:	4688      	mov	r8, r1
 800a754:	4614      	mov	r4, r2
 800a756:	2600      	movs	r6, #0
 800a758:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a75c:	f1b9 0901 	subs.w	r9, r9, #1
 800a760:	d505      	bpl.n	800a76e <_fwalk_sglue+0x22>
 800a762:	6824      	ldr	r4, [r4, #0]
 800a764:	2c00      	cmp	r4, #0
 800a766:	d1f7      	bne.n	800a758 <_fwalk_sglue+0xc>
 800a768:	4630      	mov	r0, r6
 800a76a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a76e:	89ab      	ldrh	r3, [r5, #12]
 800a770:	2b01      	cmp	r3, #1
 800a772:	d907      	bls.n	800a784 <_fwalk_sglue+0x38>
 800a774:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a778:	3301      	adds	r3, #1
 800a77a:	d003      	beq.n	800a784 <_fwalk_sglue+0x38>
 800a77c:	4629      	mov	r1, r5
 800a77e:	4638      	mov	r0, r7
 800a780:	47c0      	blx	r8
 800a782:	4306      	orrs	r6, r0
 800a784:	3568      	adds	r5, #104	; 0x68
 800a786:	e7e9      	b.n	800a75c <_fwalk_sglue+0x10>

0800a788 <siprintf>:
 800a788:	b40e      	push	{r1, r2, r3}
 800a78a:	b500      	push	{lr}
 800a78c:	b09c      	sub	sp, #112	; 0x70
 800a78e:	ab1d      	add	r3, sp, #116	; 0x74
 800a790:	9002      	str	r0, [sp, #8]
 800a792:	9006      	str	r0, [sp, #24]
 800a794:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a798:	4809      	ldr	r0, [pc, #36]	; (800a7c0 <siprintf+0x38>)
 800a79a:	9107      	str	r1, [sp, #28]
 800a79c:	9104      	str	r1, [sp, #16]
 800a79e:	4909      	ldr	r1, [pc, #36]	; (800a7c4 <siprintf+0x3c>)
 800a7a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7a4:	9105      	str	r1, [sp, #20]
 800a7a6:	6800      	ldr	r0, [r0, #0]
 800a7a8:	9301      	str	r3, [sp, #4]
 800a7aa:	a902      	add	r1, sp, #8
 800a7ac:	f001 fbfe 	bl	800bfac <_svfiprintf_r>
 800a7b0:	9b02      	ldr	r3, [sp, #8]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	701a      	strb	r2, [r3, #0]
 800a7b6:	b01c      	add	sp, #112	; 0x70
 800a7b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7bc:	b003      	add	sp, #12
 800a7be:	4770      	bx	lr
 800a7c0:	2400006c 	.word	0x2400006c
 800a7c4:	ffff0208 	.word	0xffff0208

0800a7c8 <__sread>:
 800a7c8:	b510      	push	{r4, lr}
 800a7ca:	460c      	mov	r4, r1
 800a7cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7d0:	f000 f8c2 	bl	800a958 <_read_r>
 800a7d4:	2800      	cmp	r0, #0
 800a7d6:	bfab      	itete	ge
 800a7d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a7da:	89a3      	ldrhlt	r3, [r4, #12]
 800a7dc:	181b      	addge	r3, r3, r0
 800a7de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a7e2:	bfac      	ite	ge
 800a7e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a7e6:	81a3      	strhlt	r3, [r4, #12]
 800a7e8:	bd10      	pop	{r4, pc}

0800a7ea <__swrite>:
 800a7ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7ee:	461f      	mov	r7, r3
 800a7f0:	898b      	ldrh	r3, [r1, #12]
 800a7f2:	05db      	lsls	r3, r3, #23
 800a7f4:	4605      	mov	r5, r0
 800a7f6:	460c      	mov	r4, r1
 800a7f8:	4616      	mov	r6, r2
 800a7fa:	d505      	bpl.n	800a808 <__swrite+0x1e>
 800a7fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a800:	2302      	movs	r3, #2
 800a802:	2200      	movs	r2, #0
 800a804:	f000 f896 	bl	800a934 <_lseek_r>
 800a808:	89a3      	ldrh	r3, [r4, #12]
 800a80a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a80e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a812:	81a3      	strh	r3, [r4, #12]
 800a814:	4632      	mov	r2, r6
 800a816:	463b      	mov	r3, r7
 800a818:	4628      	mov	r0, r5
 800a81a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a81e:	f000 b8ad 	b.w	800a97c <_write_r>

0800a822 <__sseek>:
 800a822:	b510      	push	{r4, lr}
 800a824:	460c      	mov	r4, r1
 800a826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a82a:	f000 f883 	bl	800a934 <_lseek_r>
 800a82e:	1c43      	adds	r3, r0, #1
 800a830:	89a3      	ldrh	r3, [r4, #12]
 800a832:	bf15      	itete	ne
 800a834:	6560      	strne	r0, [r4, #84]	; 0x54
 800a836:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a83a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a83e:	81a3      	strheq	r3, [r4, #12]
 800a840:	bf18      	it	ne
 800a842:	81a3      	strhne	r3, [r4, #12]
 800a844:	bd10      	pop	{r4, pc}

0800a846 <__sclose>:
 800a846:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a84a:	f000 b80d 	b.w	800a868 <_close_r>

0800a84e <memset>:
 800a84e:	4402      	add	r2, r0
 800a850:	4603      	mov	r3, r0
 800a852:	4293      	cmp	r3, r2
 800a854:	d100      	bne.n	800a858 <memset+0xa>
 800a856:	4770      	bx	lr
 800a858:	f803 1b01 	strb.w	r1, [r3], #1
 800a85c:	e7f9      	b.n	800a852 <memset+0x4>
	...

0800a860 <_localeconv_r>:
 800a860:	4800      	ldr	r0, [pc, #0]	; (800a864 <_localeconv_r+0x4>)
 800a862:	4770      	bx	lr
 800a864:	24000160 	.word	0x24000160

0800a868 <_close_r>:
 800a868:	b538      	push	{r3, r4, r5, lr}
 800a86a:	4d06      	ldr	r5, [pc, #24]	; (800a884 <_close_r+0x1c>)
 800a86c:	2300      	movs	r3, #0
 800a86e:	4604      	mov	r4, r0
 800a870:	4608      	mov	r0, r1
 800a872:	602b      	str	r3, [r5, #0]
 800a874:	f7f6 fb1d 	bl	8000eb2 <_close>
 800a878:	1c43      	adds	r3, r0, #1
 800a87a:	d102      	bne.n	800a882 <_close_r+0x1a>
 800a87c:	682b      	ldr	r3, [r5, #0]
 800a87e:	b103      	cbz	r3, 800a882 <_close_r+0x1a>
 800a880:	6023      	str	r3, [r4, #0]
 800a882:	bd38      	pop	{r3, r4, r5, pc}
 800a884:	240054c8 	.word	0x240054c8

0800a888 <_reclaim_reent>:
 800a888:	4b29      	ldr	r3, [pc, #164]	; (800a930 <_reclaim_reent+0xa8>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	4283      	cmp	r3, r0
 800a88e:	b570      	push	{r4, r5, r6, lr}
 800a890:	4604      	mov	r4, r0
 800a892:	d04b      	beq.n	800a92c <_reclaim_reent+0xa4>
 800a894:	69c3      	ldr	r3, [r0, #28]
 800a896:	b143      	cbz	r3, 800a8aa <_reclaim_reent+0x22>
 800a898:	68db      	ldr	r3, [r3, #12]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d144      	bne.n	800a928 <_reclaim_reent+0xa0>
 800a89e:	69e3      	ldr	r3, [r4, #28]
 800a8a0:	6819      	ldr	r1, [r3, #0]
 800a8a2:	b111      	cbz	r1, 800a8aa <_reclaim_reent+0x22>
 800a8a4:	4620      	mov	r0, r4
 800a8a6:	f000 feab 	bl	800b600 <_free_r>
 800a8aa:	6961      	ldr	r1, [r4, #20]
 800a8ac:	b111      	cbz	r1, 800a8b4 <_reclaim_reent+0x2c>
 800a8ae:	4620      	mov	r0, r4
 800a8b0:	f000 fea6 	bl	800b600 <_free_r>
 800a8b4:	69e1      	ldr	r1, [r4, #28]
 800a8b6:	b111      	cbz	r1, 800a8be <_reclaim_reent+0x36>
 800a8b8:	4620      	mov	r0, r4
 800a8ba:	f000 fea1 	bl	800b600 <_free_r>
 800a8be:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a8c0:	b111      	cbz	r1, 800a8c8 <_reclaim_reent+0x40>
 800a8c2:	4620      	mov	r0, r4
 800a8c4:	f000 fe9c 	bl	800b600 <_free_r>
 800a8c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a8ca:	b111      	cbz	r1, 800a8d2 <_reclaim_reent+0x4a>
 800a8cc:	4620      	mov	r0, r4
 800a8ce:	f000 fe97 	bl	800b600 <_free_r>
 800a8d2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a8d4:	b111      	cbz	r1, 800a8dc <_reclaim_reent+0x54>
 800a8d6:	4620      	mov	r0, r4
 800a8d8:	f000 fe92 	bl	800b600 <_free_r>
 800a8dc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a8de:	b111      	cbz	r1, 800a8e6 <_reclaim_reent+0x5e>
 800a8e0:	4620      	mov	r0, r4
 800a8e2:	f000 fe8d 	bl	800b600 <_free_r>
 800a8e6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a8e8:	b111      	cbz	r1, 800a8f0 <_reclaim_reent+0x68>
 800a8ea:	4620      	mov	r0, r4
 800a8ec:	f000 fe88 	bl	800b600 <_free_r>
 800a8f0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a8f2:	b111      	cbz	r1, 800a8fa <_reclaim_reent+0x72>
 800a8f4:	4620      	mov	r0, r4
 800a8f6:	f000 fe83 	bl	800b600 <_free_r>
 800a8fa:	6a23      	ldr	r3, [r4, #32]
 800a8fc:	b1b3      	cbz	r3, 800a92c <_reclaim_reent+0xa4>
 800a8fe:	4620      	mov	r0, r4
 800a900:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a904:	4718      	bx	r3
 800a906:	5949      	ldr	r1, [r1, r5]
 800a908:	b941      	cbnz	r1, 800a91c <_reclaim_reent+0x94>
 800a90a:	3504      	adds	r5, #4
 800a90c:	69e3      	ldr	r3, [r4, #28]
 800a90e:	2d80      	cmp	r5, #128	; 0x80
 800a910:	68d9      	ldr	r1, [r3, #12]
 800a912:	d1f8      	bne.n	800a906 <_reclaim_reent+0x7e>
 800a914:	4620      	mov	r0, r4
 800a916:	f000 fe73 	bl	800b600 <_free_r>
 800a91a:	e7c0      	b.n	800a89e <_reclaim_reent+0x16>
 800a91c:	680e      	ldr	r6, [r1, #0]
 800a91e:	4620      	mov	r0, r4
 800a920:	f000 fe6e 	bl	800b600 <_free_r>
 800a924:	4631      	mov	r1, r6
 800a926:	e7ef      	b.n	800a908 <_reclaim_reent+0x80>
 800a928:	2500      	movs	r5, #0
 800a92a:	e7ef      	b.n	800a90c <_reclaim_reent+0x84>
 800a92c:	bd70      	pop	{r4, r5, r6, pc}
 800a92e:	bf00      	nop
 800a930:	2400006c 	.word	0x2400006c

0800a934 <_lseek_r>:
 800a934:	b538      	push	{r3, r4, r5, lr}
 800a936:	4d07      	ldr	r5, [pc, #28]	; (800a954 <_lseek_r+0x20>)
 800a938:	4604      	mov	r4, r0
 800a93a:	4608      	mov	r0, r1
 800a93c:	4611      	mov	r1, r2
 800a93e:	2200      	movs	r2, #0
 800a940:	602a      	str	r2, [r5, #0]
 800a942:	461a      	mov	r2, r3
 800a944:	f7f6 fadc 	bl	8000f00 <_lseek>
 800a948:	1c43      	adds	r3, r0, #1
 800a94a:	d102      	bne.n	800a952 <_lseek_r+0x1e>
 800a94c:	682b      	ldr	r3, [r5, #0]
 800a94e:	b103      	cbz	r3, 800a952 <_lseek_r+0x1e>
 800a950:	6023      	str	r3, [r4, #0]
 800a952:	bd38      	pop	{r3, r4, r5, pc}
 800a954:	240054c8 	.word	0x240054c8

0800a958 <_read_r>:
 800a958:	b538      	push	{r3, r4, r5, lr}
 800a95a:	4d07      	ldr	r5, [pc, #28]	; (800a978 <_read_r+0x20>)
 800a95c:	4604      	mov	r4, r0
 800a95e:	4608      	mov	r0, r1
 800a960:	4611      	mov	r1, r2
 800a962:	2200      	movs	r2, #0
 800a964:	602a      	str	r2, [r5, #0]
 800a966:	461a      	mov	r2, r3
 800a968:	f7f6 fa6a 	bl	8000e40 <_read>
 800a96c:	1c43      	adds	r3, r0, #1
 800a96e:	d102      	bne.n	800a976 <_read_r+0x1e>
 800a970:	682b      	ldr	r3, [r5, #0]
 800a972:	b103      	cbz	r3, 800a976 <_read_r+0x1e>
 800a974:	6023      	str	r3, [r4, #0]
 800a976:	bd38      	pop	{r3, r4, r5, pc}
 800a978:	240054c8 	.word	0x240054c8

0800a97c <_write_r>:
 800a97c:	b538      	push	{r3, r4, r5, lr}
 800a97e:	4d07      	ldr	r5, [pc, #28]	; (800a99c <_write_r+0x20>)
 800a980:	4604      	mov	r4, r0
 800a982:	4608      	mov	r0, r1
 800a984:	4611      	mov	r1, r2
 800a986:	2200      	movs	r2, #0
 800a988:	602a      	str	r2, [r5, #0]
 800a98a:	461a      	mov	r2, r3
 800a98c:	f7f6 fa75 	bl	8000e7a <_write>
 800a990:	1c43      	adds	r3, r0, #1
 800a992:	d102      	bne.n	800a99a <_write_r+0x1e>
 800a994:	682b      	ldr	r3, [r5, #0]
 800a996:	b103      	cbz	r3, 800a99a <_write_r+0x1e>
 800a998:	6023      	str	r3, [r4, #0]
 800a99a:	bd38      	pop	{r3, r4, r5, pc}
 800a99c:	240054c8 	.word	0x240054c8

0800a9a0 <__errno>:
 800a9a0:	4b01      	ldr	r3, [pc, #4]	; (800a9a8 <__errno+0x8>)
 800a9a2:	6818      	ldr	r0, [r3, #0]
 800a9a4:	4770      	bx	lr
 800a9a6:	bf00      	nop
 800a9a8:	2400006c 	.word	0x2400006c

0800a9ac <__libc_init_array>:
 800a9ac:	b570      	push	{r4, r5, r6, lr}
 800a9ae:	4d0d      	ldr	r5, [pc, #52]	; (800a9e4 <__libc_init_array+0x38>)
 800a9b0:	4c0d      	ldr	r4, [pc, #52]	; (800a9e8 <__libc_init_array+0x3c>)
 800a9b2:	1b64      	subs	r4, r4, r5
 800a9b4:	10a4      	asrs	r4, r4, #2
 800a9b6:	2600      	movs	r6, #0
 800a9b8:	42a6      	cmp	r6, r4
 800a9ba:	d109      	bne.n	800a9d0 <__libc_init_array+0x24>
 800a9bc:	4d0b      	ldr	r5, [pc, #44]	; (800a9ec <__libc_init_array+0x40>)
 800a9be:	4c0c      	ldr	r4, [pc, #48]	; (800a9f0 <__libc_init_array+0x44>)
 800a9c0:	f002 f80e 	bl	800c9e0 <_init>
 800a9c4:	1b64      	subs	r4, r4, r5
 800a9c6:	10a4      	asrs	r4, r4, #2
 800a9c8:	2600      	movs	r6, #0
 800a9ca:	42a6      	cmp	r6, r4
 800a9cc:	d105      	bne.n	800a9da <__libc_init_array+0x2e>
 800a9ce:	bd70      	pop	{r4, r5, r6, pc}
 800a9d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9d4:	4798      	blx	r3
 800a9d6:	3601      	adds	r6, #1
 800a9d8:	e7ee      	b.n	800a9b8 <__libc_init_array+0xc>
 800a9da:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9de:	4798      	blx	r3
 800a9e0:	3601      	adds	r6, #1
 800a9e2:	e7f2      	b.n	800a9ca <__libc_init_array+0x1e>
 800a9e4:	0800ce34 	.word	0x0800ce34
 800a9e8:	0800ce34 	.word	0x0800ce34
 800a9ec:	0800ce34 	.word	0x0800ce34
 800a9f0:	0800ce38 	.word	0x0800ce38

0800a9f4 <__retarget_lock_init_recursive>:
 800a9f4:	4770      	bx	lr

0800a9f6 <__retarget_lock_acquire_recursive>:
 800a9f6:	4770      	bx	lr

0800a9f8 <__retarget_lock_release_recursive>:
 800a9f8:	4770      	bx	lr

0800a9fa <memcpy>:
 800a9fa:	440a      	add	r2, r1
 800a9fc:	4291      	cmp	r1, r2
 800a9fe:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa02:	d100      	bne.n	800aa06 <memcpy+0xc>
 800aa04:	4770      	bx	lr
 800aa06:	b510      	push	{r4, lr}
 800aa08:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa10:	4291      	cmp	r1, r2
 800aa12:	d1f9      	bne.n	800aa08 <memcpy+0xe>
 800aa14:	bd10      	pop	{r4, pc}

0800aa16 <quorem>:
 800aa16:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa1a:	6903      	ldr	r3, [r0, #16]
 800aa1c:	690c      	ldr	r4, [r1, #16]
 800aa1e:	42a3      	cmp	r3, r4
 800aa20:	4607      	mov	r7, r0
 800aa22:	db7e      	blt.n	800ab22 <quorem+0x10c>
 800aa24:	3c01      	subs	r4, #1
 800aa26:	f101 0814 	add.w	r8, r1, #20
 800aa2a:	f100 0514 	add.w	r5, r0, #20
 800aa2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aa32:	9301      	str	r3, [sp, #4]
 800aa34:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aa38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aa3c:	3301      	adds	r3, #1
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800aa44:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aa48:	fbb2 f6f3 	udiv	r6, r2, r3
 800aa4c:	d331      	bcc.n	800aab2 <quorem+0x9c>
 800aa4e:	f04f 0e00 	mov.w	lr, #0
 800aa52:	4640      	mov	r0, r8
 800aa54:	46ac      	mov	ip, r5
 800aa56:	46f2      	mov	sl, lr
 800aa58:	f850 2b04 	ldr.w	r2, [r0], #4
 800aa5c:	b293      	uxth	r3, r2
 800aa5e:	fb06 e303 	mla	r3, r6, r3, lr
 800aa62:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800aa66:	0c1a      	lsrs	r2, r3, #16
 800aa68:	b29b      	uxth	r3, r3
 800aa6a:	ebaa 0303 	sub.w	r3, sl, r3
 800aa6e:	f8dc a000 	ldr.w	sl, [ip]
 800aa72:	fa13 f38a 	uxtah	r3, r3, sl
 800aa76:	fb06 220e 	mla	r2, r6, lr, r2
 800aa7a:	9300      	str	r3, [sp, #0]
 800aa7c:	9b00      	ldr	r3, [sp, #0]
 800aa7e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800aa82:	b292      	uxth	r2, r2
 800aa84:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800aa88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aa8c:	f8bd 3000 	ldrh.w	r3, [sp]
 800aa90:	4581      	cmp	r9, r0
 800aa92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aa96:	f84c 3b04 	str.w	r3, [ip], #4
 800aa9a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800aa9e:	d2db      	bcs.n	800aa58 <quorem+0x42>
 800aaa0:	f855 300b 	ldr.w	r3, [r5, fp]
 800aaa4:	b92b      	cbnz	r3, 800aab2 <quorem+0x9c>
 800aaa6:	9b01      	ldr	r3, [sp, #4]
 800aaa8:	3b04      	subs	r3, #4
 800aaaa:	429d      	cmp	r5, r3
 800aaac:	461a      	mov	r2, r3
 800aaae:	d32c      	bcc.n	800ab0a <quorem+0xf4>
 800aab0:	613c      	str	r4, [r7, #16]
 800aab2:	4638      	mov	r0, r7
 800aab4:	f001 f920 	bl	800bcf8 <__mcmp>
 800aab8:	2800      	cmp	r0, #0
 800aaba:	db22      	blt.n	800ab02 <quorem+0xec>
 800aabc:	3601      	adds	r6, #1
 800aabe:	4629      	mov	r1, r5
 800aac0:	2000      	movs	r0, #0
 800aac2:	f858 2b04 	ldr.w	r2, [r8], #4
 800aac6:	f8d1 c000 	ldr.w	ip, [r1]
 800aaca:	b293      	uxth	r3, r2
 800aacc:	1ac3      	subs	r3, r0, r3
 800aace:	0c12      	lsrs	r2, r2, #16
 800aad0:	fa13 f38c 	uxtah	r3, r3, ip
 800aad4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800aad8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aadc:	b29b      	uxth	r3, r3
 800aade:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aae2:	45c1      	cmp	r9, r8
 800aae4:	f841 3b04 	str.w	r3, [r1], #4
 800aae8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800aaec:	d2e9      	bcs.n	800aac2 <quorem+0xac>
 800aaee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aaf2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aaf6:	b922      	cbnz	r2, 800ab02 <quorem+0xec>
 800aaf8:	3b04      	subs	r3, #4
 800aafa:	429d      	cmp	r5, r3
 800aafc:	461a      	mov	r2, r3
 800aafe:	d30a      	bcc.n	800ab16 <quorem+0x100>
 800ab00:	613c      	str	r4, [r7, #16]
 800ab02:	4630      	mov	r0, r6
 800ab04:	b003      	add	sp, #12
 800ab06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab0a:	6812      	ldr	r2, [r2, #0]
 800ab0c:	3b04      	subs	r3, #4
 800ab0e:	2a00      	cmp	r2, #0
 800ab10:	d1ce      	bne.n	800aab0 <quorem+0x9a>
 800ab12:	3c01      	subs	r4, #1
 800ab14:	e7c9      	b.n	800aaaa <quorem+0x94>
 800ab16:	6812      	ldr	r2, [r2, #0]
 800ab18:	3b04      	subs	r3, #4
 800ab1a:	2a00      	cmp	r2, #0
 800ab1c:	d1f0      	bne.n	800ab00 <quorem+0xea>
 800ab1e:	3c01      	subs	r4, #1
 800ab20:	e7eb      	b.n	800aafa <quorem+0xe4>
 800ab22:	2000      	movs	r0, #0
 800ab24:	e7ee      	b.n	800ab04 <quorem+0xee>
	...

0800ab28 <_dtoa_r>:
 800ab28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab2c:	ed2d 8b02 	vpush	{d8}
 800ab30:	69c5      	ldr	r5, [r0, #28]
 800ab32:	b091      	sub	sp, #68	; 0x44
 800ab34:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ab38:	ec59 8b10 	vmov	r8, r9, d0
 800ab3c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800ab3e:	9106      	str	r1, [sp, #24]
 800ab40:	4606      	mov	r6, r0
 800ab42:	9208      	str	r2, [sp, #32]
 800ab44:	930c      	str	r3, [sp, #48]	; 0x30
 800ab46:	b975      	cbnz	r5, 800ab66 <_dtoa_r+0x3e>
 800ab48:	2010      	movs	r0, #16
 800ab4a:	f000 fda5 	bl	800b698 <malloc>
 800ab4e:	4602      	mov	r2, r0
 800ab50:	61f0      	str	r0, [r6, #28]
 800ab52:	b920      	cbnz	r0, 800ab5e <_dtoa_r+0x36>
 800ab54:	4ba6      	ldr	r3, [pc, #664]	; (800adf0 <_dtoa_r+0x2c8>)
 800ab56:	21ef      	movs	r1, #239	; 0xef
 800ab58:	48a6      	ldr	r0, [pc, #664]	; (800adf4 <_dtoa_r+0x2cc>)
 800ab5a:	f001 fbfd 	bl	800c358 <__assert_func>
 800ab5e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ab62:	6005      	str	r5, [r0, #0]
 800ab64:	60c5      	str	r5, [r0, #12]
 800ab66:	69f3      	ldr	r3, [r6, #28]
 800ab68:	6819      	ldr	r1, [r3, #0]
 800ab6a:	b151      	cbz	r1, 800ab82 <_dtoa_r+0x5a>
 800ab6c:	685a      	ldr	r2, [r3, #4]
 800ab6e:	604a      	str	r2, [r1, #4]
 800ab70:	2301      	movs	r3, #1
 800ab72:	4093      	lsls	r3, r2
 800ab74:	608b      	str	r3, [r1, #8]
 800ab76:	4630      	mov	r0, r6
 800ab78:	f000 fe82 	bl	800b880 <_Bfree>
 800ab7c:	69f3      	ldr	r3, [r6, #28]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	601a      	str	r2, [r3, #0]
 800ab82:	f1b9 0300 	subs.w	r3, r9, #0
 800ab86:	bfbb      	ittet	lt
 800ab88:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ab8c:	9303      	strlt	r3, [sp, #12]
 800ab8e:	2300      	movge	r3, #0
 800ab90:	2201      	movlt	r2, #1
 800ab92:	bfac      	ite	ge
 800ab94:	6023      	strge	r3, [r4, #0]
 800ab96:	6022      	strlt	r2, [r4, #0]
 800ab98:	4b97      	ldr	r3, [pc, #604]	; (800adf8 <_dtoa_r+0x2d0>)
 800ab9a:	9c03      	ldr	r4, [sp, #12]
 800ab9c:	43a3      	bics	r3, r4
 800ab9e:	d11c      	bne.n	800abda <_dtoa_r+0xb2>
 800aba0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aba2:	f242 730f 	movw	r3, #9999	; 0x270f
 800aba6:	6013      	str	r3, [r2, #0]
 800aba8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800abac:	ea53 0308 	orrs.w	r3, r3, r8
 800abb0:	f000 84fb 	beq.w	800b5aa <_dtoa_r+0xa82>
 800abb4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800abb6:	b963      	cbnz	r3, 800abd2 <_dtoa_r+0xaa>
 800abb8:	4b90      	ldr	r3, [pc, #576]	; (800adfc <_dtoa_r+0x2d4>)
 800abba:	e020      	b.n	800abfe <_dtoa_r+0xd6>
 800abbc:	4b90      	ldr	r3, [pc, #576]	; (800ae00 <_dtoa_r+0x2d8>)
 800abbe:	9301      	str	r3, [sp, #4]
 800abc0:	3308      	adds	r3, #8
 800abc2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800abc4:	6013      	str	r3, [r2, #0]
 800abc6:	9801      	ldr	r0, [sp, #4]
 800abc8:	b011      	add	sp, #68	; 0x44
 800abca:	ecbd 8b02 	vpop	{d8}
 800abce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abd2:	4b8a      	ldr	r3, [pc, #552]	; (800adfc <_dtoa_r+0x2d4>)
 800abd4:	9301      	str	r3, [sp, #4]
 800abd6:	3303      	adds	r3, #3
 800abd8:	e7f3      	b.n	800abc2 <_dtoa_r+0x9a>
 800abda:	ed9d 8b02 	vldr	d8, [sp, #8]
 800abde:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800abe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abe6:	d10c      	bne.n	800ac02 <_dtoa_r+0xda>
 800abe8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800abea:	2301      	movs	r3, #1
 800abec:	6013      	str	r3, [r2, #0]
 800abee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	f000 84d7 	beq.w	800b5a4 <_dtoa_r+0xa7c>
 800abf6:	4b83      	ldr	r3, [pc, #524]	; (800ae04 <_dtoa_r+0x2dc>)
 800abf8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800abfa:	6013      	str	r3, [r2, #0]
 800abfc:	3b01      	subs	r3, #1
 800abfe:	9301      	str	r3, [sp, #4]
 800ac00:	e7e1      	b.n	800abc6 <_dtoa_r+0x9e>
 800ac02:	aa0e      	add	r2, sp, #56	; 0x38
 800ac04:	a90f      	add	r1, sp, #60	; 0x3c
 800ac06:	4630      	mov	r0, r6
 800ac08:	eeb0 0b48 	vmov.f64	d0, d8
 800ac0c:	f001 f91a 	bl	800be44 <__d2b>
 800ac10:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800ac14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ac16:	4605      	mov	r5, r0
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d046      	beq.n	800acaa <_dtoa_r+0x182>
 800ac1c:	eeb0 7b48 	vmov.f64	d7, d8
 800ac20:	ee18 1a90 	vmov	r1, s17
 800ac24:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ac28:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800ac2c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800ac30:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ac34:	2000      	movs	r0, #0
 800ac36:	ee07 1a90 	vmov	s15, r1
 800ac3a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800ac3e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800add8 <_dtoa_r+0x2b0>
 800ac42:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ac46:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800ade0 <_dtoa_r+0x2b8>
 800ac4a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800ac4e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800ade8 <_dtoa_r+0x2c0>
 800ac52:	ee07 3a90 	vmov	s15, r3
 800ac56:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800ac5a:	eeb0 7b46 	vmov.f64	d7, d6
 800ac5e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800ac62:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800ac66:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800ac6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac6e:	ee16 ba90 	vmov	fp, s13
 800ac72:	9009      	str	r0, [sp, #36]	; 0x24
 800ac74:	d508      	bpl.n	800ac88 <_dtoa_r+0x160>
 800ac76:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800ac7a:	eeb4 6b47 	vcmp.f64	d6, d7
 800ac7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac82:	bf18      	it	ne
 800ac84:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800ac88:	f1bb 0f16 	cmp.w	fp, #22
 800ac8c:	d82b      	bhi.n	800ace6 <_dtoa_r+0x1be>
 800ac8e:	495e      	ldr	r1, [pc, #376]	; (800ae08 <_dtoa_r+0x2e0>)
 800ac90:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800ac94:	ed91 7b00 	vldr	d7, [r1]
 800ac98:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ac9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aca0:	d501      	bpl.n	800aca6 <_dtoa_r+0x17e>
 800aca2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aca6:	2100      	movs	r1, #0
 800aca8:	e01e      	b.n	800ace8 <_dtoa_r+0x1c0>
 800acaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800acac:	4413      	add	r3, r2
 800acae:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800acb2:	2920      	cmp	r1, #32
 800acb4:	bfc1      	itttt	gt
 800acb6:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800acba:	408c      	lslgt	r4, r1
 800acbc:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800acc0:	fa28 f101 	lsrgt.w	r1, r8, r1
 800acc4:	bfd6      	itet	le
 800acc6:	f1c1 0120 	rsble	r1, r1, #32
 800acca:	4321      	orrgt	r1, r4
 800accc:	fa08 f101 	lslle.w	r1, r8, r1
 800acd0:	ee07 1a90 	vmov	s15, r1
 800acd4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800acd8:	3b01      	subs	r3, #1
 800acda:	ee17 1a90 	vmov	r1, s15
 800acde:	2001      	movs	r0, #1
 800ace0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800ace4:	e7a7      	b.n	800ac36 <_dtoa_r+0x10e>
 800ace6:	2101      	movs	r1, #1
 800ace8:	1ad2      	subs	r2, r2, r3
 800acea:	1e53      	subs	r3, r2, #1
 800acec:	9305      	str	r3, [sp, #20]
 800acee:	bf45      	ittet	mi
 800acf0:	f1c2 0301 	rsbmi	r3, r2, #1
 800acf4:	9304      	strmi	r3, [sp, #16]
 800acf6:	2300      	movpl	r3, #0
 800acf8:	2300      	movmi	r3, #0
 800acfa:	bf4c      	ite	mi
 800acfc:	9305      	strmi	r3, [sp, #20]
 800acfe:	9304      	strpl	r3, [sp, #16]
 800ad00:	f1bb 0f00 	cmp.w	fp, #0
 800ad04:	910b      	str	r1, [sp, #44]	; 0x2c
 800ad06:	db18      	blt.n	800ad3a <_dtoa_r+0x212>
 800ad08:	9b05      	ldr	r3, [sp, #20]
 800ad0a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800ad0e:	445b      	add	r3, fp
 800ad10:	9305      	str	r3, [sp, #20]
 800ad12:	2300      	movs	r3, #0
 800ad14:	9a06      	ldr	r2, [sp, #24]
 800ad16:	2a09      	cmp	r2, #9
 800ad18:	d848      	bhi.n	800adac <_dtoa_r+0x284>
 800ad1a:	2a05      	cmp	r2, #5
 800ad1c:	bfc4      	itt	gt
 800ad1e:	3a04      	subgt	r2, #4
 800ad20:	9206      	strgt	r2, [sp, #24]
 800ad22:	9a06      	ldr	r2, [sp, #24]
 800ad24:	f1a2 0202 	sub.w	r2, r2, #2
 800ad28:	bfcc      	ite	gt
 800ad2a:	2400      	movgt	r4, #0
 800ad2c:	2401      	movle	r4, #1
 800ad2e:	2a03      	cmp	r2, #3
 800ad30:	d847      	bhi.n	800adc2 <_dtoa_r+0x29a>
 800ad32:	e8df f002 	tbb	[pc, r2]
 800ad36:	2d0b      	.short	0x2d0b
 800ad38:	392b      	.short	0x392b
 800ad3a:	9b04      	ldr	r3, [sp, #16]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	eba3 030b 	sub.w	r3, r3, fp
 800ad42:	9304      	str	r3, [sp, #16]
 800ad44:	920a      	str	r2, [sp, #40]	; 0x28
 800ad46:	f1cb 0300 	rsb	r3, fp, #0
 800ad4a:	e7e3      	b.n	800ad14 <_dtoa_r+0x1ec>
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	9207      	str	r2, [sp, #28]
 800ad50:	9a08      	ldr	r2, [sp, #32]
 800ad52:	2a00      	cmp	r2, #0
 800ad54:	dc38      	bgt.n	800adc8 <_dtoa_r+0x2a0>
 800ad56:	f04f 0a01 	mov.w	sl, #1
 800ad5a:	46d1      	mov	r9, sl
 800ad5c:	4652      	mov	r2, sl
 800ad5e:	f8cd a020 	str.w	sl, [sp, #32]
 800ad62:	69f7      	ldr	r7, [r6, #28]
 800ad64:	2100      	movs	r1, #0
 800ad66:	2004      	movs	r0, #4
 800ad68:	f100 0c14 	add.w	ip, r0, #20
 800ad6c:	4594      	cmp	ip, r2
 800ad6e:	d930      	bls.n	800add2 <_dtoa_r+0x2aa>
 800ad70:	6079      	str	r1, [r7, #4]
 800ad72:	4630      	mov	r0, r6
 800ad74:	930d      	str	r3, [sp, #52]	; 0x34
 800ad76:	f000 fd43 	bl	800b800 <_Balloc>
 800ad7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad7c:	9001      	str	r0, [sp, #4]
 800ad7e:	4602      	mov	r2, r0
 800ad80:	2800      	cmp	r0, #0
 800ad82:	d145      	bne.n	800ae10 <_dtoa_r+0x2e8>
 800ad84:	4b21      	ldr	r3, [pc, #132]	; (800ae0c <_dtoa_r+0x2e4>)
 800ad86:	f240 11af 	movw	r1, #431	; 0x1af
 800ad8a:	e6e5      	b.n	800ab58 <_dtoa_r+0x30>
 800ad8c:	2201      	movs	r2, #1
 800ad8e:	e7de      	b.n	800ad4e <_dtoa_r+0x226>
 800ad90:	2200      	movs	r2, #0
 800ad92:	9207      	str	r2, [sp, #28]
 800ad94:	9a08      	ldr	r2, [sp, #32]
 800ad96:	eb0b 0a02 	add.w	sl, fp, r2
 800ad9a:	f10a 0901 	add.w	r9, sl, #1
 800ad9e:	464a      	mov	r2, r9
 800ada0:	2a01      	cmp	r2, #1
 800ada2:	bfb8      	it	lt
 800ada4:	2201      	movlt	r2, #1
 800ada6:	e7dc      	b.n	800ad62 <_dtoa_r+0x23a>
 800ada8:	2201      	movs	r2, #1
 800adaa:	e7f2      	b.n	800ad92 <_dtoa_r+0x26a>
 800adac:	2401      	movs	r4, #1
 800adae:	2200      	movs	r2, #0
 800adb0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800adb4:	f04f 3aff 	mov.w	sl, #4294967295
 800adb8:	2100      	movs	r1, #0
 800adba:	46d1      	mov	r9, sl
 800adbc:	2212      	movs	r2, #18
 800adbe:	9108      	str	r1, [sp, #32]
 800adc0:	e7cf      	b.n	800ad62 <_dtoa_r+0x23a>
 800adc2:	2201      	movs	r2, #1
 800adc4:	9207      	str	r2, [sp, #28]
 800adc6:	e7f5      	b.n	800adb4 <_dtoa_r+0x28c>
 800adc8:	f8dd a020 	ldr.w	sl, [sp, #32]
 800adcc:	46d1      	mov	r9, sl
 800adce:	4652      	mov	r2, sl
 800add0:	e7c7      	b.n	800ad62 <_dtoa_r+0x23a>
 800add2:	3101      	adds	r1, #1
 800add4:	0040      	lsls	r0, r0, #1
 800add6:	e7c7      	b.n	800ad68 <_dtoa_r+0x240>
 800add8:	636f4361 	.word	0x636f4361
 800addc:	3fd287a7 	.word	0x3fd287a7
 800ade0:	8b60c8b3 	.word	0x8b60c8b3
 800ade4:	3fc68a28 	.word	0x3fc68a28
 800ade8:	509f79fb 	.word	0x509f79fb
 800adec:	3fd34413 	.word	0x3fd34413
 800adf0:	0800caf9 	.word	0x0800caf9
 800adf4:	0800cb10 	.word	0x0800cb10
 800adf8:	7ff00000 	.word	0x7ff00000
 800adfc:	0800caf5 	.word	0x0800caf5
 800ae00:	0800caec 	.word	0x0800caec
 800ae04:	0800cac9 	.word	0x0800cac9
 800ae08:	0800cc00 	.word	0x0800cc00
 800ae0c:	0800cb68 	.word	0x0800cb68
 800ae10:	69f2      	ldr	r2, [r6, #28]
 800ae12:	9901      	ldr	r1, [sp, #4]
 800ae14:	6011      	str	r1, [r2, #0]
 800ae16:	f1b9 0f0e 	cmp.w	r9, #14
 800ae1a:	d86c      	bhi.n	800aef6 <_dtoa_r+0x3ce>
 800ae1c:	2c00      	cmp	r4, #0
 800ae1e:	d06a      	beq.n	800aef6 <_dtoa_r+0x3ce>
 800ae20:	f1bb 0f00 	cmp.w	fp, #0
 800ae24:	f340 80a0 	ble.w	800af68 <_dtoa_r+0x440>
 800ae28:	4ac1      	ldr	r2, [pc, #772]	; (800b130 <_dtoa_r+0x608>)
 800ae2a:	f00b 010f 	and.w	r1, fp, #15
 800ae2e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ae32:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ae36:	ed92 7b00 	vldr	d7, [r2]
 800ae3a:	ea4f 122b 	mov.w	r2, fp, asr #4
 800ae3e:	f000 8087 	beq.w	800af50 <_dtoa_r+0x428>
 800ae42:	49bc      	ldr	r1, [pc, #752]	; (800b134 <_dtoa_r+0x60c>)
 800ae44:	ed91 6b08 	vldr	d6, [r1, #32]
 800ae48:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800ae4c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ae50:	f002 020f 	and.w	r2, r2, #15
 800ae54:	2103      	movs	r1, #3
 800ae56:	48b7      	ldr	r0, [pc, #732]	; (800b134 <_dtoa_r+0x60c>)
 800ae58:	2a00      	cmp	r2, #0
 800ae5a:	d17b      	bne.n	800af54 <_dtoa_r+0x42c>
 800ae5c:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ae60:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ae64:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ae68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ae6a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ae6e:	2a00      	cmp	r2, #0
 800ae70:	f000 80a0 	beq.w	800afb4 <_dtoa_r+0x48c>
 800ae74:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800ae78:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ae7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae80:	f140 8098 	bpl.w	800afb4 <_dtoa_r+0x48c>
 800ae84:	f1b9 0f00 	cmp.w	r9, #0
 800ae88:	f000 8094 	beq.w	800afb4 <_dtoa_r+0x48c>
 800ae8c:	f1ba 0f00 	cmp.w	sl, #0
 800ae90:	dd2f      	ble.n	800aef2 <_dtoa_r+0x3ca>
 800ae92:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800ae96:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ae9a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ae9e:	f10b 32ff 	add.w	r2, fp, #4294967295
 800aea2:	3101      	adds	r1, #1
 800aea4:	4654      	mov	r4, sl
 800aea6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800aeaa:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800aeae:	ee07 1a90 	vmov	s15, r1
 800aeb2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800aeb6:	eea7 5b06 	vfma.f64	d5, d7, d6
 800aeba:	ee15 7a90 	vmov	r7, s11
 800aebe:	ec51 0b15 	vmov	r0, r1, d5
 800aec2:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800aec6:	2c00      	cmp	r4, #0
 800aec8:	d177      	bne.n	800afba <_dtoa_r+0x492>
 800aeca:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800aece:	ee36 6b47 	vsub.f64	d6, d6, d7
 800aed2:	ec41 0b17 	vmov	d7, r0, r1
 800aed6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800aeda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aede:	f300 826a 	bgt.w	800b3b6 <_dtoa_r+0x88e>
 800aee2:	eeb1 7b47 	vneg.f64	d7, d7
 800aee6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800aeea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeee:	f100 8260 	bmi.w	800b3b2 <_dtoa_r+0x88a>
 800aef2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800aef6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aef8:	2a00      	cmp	r2, #0
 800aefa:	f2c0 811d 	blt.w	800b138 <_dtoa_r+0x610>
 800aefe:	f1bb 0f0e 	cmp.w	fp, #14
 800af02:	f300 8119 	bgt.w	800b138 <_dtoa_r+0x610>
 800af06:	4b8a      	ldr	r3, [pc, #552]	; (800b130 <_dtoa_r+0x608>)
 800af08:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800af0c:	ed93 6b00 	vldr	d6, [r3]
 800af10:	9b08      	ldr	r3, [sp, #32]
 800af12:	2b00      	cmp	r3, #0
 800af14:	f280 80b7 	bge.w	800b086 <_dtoa_r+0x55e>
 800af18:	f1b9 0f00 	cmp.w	r9, #0
 800af1c:	f300 80b3 	bgt.w	800b086 <_dtoa_r+0x55e>
 800af20:	f040 8246 	bne.w	800b3b0 <_dtoa_r+0x888>
 800af24:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800af28:	ee26 6b07 	vmul.f64	d6, d6, d7
 800af2c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800af30:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800af34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af38:	464c      	mov	r4, r9
 800af3a:	464f      	mov	r7, r9
 800af3c:	f280 821c 	bge.w	800b378 <_dtoa_r+0x850>
 800af40:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800af44:	2331      	movs	r3, #49	; 0x31
 800af46:	f808 3b01 	strb.w	r3, [r8], #1
 800af4a:	f10b 0b01 	add.w	fp, fp, #1
 800af4e:	e218      	b.n	800b382 <_dtoa_r+0x85a>
 800af50:	2102      	movs	r1, #2
 800af52:	e780      	b.n	800ae56 <_dtoa_r+0x32e>
 800af54:	07d4      	lsls	r4, r2, #31
 800af56:	d504      	bpl.n	800af62 <_dtoa_r+0x43a>
 800af58:	ed90 6b00 	vldr	d6, [r0]
 800af5c:	3101      	adds	r1, #1
 800af5e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800af62:	1052      	asrs	r2, r2, #1
 800af64:	3008      	adds	r0, #8
 800af66:	e777      	b.n	800ae58 <_dtoa_r+0x330>
 800af68:	d022      	beq.n	800afb0 <_dtoa_r+0x488>
 800af6a:	f1cb 0200 	rsb	r2, fp, #0
 800af6e:	4970      	ldr	r1, [pc, #448]	; (800b130 <_dtoa_r+0x608>)
 800af70:	f002 000f 	and.w	r0, r2, #15
 800af74:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800af78:	ed91 7b00 	vldr	d7, [r1]
 800af7c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800af80:	ed8d 7b02 	vstr	d7, [sp, #8]
 800af84:	486b      	ldr	r0, [pc, #428]	; (800b134 <_dtoa_r+0x60c>)
 800af86:	1112      	asrs	r2, r2, #4
 800af88:	2400      	movs	r4, #0
 800af8a:	2102      	movs	r1, #2
 800af8c:	b92a      	cbnz	r2, 800af9a <_dtoa_r+0x472>
 800af8e:	2c00      	cmp	r4, #0
 800af90:	f43f af6a 	beq.w	800ae68 <_dtoa_r+0x340>
 800af94:	ed8d 7b02 	vstr	d7, [sp, #8]
 800af98:	e766      	b.n	800ae68 <_dtoa_r+0x340>
 800af9a:	07d7      	lsls	r7, r2, #31
 800af9c:	d505      	bpl.n	800afaa <_dtoa_r+0x482>
 800af9e:	ed90 6b00 	vldr	d6, [r0]
 800afa2:	3101      	adds	r1, #1
 800afa4:	2401      	movs	r4, #1
 800afa6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800afaa:	1052      	asrs	r2, r2, #1
 800afac:	3008      	adds	r0, #8
 800afae:	e7ed      	b.n	800af8c <_dtoa_r+0x464>
 800afb0:	2102      	movs	r1, #2
 800afb2:	e759      	b.n	800ae68 <_dtoa_r+0x340>
 800afb4:	465a      	mov	r2, fp
 800afb6:	464c      	mov	r4, r9
 800afb8:	e775      	b.n	800aea6 <_dtoa_r+0x37e>
 800afba:	ec41 0b17 	vmov	d7, r0, r1
 800afbe:	495c      	ldr	r1, [pc, #368]	; (800b130 <_dtoa_r+0x608>)
 800afc0:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800afc4:	ed11 4b02 	vldr	d4, [r1, #-8]
 800afc8:	9901      	ldr	r1, [sp, #4]
 800afca:	440c      	add	r4, r1
 800afcc:	9907      	ldr	r1, [sp, #28]
 800afce:	b351      	cbz	r1, 800b026 <_dtoa_r+0x4fe>
 800afd0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800afd4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800afd8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800afdc:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800afe0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800afe4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800afe8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800afec:	ee14 1a90 	vmov	r1, s9
 800aff0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800aff4:	3130      	adds	r1, #48	; 0x30
 800aff6:	ee36 6b45 	vsub.f64	d6, d6, d5
 800affa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800affe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b002:	f808 1b01 	strb.w	r1, [r8], #1
 800b006:	d439      	bmi.n	800b07c <_dtoa_r+0x554>
 800b008:	ee32 5b46 	vsub.f64	d5, d2, d6
 800b00c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800b010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b014:	d472      	bmi.n	800b0fc <_dtoa_r+0x5d4>
 800b016:	45a0      	cmp	r8, r4
 800b018:	f43f af6b 	beq.w	800aef2 <_dtoa_r+0x3ca>
 800b01c:	ee27 7b03 	vmul.f64	d7, d7, d3
 800b020:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b024:	e7e0      	b.n	800afe8 <_dtoa_r+0x4c0>
 800b026:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b02a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b02e:	4620      	mov	r0, r4
 800b030:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800b034:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b038:	ee14 1a90 	vmov	r1, s9
 800b03c:	3130      	adds	r1, #48	; 0x30
 800b03e:	f808 1b01 	strb.w	r1, [r8], #1
 800b042:	45a0      	cmp	r8, r4
 800b044:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b048:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b04c:	d118      	bne.n	800b080 <_dtoa_r+0x558>
 800b04e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b052:	ee37 4b05 	vadd.f64	d4, d7, d5
 800b056:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800b05a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b05e:	dc4d      	bgt.n	800b0fc <_dtoa_r+0x5d4>
 800b060:	ee35 5b47 	vsub.f64	d5, d5, d7
 800b064:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800b068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b06c:	f57f af41 	bpl.w	800aef2 <_dtoa_r+0x3ca>
 800b070:	4680      	mov	r8, r0
 800b072:	3801      	subs	r0, #1
 800b074:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800b078:	2b30      	cmp	r3, #48	; 0x30
 800b07a:	d0f9      	beq.n	800b070 <_dtoa_r+0x548>
 800b07c:	4693      	mov	fp, r2
 800b07e:	e02a      	b.n	800b0d6 <_dtoa_r+0x5ae>
 800b080:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b084:	e7d6      	b.n	800b034 <_dtoa_r+0x50c>
 800b086:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b08a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800b08e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b092:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800b096:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800b09a:	ee15 3a10 	vmov	r3, s10
 800b09e:	3330      	adds	r3, #48	; 0x30
 800b0a0:	f808 3b01 	strb.w	r3, [r8], #1
 800b0a4:	9b01      	ldr	r3, [sp, #4]
 800b0a6:	eba8 0303 	sub.w	r3, r8, r3
 800b0aa:	4599      	cmp	r9, r3
 800b0ac:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800b0b0:	eea3 7b46 	vfms.f64	d7, d3, d6
 800b0b4:	d133      	bne.n	800b11e <_dtoa_r+0x5f6>
 800b0b6:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b0ba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b0be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0c2:	dc1a      	bgt.n	800b0fa <_dtoa_r+0x5d2>
 800b0c4:	eeb4 7b46 	vcmp.f64	d7, d6
 800b0c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0cc:	d103      	bne.n	800b0d6 <_dtoa_r+0x5ae>
 800b0ce:	ee15 3a10 	vmov	r3, s10
 800b0d2:	07d9      	lsls	r1, r3, #31
 800b0d4:	d411      	bmi.n	800b0fa <_dtoa_r+0x5d2>
 800b0d6:	4629      	mov	r1, r5
 800b0d8:	4630      	mov	r0, r6
 800b0da:	f000 fbd1 	bl	800b880 <_Bfree>
 800b0de:	2300      	movs	r3, #0
 800b0e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b0e2:	f888 3000 	strb.w	r3, [r8]
 800b0e6:	f10b 0301 	add.w	r3, fp, #1
 800b0ea:	6013      	str	r3, [r2, #0]
 800b0ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	f43f ad69 	beq.w	800abc6 <_dtoa_r+0x9e>
 800b0f4:	f8c3 8000 	str.w	r8, [r3]
 800b0f8:	e565      	b.n	800abc6 <_dtoa_r+0x9e>
 800b0fa:	465a      	mov	r2, fp
 800b0fc:	4643      	mov	r3, r8
 800b0fe:	4698      	mov	r8, r3
 800b100:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800b104:	2939      	cmp	r1, #57	; 0x39
 800b106:	d106      	bne.n	800b116 <_dtoa_r+0x5ee>
 800b108:	9901      	ldr	r1, [sp, #4]
 800b10a:	4299      	cmp	r1, r3
 800b10c:	d1f7      	bne.n	800b0fe <_dtoa_r+0x5d6>
 800b10e:	9801      	ldr	r0, [sp, #4]
 800b110:	2130      	movs	r1, #48	; 0x30
 800b112:	3201      	adds	r2, #1
 800b114:	7001      	strb	r1, [r0, #0]
 800b116:	7819      	ldrb	r1, [r3, #0]
 800b118:	3101      	adds	r1, #1
 800b11a:	7019      	strb	r1, [r3, #0]
 800b11c:	e7ae      	b.n	800b07c <_dtoa_r+0x554>
 800b11e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b122:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b12a:	d1b2      	bne.n	800b092 <_dtoa_r+0x56a>
 800b12c:	e7d3      	b.n	800b0d6 <_dtoa_r+0x5ae>
 800b12e:	bf00      	nop
 800b130:	0800cc00 	.word	0x0800cc00
 800b134:	0800cbd8 	.word	0x0800cbd8
 800b138:	9907      	ldr	r1, [sp, #28]
 800b13a:	2900      	cmp	r1, #0
 800b13c:	f000 80d0 	beq.w	800b2e0 <_dtoa_r+0x7b8>
 800b140:	9906      	ldr	r1, [sp, #24]
 800b142:	2901      	cmp	r1, #1
 800b144:	f300 80b4 	bgt.w	800b2b0 <_dtoa_r+0x788>
 800b148:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b14a:	2900      	cmp	r1, #0
 800b14c:	f000 80ac 	beq.w	800b2a8 <_dtoa_r+0x780>
 800b150:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b154:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b158:	461c      	mov	r4, r3
 800b15a:	9309      	str	r3, [sp, #36]	; 0x24
 800b15c:	9b04      	ldr	r3, [sp, #16]
 800b15e:	4413      	add	r3, r2
 800b160:	9304      	str	r3, [sp, #16]
 800b162:	9b05      	ldr	r3, [sp, #20]
 800b164:	2101      	movs	r1, #1
 800b166:	4413      	add	r3, r2
 800b168:	4630      	mov	r0, r6
 800b16a:	9305      	str	r3, [sp, #20]
 800b16c:	f000 fc3e 	bl	800b9ec <__i2b>
 800b170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b172:	4607      	mov	r7, r0
 800b174:	f1b8 0f00 	cmp.w	r8, #0
 800b178:	d00d      	beq.n	800b196 <_dtoa_r+0x66e>
 800b17a:	9a05      	ldr	r2, [sp, #20]
 800b17c:	2a00      	cmp	r2, #0
 800b17e:	dd0a      	ble.n	800b196 <_dtoa_r+0x66e>
 800b180:	4542      	cmp	r2, r8
 800b182:	9904      	ldr	r1, [sp, #16]
 800b184:	bfa8      	it	ge
 800b186:	4642      	movge	r2, r8
 800b188:	1a89      	subs	r1, r1, r2
 800b18a:	9104      	str	r1, [sp, #16]
 800b18c:	9905      	ldr	r1, [sp, #20]
 800b18e:	eba8 0802 	sub.w	r8, r8, r2
 800b192:	1a8a      	subs	r2, r1, r2
 800b194:	9205      	str	r2, [sp, #20]
 800b196:	b303      	cbz	r3, 800b1da <_dtoa_r+0x6b2>
 800b198:	9a07      	ldr	r2, [sp, #28]
 800b19a:	2a00      	cmp	r2, #0
 800b19c:	f000 80a5 	beq.w	800b2ea <_dtoa_r+0x7c2>
 800b1a0:	2c00      	cmp	r4, #0
 800b1a2:	dd13      	ble.n	800b1cc <_dtoa_r+0x6a4>
 800b1a4:	4639      	mov	r1, r7
 800b1a6:	4622      	mov	r2, r4
 800b1a8:	4630      	mov	r0, r6
 800b1aa:	930d      	str	r3, [sp, #52]	; 0x34
 800b1ac:	f000 fcde 	bl	800bb6c <__pow5mult>
 800b1b0:	462a      	mov	r2, r5
 800b1b2:	4601      	mov	r1, r0
 800b1b4:	4607      	mov	r7, r0
 800b1b6:	4630      	mov	r0, r6
 800b1b8:	f000 fc2e 	bl	800ba18 <__multiply>
 800b1bc:	4629      	mov	r1, r5
 800b1be:	9009      	str	r0, [sp, #36]	; 0x24
 800b1c0:	4630      	mov	r0, r6
 800b1c2:	f000 fb5d 	bl	800b880 <_Bfree>
 800b1c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1ca:	4615      	mov	r5, r2
 800b1cc:	1b1a      	subs	r2, r3, r4
 800b1ce:	d004      	beq.n	800b1da <_dtoa_r+0x6b2>
 800b1d0:	4629      	mov	r1, r5
 800b1d2:	4630      	mov	r0, r6
 800b1d4:	f000 fcca 	bl	800bb6c <__pow5mult>
 800b1d8:	4605      	mov	r5, r0
 800b1da:	2101      	movs	r1, #1
 800b1dc:	4630      	mov	r0, r6
 800b1de:	f000 fc05 	bl	800b9ec <__i2b>
 800b1e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	4604      	mov	r4, r0
 800b1e8:	f340 8081 	ble.w	800b2ee <_dtoa_r+0x7c6>
 800b1ec:	461a      	mov	r2, r3
 800b1ee:	4601      	mov	r1, r0
 800b1f0:	4630      	mov	r0, r6
 800b1f2:	f000 fcbb 	bl	800bb6c <__pow5mult>
 800b1f6:	9b06      	ldr	r3, [sp, #24]
 800b1f8:	2b01      	cmp	r3, #1
 800b1fa:	4604      	mov	r4, r0
 800b1fc:	dd7a      	ble.n	800b2f4 <_dtoa_r+0x7cc>
 800b1fe:	2300      	movs	r3, #0
 800b200:	9309      	str	r3, [sp, #36]	; 0x24
 800b202:	6922      	ldr	r2, [r4, #16]
 800b204:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b208:	6910      	ldr	r0, [r2, #16]
 800b20a:	f000 fba1 	bl	800b950 <__hi0bits>
 800b20e:	f1c0 0020 	rsb	r0, r0, #32
 800b212:	9b05      	ldr	r3, [sp, #20]
 800b214:	4418      	add	r0, r3
 800b216:	f010 001f 	ands.w	r0, r0, #31
 800b21a:	f000 8093 	beq.w	800b344 <_dtoa_r+0x81c>
 800b21e:	f1c0 0220 	rsb	r2, r0, #32
 800b222:	2a04      	cmp	r2, #4
 800b224:	f340 8085 	ble.w	800b332 <_dtoa_r+0x80a>
 800b228:	9b04      	ldr	r3, [sp, #16]
 800b22a:	f1c0 001c 	rsb	r0, r0, #28
 800b22e:	4403      	add	r3, r0
 800b230:	9304      	str	r3, [sp, #16]
 800b232:	9b05      	ldr	r3, [sp, #20]
 800b234:	4480      	add	r8, r0
 800b236:	4403      	add	r3, r0
 800b238:	9305      	str	r3, [sp, #20]
 800b23a:	9b04      	ldr	r3, [sp, #16]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	dd05      	ble.n	800b24c <_dtoa_r+0x724>
 800b240:	4629      	mov	r1, r5
 800b242:	461a      	mov	r2, r3
 800b244:	4630      	mov	r0, r6
 800b246:	f000 fceb 	bl	800bc20 <__lshift>
 800b24a:	4605      	mov	r5, r0
 800b24c:	9b05      	ldr	r3, [sp, #20]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	dd05      	ble.n	800b25e <_dtoa_r+0x736>
 800b252:	4621      	mov	r1, r4
 800b254:	461a      	mov	r2, r3
 800b256:	4630      	mov	r0, r6
 800b258:	f000 fce2 	bl	800bc20 <__lshift>
 800b25c:	4604      	mov	r4, r0
 800b25e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b260:	2b00      	cmp	r3, #0
 800b262:	d071      	beq.n	800b348 <_dtoa_r+0x820>
 800b264:	4621      	mov	r1, r4
 800b266:	4628      	mov	r0, r5
 800b268:	f000 fd46 	bl	800bcf8 <__mcmp>
 800b26c:	2800      	cmp	r0, #0
 800b26e:	da6b      	bge.n	800b348 <_dtoa_r+0x820>
 800b270:	2300      	movs	r3, #0
 800b272:	4629      	mov	r1, r5
 800b274:	220a      	movs	r2, #10
 800b276:	4630      	mov	r0, r6
 800b278:	f000 fb24 	bl	800b8c4 <__multadd>
 800b27c:	9b07      	ldr	r3, [sp, #28]
 800b27e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b282:	4605      	mov	r5, r0
 800b284:	2b00      	cmp	r3, #0
 800b286:	f000 8197 	beq.w	800b5b8 <_dtoa_r+0xa90>
 800b28a:	4639      	mov	r1, r7
 800b28c:	2300      	movs	r3, #0
 800b28e:	220a      	movs	r2, #10
 800b290:	4630      	mov	r0, r6
 800b292:	f000 fb17 	bl	800b8c4 <__multadd>
 800b296:	f1ba 0f00 	cmp.w	sl, #0
 800b29a:	4607      	mov	r7, r0
 800b29c:	f300 8093 	bgt.w	800b3c6 <_dtoa_r+0x89e>
 800b2a0:	9b06      	ldr	r3, [sp, #24]
 800b2a2:	2b02      	cmp	r3, #2
 800b2a4:	dc57      	bgt.n	800b356 <_dtoa_r+0x82e>
 800b2a6:	e08e      	b.n	800b3c6 <_dtoa_r+0x89e>
 800b2a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b2aa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b2ae:	e751      	b.n	800b154 <_dtoa_r+0x62c>
 800b2b0:	f109 34ff 	add.w	r4, r9, #4294967295
 800b2b4:	42a3      	cmp	r3, r4
 800b2b6:	bfbf      	itttt	lt
 800b2b8:	1ae2      	sublt	r2, r4, r3
 800b2ba:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b2bc:	189b      	addlt	r3, r3, r2
 800b2be:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b2c0:	bfae      	itee	ge
 800b2c2:	1b1c      	subge	r4, r3, r4
 800b2c4:	4623      	movlt	r3, r4
 800b2c6:	2400      	movlt	r4, #0
 800b2c8:	f1b9 0f00 	cmp.w	r9, #0
 800b2cc:	bfb5      	itete	lt
 800b2ce:	9a04      	ldrlt	r2, [sp, #16]
 800b2d0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800b2d4:	eba2 0809 	sublt.w	r8, r2, r9
 800b2d8:	464a      	movge	r2, r9
 800b2da:	bfb8      	it	lt
 800b2dc:	2200      	movlt	r2, #0
 800b2de:	e73c      	b.n	800b15a <_dtoa_r+0x632>
 800b2e0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b2e4:	9f07      	ldr	r7, [sp, #28]
 800b2e6:	461c      	mov	r4, r3
 800b2e8:	e744      	b.n	800b174 <_dtoa_r+0x64c>
 800b2ea:	461a      	mov	r2, r3
 800b2ec:	e770      	b.n	800b1d0 <_dtoa_r+0x6a8>
 800b2ee:	9b06      	ldr	r3, [sp, #24]
 800b2f0:	2b01      	cmp	r3, #1
 800b2f2:	dc18      	bgt.n	800b326 <_dtoa_r+0x7fe>
 800b2f4:	9b02      	ldr	r3, [sp, #8]
 800b2f6:	b9b3      	cbnz	r3, 800b326 <_dtoa_r+0x7fe>
 800b2f8:	9b03      	ldr	r3, [sp, #12]
 800b2fa:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800b2fe:	b9a2      	cbnz	r2, 800b32a <_dtoa_r+0x802>
 800b300:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b304:	0d12      	lsrs	r2, r2, #20
 800b306:	0512      	lsls	r2, r2, #20
 800b308:	b18a      	cbz	r2, 800b32e <_dtoa_r+0x806>
 800b30a:	9b04      	ldr	r3, [sp, #16]
 800b30c:	3301      	adds	r3, #1
 800b30e:	9304      	str	r3, [sp, #16]
 800b310:	9b05      	ldr	r3, [sp, #20]
 800b312:	3301      	adds	r3, #1
 800b314:	9305      	str	r3, [sp, #20]
 800b316:	2301      	movs	r3, #1
 800b318:	9309      	str	r3, [sp, #36]	; 0x24
 800b31a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	f47f af70 	bne.w	800b202 <_dtoa_r+0x6da>
 800b322:	2001      	movs	r0, #1
 800b324:	e775      	b.n	800b212 <_dtoa_r+0x6ea>
 800b326:	2300      	movs	r3, #0
 800b328:	e7f6      	b.n	800b318 <_dtoa_r+0x7f0>
 800b32a:	9b02      	ldr	r3, [sp, #8]
 800b32c:	e7f4      	b.n	800b318 <_dtoa_r+0x7f0>
 800b32e:	9209      	str	r2, [sp, #36]	; 0x24
 800b330:	e7f3      	b.n	800b31a <_dtoa_r+0x7f2>
 800b332:	d082      	beq.n	800b23a <_dtoa_r+0x712>
 800b334:	9b04      	ldr	r3, [sp, #16]
 800b336:	321c      	adds	r2, #28
 800b338:	4413      	add	r3, r2
 800b33a:	9304      	str	r3, [sp, #16]
 800b33c:	9b05      	ldr	r3, [sp, #20]
 800b33e:	4490      	add	r8, r2
 800b340:	4413      	add	r3, r2
 800b342:	e779      	b.n	800b238 <_dtoa_r+0x710>
 800b344:	4602      	mov	r2, r0
 800b346:	e7f5      	b.n	800b334 <_dtoa_r+0x80c>
 800b348:	f1b9 0f00 	cmp.w	r9, #0
 800b34c:	dc36      	bgt.n	800b3bc <_dtoa_r+0x894>
 800b34e:	9b06      	ldr	r3, [sp, #24]
 800b350:	2b02      	cmp	r3, #2
 800b352:	dd33      	ble.n	800b3bc <_dtoa_r+0x894>
 800b354:	46ca      	mov	sl, r9
 800b356:	f1ba 0f00 	cmp.w	sl, #0
 800b35a:	d10d      	bne.n	800b378 <_dtoa_r+0x850>
 800b35c:	4621      	mov	r1, r4
 800b35e:	4653      	mov	r3, sl
 800b360:	2205      	movs	r2, #5
 800b362:	4630      	mov	r0, r6
 800b364:	f000 faae 	bl	800b8c4 <__multadd>
 800b368:	4601      	mov	r1, r0
 800b36a:	4604      	mov	r4, r0
 800b36c:	4628      	mov	r0, r5
 800b36e:	f000 fcc3 	bl	800bcf8 <__mcmp>
 800b372:	2800      	cmp	r0, #0
 800b374:	f73f ade4 	bgt.w	800af40 <_dtoa_r+0x418>
 800b378:	9b08      	ldr	r3, [sp, #32]
 800b37a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b37e:	ea6f 0b03 	mvn.w	fp, r3
 800b382:	f04f 0900 	mov.w	r9, #0
 800b386:	4621      	mov	r1, r4
 800b388:	4630      	mov	r0, r6
 800b38a:	f000 fa79 	bl	800b880 <_Bfree>
 800b38e:	2f00      	cmp	r7, #0
 800b390:	f43f aea1 	beq.w	800b0d6 <_dtoa_r+0x5ae>
 800b394:	f1b9 0f00 	cmp.w	r9, #0
 800b398:	d005      	beq.n	800b3a6 <_dtoa_r+0x87e>
 800b39a:	45b9      	cmp	r9, r7
 800b39c:	d003      	beq.n	800b3a6 <_dtoa_r+0x87e>
 800b39e:	4649      	mov	r1, r9
 800b3a0:	4630      	mov	r0, r6
 800b3a2:	f000 fa6d 	bl	800b880 <_Bfree>
 800b3a6:	4639      	mov	r1, r7
 800b3a8:	4630      	mov	r0, r6
 800b3aa:	f000 fa69 	bl	800b880 <_Bfree>
 800b3ae:	e692      	b.n	800b0d6 <_dtoa_r+0x5ae>
 800b3b0:	2400      	movs	r4, #0
 800b3b2:	4627      	mov	r7, r4
 800b3b4:	e7e0      	b.n	800b378 <_dtoa_r+0x850>
 800b3b6:	4693      	mov	fp, r2
 800b3b8:	4627      	mov	r7, r4
 800b3ba:	e5c1      	b.n	800af40 <_dtoa_r+0x418>
 800b3bc:	9b07      	ldr	r3, [sp, #28]
 800b3be:	46ca      	mov	sl, r9
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	f000 8100 	beq.w	800b5c6 <_dtoa_r+0xa9e>
 800b3c6:	f1b8 0f00 	cmp.w	r8, #0
 800b3ca:	dd05      	ble.n	800b3d8 <_dtoa_r+0x8b0>
 800b3cc:	4639      	mov	r1, r7
 800b3ce:	4642      	mov	r2, r8
 800b3d0:	4630      	mov	r0, r6
 800b3d2:	f000 fc25 	bl	800bc20 <__lshift>
 800b3d6:	4607      	mov	r7, r0
 800b3d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d05d      	beq.n	800b49a <_dtoa_r+0x972>
 800b3de:	6879      	ldr	r1, [r7, #4]
 800b3e0:	4630      	mov	r0, r6
 800b3e2:	f000 fa0d 	bl	800b800 <_Balloc>
 800b3e6:	4680      	mov	r8, r0
 800b3e8:	b928      	cbnz	r0, 800b3f6 <_dtoa_r+0x8ce>
 800b3ea:	4b82      	ldr	r3, [pc, #520]	; (800b5f4 <_dtoa_r+0xacc>)
 800b3ec:	4602      	mov	r2, r0
 800b3ee:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b3f2:	f7ff bbb1 	b.w	800ab58 <_dtoa_r+0x30>
 800b3f6:	693a      	ldr	r2, [r7, #16]
 800b3f8:	3202      	adds	r2, #2
 800b3fa:	0092      	lsls	r2, r2, #2
 800b3fc:	f107 010c 	add.w	r1, r7, #12
 800b400:	300c      	adds	r0, #12
 800b402:	f7ff fafa 	bl	800a9fa <memcpy>
 800b406:	2201      	movs	r2, #1
 800b408:	4641      	mov	r1, r8
 800b40a:	4630      	mov	r0, r6
 800b40c:	f000 fc08 	bl	800bc20 <__lshift>
 800b410:	9b01      	ldr	r3, [sp, #4]
 800b412:	3301      	adds	r3, #1
 800b414:	9304      	str	r3, [sp, #16]
 800b416:	9b01      	ldr	r3, [sp, #4]
 800b418:	4453      	add	r3, sl
 800b41a:	9308      	str	r3, [sp, #32]
 800b41c:	9b02      	ldr	r3, [sp, #8]
 800b41e:	f003 0301 	and.w	r3, r3, #1
 800b422:	46b9      	mov	r9, r7
 800b424:	9307      	str	r3, [sp, #28]
 800b426:	4607      	mov	r7, r0
 800b428:	9b04      	ldr	r3, [sp, #16]
 800b42a:	4621      	mov	r1, r4
 800b42c:	3b01      	subs	r3, #1
 800b42e:	4628      	mov	r0, r5
 800b430:	9302      	str	r3, [sp, #8]
 800b432:	f7ff faf0 	bl	800aa16 <quorem>
 800b436:	4603      	mov	r3, r0
 800b438:	3330      	adds	r3, #48	; 0x30
 800b43a:	9005      	str	r0, [sp, #20]
 800b43c:	4649      	mov	r1, r9
 800b43e:	4628      	mov	r0, r5
 800b440:	9309      	str	r3, [sp, #36]	; 0x24
 800b442:	f000 fc59 	bl	800bcf8 <__mcmp>
 800b446:	463a      	mov	r2, r7
 800b448:	4682      	mov	sl, r0
 800b44a:	4621      	mov	r1, r4
 800b44c:	4630      	mov	r0, r6
 800b44e:	f000 fc6f 	bl	800bd30 <__mdiff>
 800b452:	68c2      	ldr	r2, [r0, #12]
 800b454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b456:	4680      	mov	r8, r0
 800b458:	bb0a      	cbnz	r2, 800b49e <_dtoa_r+0x976>
 800b45a:	4601      	mov	r1, r0
 800b45c:	4628      	mov	r0, r5
 800b45e:	f000 fc4b 	bl	800bcf8 <__mcmp>
 800b462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b464:	4602      	mov	r2, r0
 800b466:	4641      	mov	r1, r8
 800b468:	4630      	mov	r0, r6
 800b46a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800b46e:	f000 fa07 	bl	800b880 <_Bfree>
 800b472:	9b06      	ldr	r3, [sp, #24]
 800b474:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b476:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b47a:	ea43 0102 	orr.w	r1, r3, r2
 800b47e:	9b07      	ldr	r3, [sp, #28]
 800b480:	4319      	orrs	r1, r3
 800b482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b484:	d10d      	bne.n	800b4a2 <_dtoa_r+0x97a>
 800b486:	2b39      	cmp	r3, #57	; 0x39
 800b488:	d029      	beq.n	800b4de <_dtoa_r+0x9b6>
 800b48a:	f1ba 0f00 	cmp.w	sl, #0
 800b48e:	dd01      	ble.n	800b494 <_dtoa_r+0x96c>
 800b490:	9b05      	ldr	r3, [sp, #20]
 800b492:	3331      	adds	r3, #49	; 0x31
 800b494:	9a02      	ldr	r2, [sp, #8]
 800b496:	7013      	strb	r3, [r2, #0]
 800b498:	e775      	b.n	800b386 <_dtoa_r+0x85e>
 800b49a:	4638      	mov	r0, r7
 800b49c:	e7b8      	b.n	800b410 <_dtoa_r+0x8e8>
 800b49e:	2201      	movs	r2, #1
 800b4a0:	e7e1      	b.n	800b466 <_dtoa_r+0x93e>
 800b4a2:	f1ba 0f00 	cmp.w	sl, #0
 800b4a6:	db06      	blt.n	800b4b6 <_dtoa_r+0x98e>
 800b4a8:	9906      	ldr	r1, [sp, #24]
 800b4aa:	ea41 0a0a 	orr.w	sl, r1, sl
 800b4ae:	9907      	ldr	r1, [sp, #28]
 800b4b0:	ea5a 0a01 	orrs.w	sl, sl, r1
 800b4b4:	d120      	bne.n	800b4f8 <_dtoa_r+0x9d0>
 800b4b6:	2a00      	cmp	r2, #0
 800b4b8:	ddec      	ble.n	800b494 <_dtoa_r+0x96c>
 800b4ba:	4629      	mov	r1, r5
 800b4bc:	2201      	movs	r2, #1
 800b4be:	4630      	mov	r0, r6
 800b4c0:	9304      	str	r3, [sp, #16]
 800b4c2:	f000 fbad 	bl	800bc20 <__lshift>
 800b4c6:	4621      	mov	r1, r4
 800b4c8:	4605      	mov	r5, r0
 800b4ca:	f000 fc15 	bl	800bcf8 <__mcmp>
 800b4ce:	2800      	cmp	r0, #0
 800b4d0:	9b04      	ldr	r3, [sp, #16]
 800b4d2:	dc02      	bgt.n	800b4da <_dtoa_r+0x9b2>
 800b4d4:	d1de      	bne.n	800b494 <_dtoa_r+0x96c>
 800b4d6:	07da      	lsls	r2, r3, #31
 800b4d8:	d5dc      	bpl.n	800b494 <_dtoa_r+0x96c>
 800b4da:	2b39      	cmp	r3, #57	; 0x39
 800b4dc:	d1d8      	bne.n	800b490 <_dtoa_r+0x968>
 800b4de:	9a02      	ldr	r2, [sp, #8]
 800b4e0:	2339      	movs	r3, #57	; 0x39
 800b4e2:	7013      	strb	r3, [r2, #0]
 800b4e4:	4643      	mov	r3, r8
 800b4e6:	4698      	mov	r8, r3
 800b4e8:	3b01      	subs	r3, #1
 800b4ea:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800b4ee:	2a39      	cmp	r2, #57	; 0x39
 800b4f0:	d051      	beq.n	800b596 <_dtoa_r+0xa6e>
 800b4f2:	3201      	adds	r2, #1
 800b4f4:	701a      	strb	r2, [r3, #0]
 800b4f6:	e746      	b.n	800b386 <_dtoa_r+0x85e>
 800b4f8:	2a00      	cmp	r2, #0
 800b4fa:	dd03      	ble.n	800b504 <_dtoa_r+0x9dc>
 800b4fc:	2b39      	cmp	r3, #57	; 0x39
 800b4fe:	d0ee      	beq.n	800b4de <_dtoa_r+0x9b6>
 800b500:	3301      	adds	r3, #1
 800b502:	e7c7      	b.n	800b494 <_dtoa_r+0x96c>
 800b504:	9a04      	ldr	r2, [sp, #16]
 800b506:	9908      	ldr	r1, [sp, #32]
 800b508:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b50c:	428a      	cmp	r2, r1
 800b50e:	d02b      	beq.n	800b568 <_dtoa_r+0xa40>
 800b510:	4629      	mov	r1, r5
 800b512:	2300      	movs	r3, #0
 800b514:	220a      	movs	r2, #10
 800b516:	4630      	mov	r0, r6
 800b518:	f000 f9d4 	bl	800b8c4 <__multadd>
 800b51c:	45b9      	cmp	r9, r7
 800b51e:	4605      	mov	r5, r0
 800b520:	f04f 0300 	mov.w	r3, #0
 800b524:	f04f 020a 	mov.w	r2, #10
 800b528:	4649      	mov	r1, r9
 800b52a:	4630      	mov	r0, r6
 800b52c:	d107      	bne.n	800b53e <_dtoa_r+0xa16>
 800b52e:	f000 f9c9 	bl	800b8c4 <__multadd>
 800b532:	4681      	mov	r9, r0
 800b534:	4607      	mov	r7, r0
 800b536:	9b04      	ldr	r3, [sp, #16]
 800b538:	3301      	adds	r3, #1
 800b53a:	9304      	str	r3, [sp, #16]
 800b53c:	e774      	b.n	800b428 <_dtoa_r+0x900>
 800b53e:	f000 f9c1 	bl	800b8c4 <__multadd>
 800b542:	4639      	mov	r1, r7
 800b544:	4681      	mov	r9, r0
 800b546:	2300      	movs	r3, #0
 800b548:	220a      	movs	r2, #10
 800b54a:	4630      	mov	r0, r6
 800b54c:	f000 f9ba 	bl	800b8c4 <__multadd>
 800b550:	4607      	mov	r7, r0
 800b552:	e7f0      	b.n	800b536 <_dtoa_r+0xa0e>
 800b554:	f1ba 0f00 	cmp.w	sl, #0
 800b558:	9a01      	ldr	r2, [sp, #4]
 800b55a:	bfcc      	ite	gt
 800b55c:	46d0      	movgt	r8, sl
 800b55e:	f04f 0801 	movle.w	r8, #1
 800b562:	4490      	add	r8, r2
 800b564:	f04f 0900 	mov.w	r9, #0
 800b568:	4629      	mov	r1, r5
 800b56a:	2201      	movs	r2, #1
 800b56c:	4630      	mov	r0, r6
 800b56e:	9302      	str	r3, [sp, #8]
 800b570:	f000 fb56 	bl	800bc20 <__lshift>
 800b574:	4621      	mov	r1, r4
 800b576:	4605      	mov	r5, r0
 800b578:	f000 fbbe 	bl	800bcf8 <__mcmp>
 800b57c:	2800      	cmp	r0, #0
 800b57e:	dcb1      	bgt.n	800b4e4 <_dtoa_r+0x9bc>
 800b580:	d102      	bne.n	800b588 <_dtoa_r+0xa60>
 800b582:	9b02      	ldr	r3, [sp, #8]
 800b584:	07db      	lsls	r3, r3, #31
 800b586:	d4ad      	bmi.n	800b4e4 <_dtoa_r+0x9bc>
 800b588:	4643      	mov	r3, r8
 800b58a:	4698      	mov	r8, r3
 800b58c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b590:	2a30      	cmp	r2, #48	; 0x30
 800b592:	d0fa      	beq.n	800b58a <_dtoa_r+0xa62>
 800b594:	e6f7      	b.n	800b386 <_dtoa_r+0x85e>
 800b596:	9a01      	ldr	r2, [sp, #4]
 800b598:	429a      	cmp	r2, r3
 800b59a:	d1a4      	bne.n	800b4e6 <_dtoa_r+0x9be>
 800b59c:	f10b 0b01 	add.w	fp, fp, #1
 800b5a0:	2331      	movs	r3, #49	; 0x31
 800b5a2:	e778      	b.n	800b496 <_dtoa_r+0x96e>
 800b5a4:	4b14      	ldr	r3, [pc, #80]	; (800b5f8 <_dtoa_r+0xad0>)
 800b5a6:	f7ff bb2a 	b.w	800abfe <_dtoa_r+0xd6>
 800b5aa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	f47f ab05 	bne.w	800abbc <_dtoa_r+0x94>
 800b5b2:	4b12      	ldr	r3, [pc, #72]	; (800b5fc <_dtoa_r+0xad4>)
 800b5b4:	f7ff bb23 	b.w	800abfe <_dtoa_r+0xd6>
 800b5b8:	f1ba 0f00 	cmp.w	sl, #0
 800b5bc:	dc03      	bgt.n	800b5c6 <_dtoa_r+0xa9e>
 800b5be:	9b06      	ldr	r3, [sp, #24]
 800b5c0:	2b02      	cmp	r3, #2
 800b5c2:	f73f aec8 	bgt.w	800b356 <_dtoa_r+0x82e>
 800b5c6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b5ca:	4621      	mov	r1, r4
 800b5cc:	4628      	mov	r0, r5
 800b5ce:	f7ff fa22 	bl	800aa16 <quorem>
 800b5d2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b5d6:	f808 3b01 	strb.w	r3, [r8], #1
 800b5da:	9a01      	ldr	r2, [sp, #4]
 800b5dc:	eba8 0202 	sub.w	r2, r8, r2
 800b5e0:	4592      	cmp	sl, r2
 800b5e2:	ddb7      	ble.n	800b554 <_dtoa_r+0xa2c>
 800b5e4:	4629      	mov	r1, r5
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	220a      	movs	r2, #10
 800b5ea:	4630      	mov	r0, r6
 800b5ec:	f000 f96a 	bl	800b8c4 <__multadd>
 800b5f0:	4605      	mov	r5, r0
 800b5f2:	e7ea      	b.n	800b5ca <_dtoa_r+0xaa2>
 800b5f4:	0800cb68 	.word	0x0800cb68
 800b5f8:	0800cac8 	.word	0x0800cac8
 800b5fc:	0800caec 	.word	0x0800caec

0800b600 <_free_r>:
 800b600:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b602:	2900      	cmp	r1, #0
 800b604:	d044      	beq.n	800b690 <_free_r+0x90>
 800b606:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b60a:	9001      	str	r0, [sp, #4]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	f1a1 0404 	sub.w	r4, r1, #4
 800b612:	bfb8      	it	lt
 800b614:	18e4      	addlt	r4, r4, r3
 800b616:	f000 f8e7 	bl	800b7e8 <__malloc_lock>
 800b61a:	4a1e      	ldr	r2, [pc, #120]	; (800b694 <_free_r+0x94>)
 800b61c:	9801      	ldr	r0, [sp, #4]
 800b61e:	6813      	ldr	r3, [r2, #0]
 800b620:	b933      	cbnz	r3, 800b630 <_free_r+0x30>
 800b622:	6063      	str	r3, [r4, #4]
 800b624:	6014      	str	r4, [r2, #0]
 800b626:	b003      	add	sp, #12
 800b628:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b62c:	f000 b8e2 	b.w	800b7f4 <__malloc_unlock>
 800b630:	42a3      	cmp	r3, r4
 800b632:	d908      	bls.n	800b646 <_free_r+0x46>
 800b634:	6825      	ldr	r5, [r4, #0]
 800b636:	1961      	adds	r1, r4, r5
 800b638:	428b      	cmp	r3, r1
 800b63a:	bf01      	itttt	eq
 800b63c:	6819      	ldreq	r1, [r3, #0]
 800b63e:	685b      	ldreq	r3, [r3, #4]
 800b640:	1949      	addeq	r1, r1, r5
 800b642:	6021      	streq	r1, [r4, #0]
 800b644:	e7ed      	b.n	800b622 <_free_r+0x22>
 800b646:	461a      	mov	r2, r3
 800b648:	685b      	ldr	r3, [r3, #4]
 800b64a:	b10b      	cbz	r3, 800b650 <_free_r+0x50>
 800b64c:	42a3      	cmp	r3, r4
 800b64e:	d9fa      	bls.n	800b646 <_free_r+0x46>
 800b650:	6811      	ldr	r1, [r2, #0]
 800b652:	1855      	adds	r5, r2, r1
 800b654:	42a5      	cmp	r5, r4
 800b656:	d10b      	bne.n	800b670 <_free_r+0x70>
 800b658:	6824      	ldr	r4, [r4, #0]
 800b65a:	4421      	add	r1, r4
 800b65c:	1854      	adds	r4, r2, r1
 800b65e:	42a3      	cmp	r3, r4
 800b660:	6011      	str	r1, [r2, #0]
 800b662:	d1e0      	bne.n	800b626 <_free_r+0x26>
 800b664:	681c      	ldr	r4, [r3, #0]
 800b666:	685b      	ldr	r3, [r3, #4]
 800b668:	6053      	str	r3, [r2, #4]
 800b66a:	440c      	add	r4, r1
 800b66c:	6014      	str	r4, [r2, #0]
 800b66e:	e7da      	b.n	800b626 <_free_r+0x26>
 800b670:	d902      	bls.n	800b678 <_free_r+0x78>
 800b672:	230c      	movs	r3, #12
 800b674:	6003      	str	r3, [r0, #0]
 800b676:	e7d6      	b.n	800b626 <_free_r+0x26>
 800b678:	6825      	ldr	r5, [r4, #0]
 800b67a:	1961      	adds	r1, r4, r5
 800b67c:	428b      	cmp	r3, r1
 800b67e:	bf04      	itt	eq
 800b680:	6819      	ldreq	r1, [r3, #0]
 800b682:	685b      	ldreq	r3, [r3, #4]
 800b684:	6063      	str	r3, [r4, #4]
 800b686:	bf04      	itt	eq
 800b688:	1949      	addeq	r1, r1, r5
 800b68a:	6021      	streq	r1, [r4, #0]
 800b68c:	6054      	str	r4, [r2, #4]
 800b68e:	e7ca      	b.n	800b626 <_free_r+0x26>
 800b690:	b003      	add	sp, #12
 800b692:	bd30      	pop	{r4, r5, pc}
 800b694:	240054d0 	.word	0x240054d0

0800b698 <malloc>:
 800b698:	4b02      	ldr	r3, [pc, #8]	; (800b6a4 <malloc+0xc>)
 800b69a:	4601      	mov	r1, r0
 800b69c:	6818      	ldr	r0, [r3, #0]
 800b69e:	f000 b823 	b.w	800b6e8 <_malloc_r>
 800b6a2:	bf00      	nop
 800b6a4:	2400006c 	.word	0x2400006c

0800b6a8 <sbrk_aligned>:
 800b6a8:	b570      	push	{r4, r5, r6, lr}
 800b6aa:	4e0e      	ldr	r6, [pc, #56]	; (800b6e4 <sbrk_aligned+0x3c>)
 800b6ac:	460c      	mov	r4, r1
 800b6ae:	6831      	ldr	r1, [r6, #0]
 800b6b0:	4605      	mov	r5, r0
 800b6b2:	b911      	cbnz	r1, 800b6ba <sbrk_aligned+0x12>
 800b6b4:	f000 fe40 	bl	800c338 <_sbrk_r>
 800b6b8:	6030      	str	r0, [r6, #0]
 800b6ba:	4621      	mov	r1, r4
 800b6bc:	4628      	mov	r0, r5
 800b6be:	f000 fe3b 	bl	800c338 <_sbrk_r>
 800b6c2:	1c43      	adds	r3, r0, #1
 800b6c4:	d00a      	beq.n	800b6dc <sbrk_aligned+0x34>
 800b6c6:	1cc4      	adds	r4, r0, #3
 800b6c8:	f024 0403 	bic.w	r4, r4, #3
 800b6cc:	42a0      	cmp	r0, r4
 800b6ce:	d007      	beq.n	800b6e0 <sbrk_aligned+0x38>
 800b6d0:	1a21      	subs	r1, r4, r0
 800b6d2:	4628      	mov	r0, r5
 800b6d4:	f000 fe30 	bl	800c338 <_sbrk_r>
 800b6d8:	3001      	adds	r0, #1
 800b6da:	d101      	bne.n	800b6e0 <sbrk_aligned+0x38>
 800b6dc:	f04f 34ff 	mov.w	r4, #4294967295
 800b6e0:	4620      	mov	r0, r4
 800b6e2:	bd70      	pop	{r4, r5, r6, pc}
 800b6e4:	240054d4 	.word	0x240054d4

0800b6e8 <_malloc_r>:
 800b6e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6ec:	1ccd      	adds	r5, r1, #3
 800b6ee:	f025 0503 	bic.w	r5, r5, #3
 800b6f2:	3508      	adds	r5, #8
 800b6f4:	2d0c      	cmp	r5, #12
 800b6f6:	bf38      	it	cc
 800b6f8:	250c      	movcc	r5, #12
 800b6fa:	2d00      	cmp	r5, #0
 800b6fc:	4607      	mov	r7, r0
 800b6fe:	db01      	blt.n	800b704 <_malloc_r+0x1c>
 800b700:	42a9      	cmp	r1, r5
 800b702:	d905      	bls.n	800b710 <_malloc_r+0x28>
 800b704:	230c      	movs	r3, #12
 800b706:	603b      	str	r3, [r7, #0]
 800b708:	2600      	movs	r6, #0
 800b70a:	4630      	mov	r0, r6
 800b70c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b710:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b7e4 <_malloc_r+0xfc>
 800b714:	f000 f868 	bl	800b7e8 <__malloc_lock>
 800b718:	f8d8 3000 	ldr.w	r3, [r8]
 800b71c:	461c      	mov	r4, r3
 800b71e:	bb5c      	cbnz	r4, 800b778 <_malloc_r+0x90>
 800b720:	4629      	mov	r1, r5
 800b722:	4638      	mov	r0, r7
 800b724:	f7ff ffc0 	bl	800b6a8 <sbrk_aligned>
 800b728:	1c43      	adds	r3, r0, #1
 800b72a:	4604      	mov	r4, r0
 800b72c:	d155      	bne.n	800b7da <_malloc_r+0xf2>
 800b72e:	f8d8 4000 	ldr.w	r4, [r8]
 800b732:	4626      	mov	r6, r4
 800b734:	2e00      	cmp	r6, #0
 800b736:	d145      	bne.n	800b7c4 <_malloc_r+0xdc>
 800b738:	2c00      	cmp	r4, #0
 800b73a:	d048      	beq.n	800b7ce <_malloc_r+0xe6>
 800b73c:	6823      	ldr	r3, [r4, #0]
 800b73e:	4631      	mov	r1, r6
 800b740:	4638      	mov	r0, r7
 800b742:	eb04 0903 	add.w	r9, r4, r3
 800b746:	f000 fdf7 	bl	800c338 <_sbrk_r>
 800b74a:	4581      	cmp	r9, r0
 800b74c:	d13f      	bne.n	800b7ce <_malloc_r+0xe6>
 800b74e:	6821      	ldr	r1, [r4, #0]
 800b750:	1a6d      	subs	r5, r5, r1
 800b752:	4629      	mov	r1, r5
 800b754:	4638      	mov	r0, r7
 800b756:	f7ff ffa7 	bl	800b6a8 <sbrk_aligned>
 800b75a:	3001      	adds	r0, #1
 800b75c:	d037      	beq.n	800b7ce <_malloc_r+0xe6>
 800b75e:	6823      	ldr	r3, [r4, #0]
 800b760:	442b      	add	r3, r5
 800b762:	6023      	str	r3, [r4, #0]
 800b764:	f8d8 3000 	ldr.w	r3, [r8]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d038      	beq.n	800b7de <_malloc_r+0xf6>
 800b76c:	685a      	ldr	r2, [r3, #4]
 800b76e:	42a2      	cmp	r2, r4
 800b770:	d12b      	bne.n	800b7ca <_malloc_r+0xe2>
 800b772:	2200      	movs	r2, #0
 800b774:	605a      	str	r2, [r3, #4]
 800b776:	e00f      	b.n	800b798 <_malloc_r+0xb0>
 800b778:	6822      	ldr	r2, [r4, #0]
 800b77a:	1b52      	subs	r2, r2, r5
 800b77c:	d41f      	bmi.n	800b7be <_malloc_r+0xd6>
 800b77e:	2a0b      	cmp	r2, #11
 800b780:	d917      	bls.n	800b7b2 <_malloc_r+0xca>
 800b782:	1961      	adds	r1, r4, r5
 800b784:	42a3      	cmp	r3, r4
 800b786:	6025      	str	r5, [r4, #0]
 800b788:	bf18      	it	ne
 800b78a:	6059      	strne	r1, [r3, #4]
 800b78c:	6863      	ldr	r3, [r4, #4]
 800b78e:	bf08      	it	eq
 800b790:	f8c8 1000 	streq.w	r1, [r8]
 800b794:	5162      	str	r2, [r4, r5]
 800b796:	604b      	str	r3, [r1, #4]
 800b798:	4638      	mov	r0, r7
 800b79a:	f104 060b 	add.w	r6, r4, #11
 800b79e:	f000 f829 	bl	800b7f4 <__malloc_unlock>
 800b7a2:	f026 0607 	bic.w	r6, r6, #7
 800b7a6:	1d23      	adds	r3, r4, #4
 800b7a8:	1af2      	subs	r2, r6, r3
 800b7aa:	d0ae      	beq.n	800b70a <_malloc_r+0x22>
 800b7ac:	1b9b      	subs	r3, r3, r6
 800b7ae:	50a3      	str	r3, [r4, r2]
 800b7b0:	e7ab      	b.n	800b70a <_malloc_r+0x22>
 800b7b2:	42a3      	cmp	r3, r4
 800b7b4:	6862      	ldr	r2, [r4, #4]
 800b7b6:	d1dd      	bne.n	800b774 <_malloc_r+0x8c>
 800b7b8:	f8c8 2000 	str.w	r2, [r8]
 800b7bc:	e7ec      	b.n	800b798 <_malloc_r+0xb0>
 800b7be:	4623      	mov	r3, r4
 800b7c0:	6864      	ldr	r4, [r4, #4]
 800b7c2:	e7ac      	b.n	800b71e <_malloc_r+0x36>
 800b7c4:	4634      	mov	r4, r6
 800b7c6:	6876      	ldr	r6, [r6, #4]
 800b7c8:	e7b4      	b.n	800b734 <_malloc_r+0x4c>
 800b7ca:	4613      	mov	r3, r2
 800b7cc:	e7cc      	b.n	800b768 <_malloc_r+0x80>
 800b7ce:	230c      	movs	r3, #12
 800b7d0:	603b      	str	r3, [r7, #0]
 800b7d2:	4638      	mov	r0, r7
 800b7d4:	f000 f80e 	bl	800b7f4 <__malloc_unlock>
 800b7d8:	e797      	b.n	800b70a <_malloc_r+0x22>
 800b7da:	6025      	str	r5, [r4, #0]
 800b7dc:	e7dc      	b.n	800b798 <_malloc_r+0xb0>
 800b7de:	605b      	str	r3, [r3, #4]
 800b7e0:	deff      	udf	#255	; 0xff
 800b7e2:	bf00      	nop
 800b7e4:	240054d0 	.word	0x240054d0

0800b7e8 <__malloc_lock>:
 800b7e8:	4801      	ldr	r0, [pc, #4]	; (800b7f0 <__malloc_lock+0x8>)
 800b7ea:	f7ff b904 	b.w	800a9f6 <__retarget_lock_acquire_recursive>
 800b7ee:	bf00      	nop
 800b7f0:	240054cc 	.word	0x240054cc

0800b7f4 <__malloc_unlock>:
 800b7f4:	4801      	ldr	r0, [pc, #4]	; (800b7fc <__malloc_unlock+0x8>)
 800b7f6:	f7ff b8ff 	b.w	800a9f8 <__retarget_lock_release_recursive>
 800b7fa:	bf00      	nop
 800b7fc:	240054cc 	.word	0x240054cc

0800b800 <_Balloc>:
 800b800:	b570      	push	{r4, r5, r6, lr}
 800b802:	69c6      	ldr	r6, [r0, #28]
 800b804:	4604      	mov	r4, r0
 800b806:	460d      	mov	r5, r1
 800b808:	b976      	cbnz	r6, 800b828 <_Balloc+0x28>
 800b80a:	2010      	movs	r0, #16
 800b80c:	f7ff ff44 	bl	800b698 <malloc>
 800b810:	4602      	mov	r2, r0
 800b812:	61e0      	str	r0, [r4, #28]
 800b814:	b920      	cbnz	r0, 800b820 <_Balloc+0x20>
 800b816:	4b18      	ldr	r3, [pc, #96]	; (800b878 <_Balloc+0x78>)
 800b818:	4818      	ldr	r0, [pc, #96]	; (800b87c <_Balloc+0x7c>)
 800b81a:	216b      	movs	r1, #107	; 0x6b
 800b81c:	f000 fd9c 	bl	800c358 <__assert_func>
 800b820:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b824:	6006      	str	r6, [r0, #0]
 800b826:	60c6      	str	r6, [r0, #12]
 800b828:	69e6      	ldr	r6, [r4, #28]
 800b82a:	68f3      	ldr	r3, [r6, #12]
 800b82c:	b183      	cbz	r3, 800b850 <_Balloc+0x50>
 800b82e:	69e3      	ldr	r3, [r4, #28]
 800b830:	68db      	ldr	r3, [r3, #12]
 800b832:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b836:	b9b8      	cbnz	r0, 800b868 <_Balloc+0x68>
 800b838:	2101      	movs	r1, #1
 800b83a:	fa01 f605 	lsl.w	r6, r1, r5
 800b83e:	1d72      	adds	r2, r6, #5
 800b840:	0092      	lsls	r2, r2, #2
 800b842:	4620      	mov	r0, r4
 800b844:	f000 fda6 	bl	800c394 <_calloc_r>
 800b848:	b160      	cbz	r0, 800b864 <_Balloc+0x64>
 800b84a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b84e:	e00e      	b.n	800b86e <_Balloc+0x6e>
 800b850:	2221      	movs	r2, #33	; 0x21
 800b852:	2104      	movs	r1, #4
 800b854:	4620      	mov	r0, r4
 800b856:	f000 fd9d 	bl	800c394 <_calloc_r>
 800b85a:	69e3      	ldr	r3, [r4, #28]
 800b85c:	60f0      	str	r0, [r6, #12]
 800b85e:	68db      	ldr	r3, [r3, #12]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d1e4      	bne.n	800b82e <_Balloc+0x2e>
 800b864:	2000      	movs	r0, #0
 800b866:	bd70      	pop	{r4, r5, r6, pc}
 800b868:	6802      	ldr	r2, [r0, #0]
 800b86a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b86e:	2300      	movs	r3, #0
 800b870:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b874:	e7f7      	b.n	800b866 <_Balloc+0x66>
 800b876:	bf00      	nop
 800b878:	0800caf9 	.word	0x0800caf9
 800b87c:	0800cb79 	.word	0x0800cb79

0800b880 <_Bfree>:
 800b880:	b570      	push	{r4, r5, r6, lr}
 800b882:	69c6      	ldr	r6, [r0, #28]
 800b884:	4605      	mov	r5, r0
 800b886:	460c      	mov	r4, r1
 800b888:	b976      	cbnz	r6, 800b8a8 <_Bfree+0x28>
 800b88a:	2010      	movs	r0, #16
 800b88c:	f7ff ff04 	bl	800b698 <malloc>
 800b890:	4602      	mov	r2, r0
 800b892:	61e8      	str	r0, [r5, #28]
 800b894:	b920      	cbnz	r0, 800b8a0 <_Bfree+0x20>
 800b896:	4b09      	ldr	r3, [pc, #36]	; (800b8bc <_Bfree+0x3c>)
 800b898:	4809      	ldr	r0, [pc, #36]	; (800b8c0 <_Bfree+0x40>)
 800b89a:	218f      	movs	r1, #143	; 0x8f
 800b89c:	f000 fd5c 	bl	800c358 <__assert_func>
 800b8a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b8a4:	6006      	str	r6, [r0, #0]
 800b8a6:	60c6      	str	r6, [r0, #12]
 800b8a8:	b13c      	cbz	r4, 800b8ba <_Bfree+0x3a>
 800b8aa:	69eb      	ldr	r3, [r5, #28]
 800b8ac:	6862      	ldr	r2, [r4, #4]
 800b8ae:	68db      	ldr	r3, [r3, #12]
 800b8b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b8b4:	6021      	str	r1, [r4, #0]
 800b8b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b8ba:	bd70      	pop	{r4, r5, r6, pc}
 800b8bc:	0800caf9 	.word	0x0800caf9
 800b8c0:	0800cb79 	.word	0x0800cb79

0800b8c4 <__multadd>:
 800b8c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8c8:	690d      	ldr	r5, [r1, #16]
 800b8ca:	4607      	mov	r7, r0
 800b8cc:	460c      	mov	r4, r1
 800b8ce:	461e      	mov	r6, r3
 800b8d0:	f101 0c14 	add.w	ip, r1, #20
 800b8d4:	2000      	movs	r0, #0
 800b8d6:	f8dc 3000 	ldr.w	r3, [ip]
 800b8da:	b299      	uxth	r1, r3
 800b8dc:	fb02 6101 	mla	r1, r2, r1, r6
 800b8e0:	0c1e      	lsrs	r6, r3, #16
 800b8e2:	0c0b      	lsrs	r3, r1, #16
 800b8e4:	fb02 3306 	mla	r3, r2, r6, r3
 800b8e8:	b289      	uxth	r1, r1
 800b8ea:	3001      	adds	r0, #1
 800b8ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b8f0:	4285      	cmp	r5, r0
 800b8f2:	f84c 1b04 	str.w	r1, [ip], #4
 800b8f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b8fa:	dcec      	bgt.n	800b8d6 <__multadd+0x12>
 800b8fc:	b30e      	cbz	r6, 800b942 <__multadd+0x7e>
 800b8fe:	68a3      	ldr	r3, [r4, #8]
 800b900:	42ab      	cmp	r3, r5
 800b902:	dc19      	bgt.n	800b938 <__multadd+0x74>
 800b904:	6861      	ldr	r1, [r4, #4]
 800b906:	4638      	mov	r0, r7
 800b908:	3101      	adds	r1, #1
 800b90a:	f7ff ff79 	bl	800b800 <_Balloc>
 800b90e:	4680      	mov	r8, r0
 800b910:	b928      	cbnz	r0, 800b91e <__multadd+0x5a>
 800b912:	4602      	mov	r2, r0
 800b914:	4b0c      	ldr	r3, [pc, #48]	; (800b948 <__multadd+0x84>)
 800b916:	480d      	ldr	r0, [pc, #52]	; (800b94c <__multadd+0x88>)
 800b918:	21ba      	movs	r1, #186	; 0xba
 800b91a:	f000 fd1d 	bl	800c358 <__assert_func>
 800b91e:	6922      	ldr	r2, [r4, #16]
 800b920:	3202      	adds	r2, #2
 800b922:	f104 010c 	add.w	r1, r4, #12
 800b926:	0092      	lsls	r2, r2, #2
 800b928:	300c      	adds	r0, #12
 800b92a:	f7ff f866 	bl	800a9fa <memcpy>
 800b92e:	4621      	mov	r1, r4
 800b930:	4638      	mov	r0, r7
 800b932:	f7ff ffa5 	bl	800b880 <_Bfree>
 800b936:	4644      	mov	r4, r8
 800b938:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b93c:	3501      	adds	r5, #1
 800b93e:	615e      	str	r6, [r3, #20]
 800b940:	6125      	str	r5, [r4, #16]
 800b942:	4620      	mov	r0, r4
 800b944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b948:	0800cb68 	.word	0x0800cb68
 800b94c:	0800cb79 	.word	0x0800cb79

0800b950 <__hi0bits>:
 800b950:	0c03      	lsrs	r3, r0, #16
 800b952:	041b      	lsls	r3, r3, #16
 800b954:	b9d3      	cbnz	r3, 800b98c <__hi0bits+0x3c>
 800b956:	0400      	lsls	r0, r0, #16
 800b958:	2310      	movs	r3, #16
 800b95a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b95e:	bf04      	itt	eq
 800b960:	0200      	lsleq	r0, r0, #8
 800b962:	3308      	addeq	r3, #8
 800b964:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b968:	bf04      	itt	eq
 800b96a:	0100      	lsleq	r0, r0, #4
 800b96c:	3304      	addeq	r3, #4
 800b96e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b972:	bf04      	itt	eq
 800b974:	0080      	lsleq	r0, r0, #2
 800b976:	3302      	addeq	r3, #2
 800b978:	2800      	cmp	r0, #0
 800b97a:	db05      	blt.n	800b988 <__hi0bits+0x38>
 800b97c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b980:	f103 0301 	add.w	r3, r3, #1
 800b984:	bf08      	it	eq
 800b986:	2320      	moveq	r3, #32
 800b988:	4618      	mov	r0, r3
 800b98a:	4770      	bx	lr
 800b98c:	2300      	movs	r3, #0
 800b98e:	e7e4      	b.n	800b95a <__hi0bits+0xa>

0800b990 <__lo0bits>:
 800b990:	6803      	ldr	r3, [r0, #0]
 800b992:	f013 0207 	ands.w	r2, r3, #7
 800b996:	d00c      	beq.n	800b9b2 <__lo0bits+0x22>
 800b998:	07d9      	lsls	r1, r3, #31
 800b99a:	d422      	bmi.n	800b9e2 <__lo0bits+0x52>
 800b99c:	079a      	lsls	r2, r3, #30
 800b99e:	bf49      	itett	mi
 800b9a0:	085b      	lsrmi	r3, r3, #1
 800b9a2:	089b      	lsrpl	r3, r3, #2
 800b9a4:	6003      	strmi	r3, [r0, #0]
 800b9a6:	2201      	movmi	r2, #1
 800b9a8:	bf5c      	itt	pl
 800b9aa:	6003      	strpl	r3, [r0, #0]
 800b9ac:	2202      	movpl	r2, #2
 800b9ae:	4610      	mov	r0, r2
 800b9b0:	4770      	bx	lr
 800b9b2:	b299      	uxth	r1, r3
 800b9b4:	b909      	cbnz	r1, 800b9ba <__lo0bits+0x2a>
 800b9b6:	0c1b      	lsrs	r3, r3, #16
 800b9b8:	2210      	movs	r2, #16
 800b9ba:	b2d9      	uxtb	r1, r3
 800b9bc:	b909      	cbnz	r1, 800b9c2 <__lo0bits+0x32>
 800b9be:	3208      	adds	r2, #8
 800b9c0:	0a1b      	lsrs	r3, r3, #8
 800b9c2:	0719      	lsls	r1, r3, #28
 800b9c4:	bf04      	itt	eq
 800b9c6:	091b      	lsreq	r3, r3, #4
 800b9c8:	3204      	addeq	r2, #4
 800b9ca:	0799      	lsls	r1, r3, #30
 800b9cc:	bf04      	itt	eq
 800b9ce:	089b      	lsreq	r3, r3, #2
 800b9d0:	3202      	addeq	r2, #2
 800b9d2:	07d9      	lsls	r1, r3, #31
 800b9d4:	d403      	bmi.n	800b9de <__lo0bits+0x4e>
 800b9d6:	085b      	lsrs	r3, r3, #1
 800b9d8:	f102 0201 	add.w	r2, r2, #1
 800b9dc:	d003      	beq.n	800b9e6 <__lo0bits+0x56>
 800b9de:	6003      	str	r3, [r0, #0]
 800b9e0:	e7e5      	b.n	800b9ae <__lo0bits+0x1e>
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	e7e3      	b.n	800b9ae <__lo0bits+0x1e>
 800b9e6:	2220      	movs	r2, #32
 800b9e8:	e7e1      	b.n	800b9ae <__lo0bits+0x1e>
	...

0800b9ec <__i2b>:
 800b9ec:	b510      	push	{r4, lr}
 800b9ee:	460c      	mov	r4, r1
 800b9f0:	2101      	movs	r1, #1
 800b9f2:	f7ff ff05 	bl	800b800 <_Balloc>
 800b9f6:	4602      	mov	r2, r0
 800b9f8:	b928      	cbnz	r0, 800ba06 <__i2b+0x1a>
 800b9fa:	4b05      	ldr	r3, [pc, #20]	; (800ba10 <__i2b+0x24>)
 800b9fc:	4805      	ldr	r0, [pc, #20]	; (800ba14 <__i2b+0x28>)
 800b9fe:	f240 1145 	movw	r1, #325	; 0x145
 800ba02:	f000 fca9 	bl	800c358 <__assert_func>
 800ba06:	2301      	movs	r3, #1
 800ba08:	6144      	str	r4, [r0, #20]
 800ba0a:	6103      	str	r3, [r0, #16]
 800ba0c:	bd10      	pop	{r4, pc}
 800ba0e:	bf00      	nop
 800ba10:	0800cb68 	.word	0x0800cb68
 800ba14:	0800cb79 	.word	0x0800cb79

0800ba18 <__multiply>:
 800ba18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba1c:	4691      	mov	r9, r2
 800ba1e:	690a      	ldr	r2, [r1, #16]
 800ba20:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ba24:	429a      	cmp	r2, r3
 800ba26:	bfb8      	it	lt
 800ba28:	460b      	movlt	r3, r1
 800ba2a:	460c      	mov	r4, r1
 800ba2c:	bfbc      	itt	lt
 800ba2e:	464c      	movlt	r4, r9
 800ba30:	4699      	movlt	r9, r3
 800ba32:	6927      	ldr	r7, [r4, #16]
 800ba34:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ba38:	68a3      	ldr	r3, [r4, #8]
 800ba3a:	6861      	ldr	r1, [r4, #4]
 800ba3c:	eb07 060a 	add.w	r6, r7, sl
 800ba40:	42b3      	cmp	r3, r6
 800ba42:	b085      	sub	sp, #20
 800ba44:	bfb8      	it	lt
 800ba46:	3101      	addlt	r1, #1
 800ba48:	f7ff feda 	bl	800b800 <_Balloc>
 800ba4c:	b930      	cbnz	r0, 800ba5c <__multiply+0x44>
 800ba4e:	4602      	mov	r2, r0
 800ba50:	4b44      	ldr	r3, [pc, #272]	; (800bb64 <__multiply+0x14c>)
 800ba52:	4845      	ldr	r0, [pc, #276]	; (800bb68 <__multiply+0x150>)
 800ba54:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ba58:	f000 fc7e 	bl	800c358 <__assert_func>
 800ba5c:	f100 0514 	add.w	r5, r0, #20
 800ba60:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ba64:	462b      	mov	r3, r5
 800ba66:	2200      	movs	r2, #0
 800ba68:	4543      	cmp	r3, r8
 800ba6a:	d321      	bcc.n	800bab0 <__multiply+0x98>
 800ba6c:	f104 0314 	add.w	r3, r4, #20
 800ba70:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ba74:	f109 0314 	add.w	r3, r9, #20
 800ba78:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ba7c:	9202      	str	r2, [sp, #8]
 800ba7e:	1b3a      	subs	r2, r7, r4
 800ba80:	3a15      	subs	r2, #21
 800ba82:	f022 0203 	bic.w	r2, r2, #3
 800ba86:	3204      	adds	r2, #4
 800ba88:	f104 0115 	add.w	r1, r4, #21
 800ba8c:	428f      	cmp	r7, r1
 800ba8e:	bf38      	it	cc
 800ba90:	2204      	movcc	r2, #4
 800ba92:	9201      	str	r2, [sp, #4]
 800ba94:	9a02      	ldr	r2, [sp, #8]
 800ba96:	9303      	str	r3, [sp, #12]
 800ba98:	429a      	cmp	r2, r3
 800ba9a:	d80c      	bhi.n	800bab6 <__multiply+0x9e>
 800ba9c:	2e00      	cmp	r6, #0
 800ba9e:	dd03      	ble.n	800baa8 <__multiply+0x90>
 800baa0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d05b      	beq.n	800bb60 <__multiply+0x148>
 800baa8:	6106      	str	r6, [r0, #16]
 800baaa:	b005      	add	sp, #20
 800baac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bab0:	f843 2b04 	str.w	r2, [r3], #4
 800bab4:	e7d8      	b.n	800ba68 <__multiply+0x50>
 800bab6:	f8b3 a000 	ldrh.w	sl, [r3]
 800baba:	f1ba 0f00 	cmp.w	sl, #0
 800babe:	d024      	beq.n	800bb0a <__multiply+0xf2>
 800bac0:	f104 0e14 	add.w	lr, r4, #20
 800bac4:	46a9      	mov	r9, r5
 800bac6:	f04f 0c00 	mov.w	ip, #0
 800baca:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bace:	f8d9 1000 	ldr.w	r1, [r9]
 800bad2:	fa1f fb82 	uxth.w	fp, r2
 800bad6:	b289      	uxth	r1, r1
 800bad8:	fb0a 110b 	mla	r1, sl, fp, r1
 800badc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bae0:	f8d9 2000 	ldr.w	r2, [r9]
 800bae4:	4461      	add	r1, ip
 800bae6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800baea:	fb0a c20b 	mla	r2, sl, fp, ip
 800baee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800baf2:	b289      	uxth	r1, r1
 800baf4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800baf8:	4577      	cmp	r7, lr
 800bafa:	f849 1b04 	str.w	r1, [r9], #4
 800bafe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bb02:	d8e2      	bhi.n	800baca <__multiply+0xb2>
 800bb04:	9a01      	ldr	r2, [sp, #4]
 800bb06:	f845 c002 	str.w	ip, [r5, r2]
 800bb0a:	9a03      	ldr	r2, [sp, #12]
 800bb0c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bb10:	3304      	adds	r3, #4
 800bb12:	f1b9 0f00 	cmp.w	r9, #0
 800bb16:	d021      	beq.n	800bb5c <__multiply+0x144>
 800bb18:	6829      	ldr	r1, [r5, #0]
 800bb1a:	f104 0c14 	add.w	ip, r4, #20
 800bb1e:	46ae      	mov	lr, r5
 800bb20:	f04f 0a00 	mov.w	sl, #0
 800bb24:	f8bc b000 	ldrh.w	fp, [ip]
 800bb28:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bb2c:	fb09 220b 	mla	r2, r9, fp, r2
 800bb30:	4452      	add	r2, sl
 800bb32:	b289      	uxth	r1, r1
 800bb34:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bb38:	f84e 1b04 	str.w	r1, [lr], #4
 800bb3c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bb40:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bb44:	f8be 1000 	ldrh.w	r1, [lr]
 800bb48:	fb09 110a 	mla	r1, r9, sl, r1
 800bb4c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800bb50:	4567      	cmp	r7, ip
 800bb52:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bb56:	d8e5      	bhi.n	800bb24 <__multiply+0x10c>
 800bb58:	9a01      	ldr	r2, [sp, #4]
 800bb5a:	50a9      	str	r1, [r5, r2]
 800bb5c:	3504      	adds	r5, #4
 800bb5e:	e799      	b.n	800ba94 <__multiply+0x7c>
 800bb60:	3e01      	subs	r6, #1
 800bb62:	e79b      	b.n	800ba9c <__multiply+0x84>
 800bb64:	0800cb68 	.word	0x0800cb68
 800bb68:	0800cb79 	.word	0x0800cb79

0800bb6c <__pow5mult>:
 800bb6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb70:	4615      	mov	r5, r2
 800bb72:	f012 0203 	ands.w	r2, r2, #3
 800bb76:	4606      	mov	r6, r0
 800bb78:	460f      	mov	r7, r1
 800bb7a:	d007      	beq.n	800bb8c <__pow5mult+0x20>
 800bb7c:	4c25      	ldr	r4, [pc, #148]	; (800bc14 <__pow5mult+0xa8>)
 800bb7e:	3a01      	subs	r2, #1
 800bb80:	2300      	movs	r3, #0
 800bb82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bb86:	f7ff fe9d 	bl	800b8c4 <__multadd>
 800bb8a:	4607      	mov	r7, r0
 800bb8c:	10ad      	asrs	r5, r5, #2
 800bb8e:	d03d      	beq.n	800bc0c <__pow5mult+0xa0>
 800bb90:	69f4      	ldr	r4, [r6, #28]
 800bb92:	b97c      	cbnz	r4, 800bbb4 <__pow5mult+0x48>
 800bb94:	2010      	movs	r0, #16
 800bb96:	f7ff fd7f 	bl	800b698 <malloc>
 800bb9a:	4602      	mov	r2, r0
 800bb9c:	61f0      	str	r0, [r6, #28]
 800bb9e:	b928      	cbnz	r0, 800bbac <__pow5mult+0x40>
 800bba0:	4b1d      	ldr	r3, [pc, #116]	; (800bc18 <__pow5mult+0xac>)
 800bba2:	481e      	ldr	r0, [pc, #120]	; (800bc1c <__pow5mult+0xb0>)
 800bba4:	f240 11b3 	movw	r1, #435	; 0x1b3
 800bba8:	f000 fbd6 	bl	800c358 <__assert_func>
 800bbac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bbb0:	6004      	str	r4, [r0, #0]
 800bbb2:	60c4      	str	r4, [r0, #12]
 800bbb4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800bbb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bbbc:	b94c      	cbnz	r4, 800bbd2 <__pow5mult+0x66>
 800bbbe:	f240 2171 	movw	r1, #625	; 0x271
 800bbc2:	4630      	mov	r0, r6
 800bbc4:	f7ff ff12 	bl	800b9ec <__i2b>
 800bbc8:	2300      	movs	r3, #0
 800bbca:	f8c8 0008 	str.w	r0, [r8, #8]
 800bbce:	4604      	mov	r4, r0
 800bbd0:	6003      	str	r3, [r0, #0]
 800bbd2:	f04f 0900 	mov.w	r9, #0
 800bbd6:	07eb      	lsls	r3, r5, #31
 800bbd8:	d50a      	bpl.n	800bbf0 <__pow5mult+0x84>
 800bbda:	4639      	mov	r1, r7
 800bbdc:	4622      	mov	r2, r4
 800bbde:	4630      	mov	r0, r6
 800bbe0:	f7ff ff1a 	bl	800ba18 <__multiply>
 800bbe4:	4639      	mov	r1, r7
 800bbe6:	4680      	mov	r8, r0
 800bbe8:	4630      	mov	r0, r6
 800bbea:	f7ff fe49 	bl	800b880 <_Bfree>
 800bbee:	4647      	mov	r7, r8
 800bbf0:	106d      	asrs	r5, r5, #1
 800bbf2:	d00b      	beq.n	800bc0c <__pow5mult+0xa0>
 800bbf4:	6820      	ldr	r0, [r4, #0]
 800bbf6:	b938      	cbnz	r0, 800bc08 <__pow5mult+0x9c>
 800bbf8:	4622      	mov	r2, r4
 800bbfa:	4621      	mov	r1, r4
 800bbfc:	4630      	mov	r0, r6
 800bbfe:	f7ff ff0b 	bl	800ba18 <__multiply>
 800bc02:	6020      	str	r0, [r4, #0]
 800bc04:	f8c0 9000 	str.w	r9, [r0]
 800bc08:	4604      	mov	r4, r0
 800bc0a:	e7e4      	b.n	800bbd6 <__pow5mult+0x6a>
 800bc0c:	4638      	mov	r0, r7
 800bc0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc12:	bf00      	nop
 800bc14:	0800ccc8 	.word	0x0800ccc8
 800bc18:	0800caf9 	.word	0x0800caf9
 800bc1c:	0800cb79 	.word	0x0800cb79

0800bc20 <__lshift>:
 800bc20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc24:	460c      	mov	r4, r1
 800bc26:	6849      	ldr	r1, [r1, #4]
 800bc28:	6923      	ldr	r3, [r4, #16]
 800bc2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bc2e:	68a3      	ldr	r3, [r4, #8]
 800bc30:	4607      	mov	r7, r0
 800bc32:	4691      	mov	r9, r2
 800bc34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bc38:	f108 0601 	add.w	r6, r8, #1
 800bc3c:	42b3      	cmp	r3, r6
 800bc3e:	db0b      	blt.n	800bc58 <__lshift+0x38>
 800bc40:	4638      	mov	r0, r7
 800bc42:	f7ff fddd 	bl	800b800 <_Balloc>
 800bc46:	4605      	mov	r5, r0
 800bc48:	b948      	cbnz	r0, 800bc5e <__lshift+0x3e>
 800bc4a:	4602      	mov	r2, r0
 800bc4c:	4b28      	ldr	r3, [pc, #160]	; (800bcf0 <__lshift+0xd0>)
 800bc4e:	4829      	ldr	r0, [pc, #164]	; (800bcf4 <__lshift+0xd4>)
 800bc50:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800bc54:	f000 fb80 	bl	800c358 <__assert_func>
 800bc58:	3101      	adds	r1, #1
 800bc5a:	005b      	lsls	r3, r3, #1
 800bc5c:	e7ee      	b.n	800bc3c <__lshift+0x1c>
 800bc5e:	2300      	movs	r3, #0
 800bc60:	f100 0114 	add.w	r1, r0, #20
 800bc64:	f100 0210 	add.w	r2, r0, #16
 800bc68:	4618      	mov	r0, r3
 800bc6a:	4553      	cmp	r3, sl
 800bc6c:	db33      	blt.n	800bcd6 <__lshift+0xb6>
 800bc6e:	6920      	ldr	r0, [r4, #16]
 800bc70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bc74:	f104 0314 	add.w	r3, r4, #20
 800bc78:	f019 091f 	ands.w	r9, r9, #31
 800bc7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bc80:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bc84:	d02b      	beq.n	800bcde <__lshift+0xbe>
 800bc86:	f1c9 0e20 	rsb	lr, r9, #32
 800bc8a:	468a      	mov	sl, r1
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	6818      	ldr	r0, [r3, #0]
 800bc90:	fa00 f009 	lsl.w	r0, r0, r9
 800bc94:	4310      	orrs	r0, r2
 800bc96:	f84a 0b04 	str.w	r0, [sl], #4
 800bc9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc9e:	459c      	cmp	ip, r3
 800bca0:	fa22 f20e 	lsr.w	r2, r2, lr
 800bca4:	d8f3      	bhi.n	800bc8e <__lshift+0x6e>
 800bca6:	ebac 0304 	sub.w	r3, ip, r4
 800bcaa:	3b15      	subs	r3, #21
 800bcac:	f023 0303 	bic.w	r3, r3, #3
 800bcb0:	3304      	adds	r3, #4
 800bcb2:	f104 0015 	add.w	r0, r4, #21
 800bcb6:	4584      	cmp	ip, r0
 800bcb8:	bf38      	it	cc
 800bcba:	2304      	movcc	r3, #4
 800bcbc:	50ca      	str	r2, [r1, r3]
 800bcbe:	b10a      	cbz	r2, 800bcc4 <__lshift+0xa4>
 800bcc0:	f108 0602 	add.w	r6, r8, #2
 800bcc4:	3e01      	subs	r6, #1
 800bcc6:	4638      	mov	r0, r7
 800bcc8:	612e      	str	r6, [r5, #16]
 800bcca:	4621      	mov	r1, r4
 800bccc:	f7ff fdd8 	bl	800b880 <_Bfree>
 800bcd0:	4628      	mov	r0, r5
 800bcd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcd6:	f842 0f04 	str.w	r0, [r2, #4]!
 800bcda:	3301      	adds	r3, #1
 800bcdc:	e7c5      	b.n	800bc6a <__lshift+0x4a>
 800bcde:	3904      	subs	r1, #4
 800bce0:	f853 2b04 	ldr.w	r2, [r3], #4
 800bce4:	f841 2f04 	str.w	r2, [r1, #4]!
 800bce8:	459c      	cmp	ip, r3
 800bcea:	d8f9      	bhi.n	800bce0 <__lshift+0xc0>
 800bcec:	e7ea      	b.n	800bcc4 <__lshift+0xa4>
 800bcee:	bf00      	nop
 800bcf0:	0800cb68 	.word	0x0800cb68
 800bcf4:	0800cb79 	.word	0x0800cb79

0800bcf8 <__mcmp>:
 800bcf8:	b530      	push	{r4, r5, lr}
 800bcfa:	6902      	ldr	r2, [r0, #16]
 800bcfc:	690c      	ldr	r4, [r1, #16]
 800bcfe:	1b12      	subs	r2, r2, r4
 800bd00:	d10e      	bne.n	800bd20 <__mcmp+0x28>
 800bd02:	f100 0314 	add.w	r3, r0, #20
 800bd06:	3114      	adds	r1, #20
 800bd08:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bd0c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bd10:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bd14:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bd18:	42a5      	cmp	r5, r4
 800bd1a:	d003      	beq.n	800bd24 <__mcmp+0x2c>
 800bd1c:	d305      	bcc.n	800bd2a <__mcmp+0x32>
 800bd1e:	2201      	movs	r2, #1
 800bd20:	4610      	mov	r0, r2
 800bd22:	bd30      	pop	{r4, r5, pc}
 800bd24:	4283      	cmp	r3, r0
 800bd26:	d3f3      	bcc.n	800bd10 <__mcmp+0x18>
 800bd28:	e7fa      	b.n	800bd20 <__mcmp+0x28>
 800bd2a:	f04f 32ff 	mov.w	r2, #4294967295
 800bd2e:	e7f7      	b.n	800bd20 <__mcmp+0x28>

0800bd30 <__mdiff>:
 800bd30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd34:	460c      	mov	r4, r1
 800bd36:	4606      	mov	r6, r0
 800bd38:	4611      	mov	r1, r2
 800bd3a:	4620      	mov	r0, r4
 800bd3c:	4690      	mov	r8, r2
 800bd3e:	f7ff ffdb 	bl	800bcf8 <__mcmp>
 800bd42:	1e05      	subs	r5, r0, #0
 800bd44:	d110      	bne.n	800bd68 <__mdiff+0x38>
 800bd46:	4629      	mov	r1, r5
 800bd48:	4630      	mov	r0, r6
 800bd4a:	f7ff fd59 	bl	800b800 <_Balloc>
 800bd4e:	b930      	cbnz	r0, 800bd5e <__mdiff+0x2e>
 800bd50:	4b3a      	ldr	r3, [pc, #232]	; (800be3c <__mdiff+0x10c>)
 800bd52:	4602      	mov	r2, r0
 800bd54:	f240 2137 	movw	r1, #567	; 0x237
 800bd58:	4839      	ldr	r0, [pc, #228]	; (800be40 <__mdiff+0x110>)
 800bd5a:	f000 fafd 	bl	800c358 <__assert_func>
 800bd5e:	2301      	movs	r3, #1
 800bd60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bd64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd68:	bfa4      	itt	ge
 800bd6a:	4643      	movge	r3, r8
 800bd6c:	46a0      	movge	r8, r4
 800bd6e:	4630      	mov	r0, r6
 800bd70:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bd74:	bfa6      	itte	ge
 800bd76:	461c      	movge	r4, r3
 800bd78:	2500      	movge	r5, #0
 800bd7a:	2501      	movlt	r5, #1
 800bd7c:	f7ff fd40 	bl	800b800 <_Balloc>
 800bd80:	b920      	cbnz	r0, 800bd8c <__mdiff+0x5c>
 800bd82:	4b2e      	ldr	r3, [pc, #184]	; (800be3c <__mdiff+0x10c>)
 800bd84:	4602      	mov	r2, r0
 800bd86:	f240 2145 	movw	r1, #581	; 0x245
 800bd8a:	e7e5      	b.n	800bd58 <__mdiff+0x28>
 800bd8c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bd90:	6926      	ldr	r6, [r4, #16]
 800bd92:	60c5      	str	r5, [r0, #12]
 800bd94:	f104 0914 	add.w	r9, r4, #20
 800bd98:	f108 0514 	add.w	r5, r8, #20
 800bd9c:	f100 0e14 	add.w	lr, r0, #20
 800bda0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bda4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bda8:	f108 0210 	add.w	r2, r8, #16
 800bdac:	46f2      	mov	sl, lr
 800bdae:	2100      	movs	r1, #0
 800bdb0:	f859 3b04 	ldr.w	r3, [r9], #4
 800bdb4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bdb8:	fa11 f88b 	uxtah	r8, r1, fp
 800bdbc:	b299      	uxth	r1, r3
 800bdbe:	0c1b      	lsrs	r3, r3, #16
 800bdc0:	eba8 0801 	sub.w	r8, r8, r1
 800bdc4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bdc8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bdcc:	fa1f f888 	uxth.w	r8, r8
 800bdd0:	1419      	asrs	r1, r3, #16
 800bdd2:	454e      	cmp	r6, r9
 800bdd4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bdd8:	f84a 3b04 	str.w	r3, [sl], #4
 800bddc:	d8e8      	bhi.n	800bdb0 <__mdiff+0x80>
 800bdde:	1b33      	subs	r3, r6, r4
 800bde0:	3b15      	subs	r3, #21
 800bde2:	f023 0303 	bic.w	r3, r3, #3
 800bde6:	3304      	adds	r3, #4
 800bde8:	3415      	adds	r4, #21
 800bdea:	42a6      	cmp	r6, r4
 800bdec:	bf38      	it	cc
 800bdee:	2304      	movcc	r3, #4
 800bdf0:	441d      	add	r5, r3
 800bdf2:	4473      	add	r3, lr
 800bdf4:	469e      	mov	lr, r3
 800bdf6:	462e      	mov	r6, r5
 800bdf8:	4566      	cmp	r6, ip
 800bdfa:	d30e      	bcc.n	800be1a <__mdiff+0xea>
 800bdfc:	f10c 0203 	add.w	r2, ip, #3
 800be00:	1b52      	subs	r2, r2, r5
 800be02:	f022 0203 	bic.w	r2, r2, #3
 800be06:	3d03      	subs	r5, #3
 800be08:	45ac      	cmp	ip, r5
 800be0a:	bf38      	it	cc
 800be0c:	2200      	movcc	r2, #0
 800be0e:	4413      	add	r3, r2
 800be10:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800be14:	b17a      	cbz	r2, 800be36 <__mdiff+0x106>
 800be16:	6107      	str	r7, [r0, #16]
 800be18:	e7a4      	b.n	800bd64 <__mdiff+0x34>
 800be1a:	f856 8b04 	ldr.w	r8, [r6], #4
 800be1e:	fa11 f288 	uxtah	r2, r1, r8
 800be22:	1414      	asrs	r4, r2, #16
 800be24:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800be28:	b292      	uxth	r2, r2
 800be2a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800be2e:	f84e 2b04 	str.w	r2, [lr], #4
 800be32:	1421      	asrs	r1, r4, #16
 800be34:	e7e0      	b.n	800bdf8 <__mdiff+0xc8>
 800be36:	3f01      	subs	r7, #1
 800be38:	e7ea      	b.n	800be10 <__mdiff+0xe0>
 800be3a:	bf00      	nop
 800be3c:	0800cb68 	.word	0x0800cb68
 800be40:	0800cb79 	.word	0x0800cb79

0800be44 <__d2b>:
 800be44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800be48:	460f      	mov	r7, r1
 800be4a:	2101      	movs	r1, #1
 800be4c:	ec59 8b10 	vmov	r8, r9, d0
 800be50:	4616      	mov	r6, r2
 800be52:	f7ff fcd5 	bl	800b800 <_Balloc>
 800be56:	4604      	mov	r4, r0
 800be58:	b930      	cbnz	r0, 800be68 <__d2b+0x24>
 800be5a:	4602      	mov	r2, r0
 800be5c:	4b24      	ldr	r3, [pc, #144]	; (800bef0 <__d2b+0xac>)
 800be5e:	4825      	ldr	r0, [pc, #148]	; (800bef4 <__d2b+0xb0>)
 800be60:	f240 310f 	movw	r1, #783	; 0x30f
 800be64:	f000 fa78 	bl	800c358 <__assert_func>
 800be68:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800be6c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800be70:	bb2d      	cbnz	r5, 800bebe <__d2b+0x7a>
 800be72:	9301      	str	r3, [sp, #4]
 800be74:	f1b8 0300 	subs.w	r3, r8, #0
 800be78:	d026      	beq.n	800bec8 <__d2b+0x84>
 800be7a:	4668      	mov	r0, sp
 800be7c:	9300      	str	r3, [sp, #0]
 800be7e:	f7ff fd87 	bl	800b990 <__lo0bits>
 800be82:	e9dd 1200 	ldrd	r1, r2, [sp]
 800be86:	b1e8      	cbz	r0, 800bec4 <__d2b+0x80>
 800be88:	f1c0 0320 	rsb	r3, r0, #32
 800be8c:	fa02 f303 	lsl.w	r3, r2, r3
 800be90:	430b      	orrs	r3, r1
 800be92:	40c2      	lsrs	r2, r0
 800be94:	6163      	str	r3, [r4, #20]
 800be96:	9201      	str	r2, [sp, #4]
 800be98:	9b01      	ldr	r3, [sp, #4]
 800be9a:	61a3      	str	r3, [r4, #24]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	bf14      	ite	ne
 800bea0:	2202      	movne	r2, #2
 800bea2:	2201      	moveq	r2, #1
 800bea4:	6122      	str	r2, [r4, #16]
 800bea6:	b1bd      	cbz	r5, 800bed8 <__d2b+0x94>
 800bea8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800beac:	4405      	add	r5, r0
 800beae:	603d      	str	r5, [r7, #0]
 800beb0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800beb4:	6030      	str	r0, [r6, #0]
 800beb6:	4620      	mov	r0, r4
 800beb8:	b003      	add	sp, #12
 800beba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bebe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bec2:	e7d6      	b.n	800be72 <__d2b+0x2e>
 800bec4:	6161      	str	r1, [r4, #20]
 800bec6:	e7e7      	b.n	800be98 <__d2b+0x54>
 800bec8:	a801      	add	r0, sp, #4
 800beca:	f7ff fd61 	bl	800b990 <__lo0bits>
 800bece:	9b01      	ldr	r3, [sp, #4]
 800bed0:	6163      	str	r3, [r4, #20]
 800bed2:	3020      	adds	r0, #32
 800bed4:	2201      	movs	r2, #1
 800bed6:	e7e5      	b.n	800bea4 <__d2b+0x60>
 800bed8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bedc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bee0:	6038      	str	r0, [r7, #0]
 800bee2:	6918      	ldr	r0, [r3, #16]
 800bee4:	f7ff fd34 	bl	800b950 <__hi0bits>
 800bee8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800beec:	e7e2      	b.n	800beb4 <__d2b+0x70>
 800beee:	bf00      	nop
 800bef0:	0800cb68 	.word	0x0800cb68
 800bef4:	0800cb79 	.word	0x0800cb79

0800bef8 <__ssputs_r>:
 800bef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800befc:	688e      	ldr	r6, [r1, #8]
 800befe:	461f      	mov	r7, r3
 800bf00:	42be      	cmp	r6, r7
 800bf02:	680b      	ldr	r3, [r1, #0]
 800bf04:	4682      	mov	sl, r0
 800bf06:	460c      	mov	r4, r1
 800bf08:	4690      	mov	r8, r2
 800bf0a:	d82c      	bhi.n	800bf66 <__ssputs_r+0x6e>
 800bf0c:	898a      	ldrh	r2, [r1, #12]
 800bf0e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bf12:	d026      	beq.n	800bf62 <__ssputs_r+0x6a>
 800bf14:	6965      	ldr	r5, [r4, #20]
 800bf16:	6909      	ldr	r1, [r1, #16]
 800bf18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bf1c:	eba3 0901 	sub.w	r9, r3, r1
 800bf20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bf24:	1c7b      	adds	r3, r7, #1
 800bf26:	444b      	add	r3, r9
 800bf28:	106d      	asrs	r5, r5, #1
 800bf2a:	429d      	cmp	r5, r3
 800bf2c:	bf38      	it	cc
 800bf2e:	461d      	movcc	r5, r3
 800bf30:	0553      	lsls	r3, r2, #21
 800bf32:	d527      	bpl.n	800bf84 <__ssputs_r+0x8c>
 800bf34:	4629      	mov	r1, r5
 800bf36:	f7ff fbd7 	bl	800b6e8 <_malloc_r>
 800bf3a:	4606      	mov	r6, r0
 800bf3c:	b360      	cbz	r0, 800bf98 <__ssputs_r+0xa0>
 800bf3e:	6921      	ldr	r1, [r4, #16]
 800bf40:	464a      	mov	r2, r9
 800bf42:	f7fe fd5a 	bl	800a9fa <memcpy>
 800bf46:	89a3      	ldrh	r3, [r4, #12]
 800bf48:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bf4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf50:	81a3      	strh	r3, [r4, #12]
 800bf52:	6126      	str	r6, [r4, #16]
 800bf54:	6165      	str	r5, [r4, #20]
 800bf56:	444e      	add	r6, r9
 800bf58:	eba5 0509 	sub.w	r5, r5, r9
 800bf5c:	6026      	str	r6, [r4, #0]
 800bf5e:	60a5      	str	r5, [r4, #8]
 800bf60:	463e      	mov	r6, r7
 800bf62:	42be      	cmp	r6, r7
 800bf64:	d900      	bls.n	800bf68 <__ssputs_r+0x70>
 800bf66:	463e      	mov	r6, r7
 800bf68:	6820      	ldr	r0, [r4, #0]
 800bf6a:	4632      	mov	r2, r6
 800bf6c:	4641      	mov	r1, r8
 800bf6e:	f000 f9c9 	bl	800c304 <memmove>
 800bf72:	68a3      	ldr	r3, [r4, #8]
 800bf74:	1b9b      	subs	r3, r3, r6
 800bf76:	60a3      	str	r3, [r4, #8]
 800bf78:	6823      	ldr	r3, [r4, #0]
 800bf7a:	4433      	add	r3, r6
 800bf7c:	6023      	str	r3, [r4, #0]
 800bf7e:	2000      	movs	r0, #0
 800bf80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf84:	462a      	mov	r2, r5
 800bf86:	f000 fa2d 	bl	800c3e4 <_realloc_r>
 800bf8a:	4606      	mov	r6, r0
 800bf8c:	2800      	cmp	r0, #0
 800bf8e:	d1e0      	bne.n	800bf52 <__ssputs_r+0x5a>
 800bf90:	6921      	ldr	r1, [r4, #16]
 800bf92:	4650      	mov	r0, sl
 800bf94:	f7ff fb34 	bl	800b600 <_free_r>
 800bf98:	230c      	movs	r3, #12
 800bf9a:	f8ca 3000 	str.w	r3, [sl]
 800bf9e:	89a3      	ldrh	r3, [r4, #12]
 800bfa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfa4:	81a3      	strh	r3, [r4, #12]
 800bfa6:	f04f 30ff 	mov.w	r0, #4294967295
 800bfaa:	e7e9      	b.n	800bf80 <__ssputs_r+0x88>

0800bfac <_svfiprintf_r>:
 800bfac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfb0:	4698      	mov	r8, r3
 800bfb2:	898b      	ldrh	r3, [r1, #12]
 800bfb4:	061b      	lsls	r3, r3, #24
 800bfb6:	b09d      	sub	sp, #116	; 0x74
 800bfb8:	4607      	mov	r7, r0
 800bfba:	460d      	mov	r5, r1
 800bfbc:	4614      	mov	r4, r2
 800bfbe:	d50e      	bpl.n	800bfde <_svfiprintf_r+0x32>
 800bfc0:	690b      	ldr	r3, [r1, #16]
 800bfc2:	b963      	cbnz	r3, 800bfde <_svfiprintf_r+0x32>
 800bfc4:	2140      	movs	r1, #64	; 0x40
 800bfc6:	f7ff fb8f 	bl	800b6e8 <_malloc_r>
 800bfca:	6028      	str	r0, [r5, #0]
 800bfcc:	6128      	str	r0, [r5, #16]
 800bfce:	b920      	cbnz	r0, 800bfda <_svfiprintf_r+0x2e>
 800bfd0:	230c      	movs	r3, #12
 800bfd2:	603b      	str	r3, [r7, #0]
 800bfd4:	f04f 30ff 	mov.w	r0, #4294967295
 800bfd8:	e0d0      	b.n	800c17c <_svfiprintf_r+0x1d0>
 800bfda:	2340      	movs	r3, #64	; 0x40
 800bfdc:	616b      	str	r3, [r5, #20]
 800bfde:	2300      	movs	r3, #0
 800bfe0:	9309      	str	r3, [sp, #36]	; 0x24
 800bfe2:	2320      	movs	r3, #32
 800bfe4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bfe8:	f8cd 800c 	str.w	r8, [sp, #12]
 800bfec:	2330      	movs	r3, #48	; 0x30
 800bfee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c194 <_svfiprintf_r+0x1e8>
 800bff2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bff6:	f04f 0901 	mov.w	r9, #1
 800bffa:	4623      	mov	r3, r4
 800bffc:	469a      	mov	sl, r3
 800bffe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c002:	b10a      	cbz	r2, 800c008 <_svfiprintf_r+0x5c>
 800c004:	2a25      	cmp	r2, #37	; 0x25
 800c006:	d1f9      	bne.n	800bffc <_svfiprintf_r+0x50>
 800c008:	ebba 0b04 	subs.w	fp, sl, r4
 800c00c:	d00b      	beq.n	800c026 <_svfiprintf_r+0x7a>
 800c00e:	465b      	mov	r3, fp
 800c010:	4622      	mov	r2, r4
 800c012:	4629      	mov	r1, r5
 800c014:	4638      	mov	r0, r7
 800c016:	f7ff ff6f 	bl	800bef8 <__ssputs_r>
 800c01a:	3001      	adds	r0, #1
 800c01c:	f000 80a9 	beq.w	800c172 <_svfiprintf_r+0x1c6>
 800c020:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c022:	445a      	add	r2, fp
 800c024:	9209      	str	r2, [sp, #36]	; 0x24
 800c026:	f89a 3000 	ldrb.w	r3, [sl]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	f000 80a1 	beq.w	800c172 <_svfiprintf_r+0x1c6>
 800c030:	2300      	movs	r3, #0
 800c032:	f04f 32ff 	mov.w	r2, #4294967295
 800c036:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c03a:	f10a 0a01 	add.w	sl, sl, #1
 800c03e:	9304      	str	r3, [sp, #16]
 800c040:	9307      	str	r3, [sp, #28]
 800c042:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c046:	931a      	str	r3, [sp, #104]	; 0x68
 800c048:	4654      	mov	r4, sl
 800c04a:	2205      	movs	r2, #5
 800c04c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c050:	4850      	ldr	r0, [pc, #320]	; (800c194 <_svfiprintf_r+0x1e8>)
 800c052:	f7f4 f945 	bl	80002e0 <memchr>
 800c056:	9a04      	ldr	r2, [sp, #16]
 800c058:	b9d8      	cbnz	r0, 800c092 <_svfiprintf_r+0xe6>
 800c05a:	06d0      	lsls	r0, r2, #27
 800c05c:	bf44      	itt	mi
 800c05e:	2320      	movmi	r3, #32
 800c060:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c064:	0711      	lsls	r1, r2, #28
 800c066:	bf44      	itt	mi
 800c068:	232b      	movmi	r3, #43	; 0x2b
 800c06a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c06e:	f89a 3000 	ldrb.w	r3, [sl]
 800c072:	2b2a      	cmp	r3, #42	; 0x2a
 800c074:	d015      	beq.n	800c0a2 <_svfiprintf_r+0xf6>
 800c076:	9a07      	ldr	r2, [sp, #28]
 800c078:	4654      	mov	r4, sl
 800c07a:	2000      	movs	r0, #0
 800c07c:	f04f 0c0a 	mov.w	ip, #10
 800c080:	4621      	mov	r1, r4
 800c082:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c086:	3b30      	subs	r3, #48	; 0x30
 800c088:	2b09      	cmp	r3, #9
 800c08a:	d94d      	bls.n	800c128 <_svfiprintf_r+0x17c>
 800c08c:	b1b0      	cbz	r0, 800c0bc <_svfiprintf_r+0x110>
 800c08e:	9207      	str	r2, [sp, #28]
 800c090:	e014      	b.n	800c0bc <_svfiprintf_r+0x110>
 800c092:	eba0 0308 	sub.w	r3, r0, r8
 800c096:	fa09 f303 	lsl.w	r3, r9, r3
 800c09a:	4313      	orrs	r3, r2
 800c09c:	9304      	str	r3, [sp, #16]
 800c09e:	46a2      	mov	sl, r4
 800c0a0:	e7d2      	b.n	800c048 <_svfiprintf_r+0x9c>
 800c0a2:	9b03      	ldr	r3, [sp, #12]
 800c0a4:	1d19      	adds	r1, r3, #4
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	9103      	str	r1, [sp, #12]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	bfbb      	ittet	lt
 800c0ae:	425b      	neglt	r3, r3
 800c0b0:	f042 0202 	orrlt.w	r2, r2, #2
 800c0b4:	9307      	strge	r3, [sp, #28]
 800c0b6:	9307      	strlt	r3, [sp, #28]
 800c0b8:	bfb8      	it	lt
 800c0ba:	9204      	strlt	r2, [sp, #16]
 800c0bc:	7823      	ldrb	r3, [r4, #0]
 800c0be:	2b2e      	cmp	r3, #46	; 0x2e
 800c0c0:	d10c      	bne.n	800c0dc <_svfiprintf_r+0x130>
 800c0c2:	7863      	ldrb	r3, [r4, #1]
 800c0c4:	2b2a      	cmp	r3, #42	; 0x2a
 800c0c6:	d134      	bne.n	800c132 <_svfiprintf_r+0x186>
 800c0c8:	9b03      	ldr	r3, [sp, #12]
 800c0ca:	1d1a      	adds	r2, r3, #4
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	9203      	str	r2, [sp, #12]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	bfb8      	it	lt
 800c0d4:	f04f 33ff 	movlt.w	r3, #4294967295
 800c0d8:	3402      	adds	r4, #2
 800c0da:	9305      	str	r3, [sp, #20]
 800c0dc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c1a4 <_svfiprintf_r+0x1f8>
 800c0e0:	7821      	ldrb	r1, [r4, #0]
 800c0e2:	2203      	movs	r2, #3
 800c0e4:	4650      	mov	r0, sl
 800c0e6:	f7f4 f8fb 	bl	80002e0 <memchr>
 800c0ea:	b138      	cbz	r0, 800c0fc <_svfiprintf_r+0x150>
 800c0ec:	9b04      	ldr	r3, [sp, #16]
 800c0ee:	eba0 000a 	sub.w	r0, r0, sl
 800c0f2:	2240      	movs	r2, #64	; 0x40
 800c0f4:	4082      	lsls	r2, r0
 800c0f6:	4313      	orrs	r3, r2
 800c0f8:	3401      	adds	r4, #1
 800c0fa:	9304      	str	r3, [sp, #16]
 800c0fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c100:	4825      	ldr	r0, [pc, #148]	; (800c198 <_svfiprintf_r+0x1ec>)
 800c102:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c106:	2206      	movs	r2, #6
 800c108:	f7f4 f8ea 	bl	80002e0 <memchr>
 800c10c:	2800      	cmp	r0, #0
 800c10e:	d038      	beq.n	800c182 <_svfiprintf_r+0x1d6>
 800c110:	4b22      	ldr	r3, [pc, #136]	; (800c19c <_svfiprintf_r+0x1f0>)
 800c112:	bb1b      	cbnz	r3, 800c15c <_svfiprintf_r+0x1b0>
 800c114:	9b03      	ldr	r3, [sp, #12]
 800c116:	3307      	adds	r3, #7
 800c118:	f023 0307 	bic.w	r3, r3, #7
 800c11c:	3308      	adds	r3, #8
 800c11e:	9303      	str	r3, [sp, #12]
 800c120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c122:	4433      	add	r3, r6
 800c124:	9309      	str	r3, [sp, #36]	; 0x24
 800c126:	e768      	b.n	800bffa <_svfiprintf_r+0x4e>
 800c128:	fb0c 3202 	mla	r2, ip, r2, r3
 800c12c:	460c      	mov	r4, r1
 800c12e:	2001      	movs	r0, #1
 800c130:	e7a6      	b.n	800c080 <_svfiprintf_r+0xd4>
 800c132:	2300      	movs	r3, #0
 800c134:	3401      	adds	r4, #1
 800c136:	9305      	str	r3, [sp, #20]
 800c138:	4619      	mov	r1, r3
 800c13a:	f04f 0c0a 	mov.w	ip, #10
 800c13e:	4620      	mov	r0, r4
 800c140:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c144:	3a30      	subs	r2, #48	; 0x30
 800c146:	2a09      	cmp	r2, #9
 800c148:	d903      	bls.n	800c152 <_svfiprintf_r+0x1a6>
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d0c6      	beq.n	800c0dc <_svfiprintf_r+0x130>
 800c14e:	9105      	str	r1, [sp, #20]
 800c150:	e7c4      	b.n	800c0dc <_svfiprintf_r+0x130>
 800c152:	fb0c 2101 	mla	r1, ip, r1, r2
 800c156:	4604      	mov	r4, r0
 800c158:	2301      	movs	r3, #1
 800c15a:	e7f0      	b.n	800c13e <_svfiprintf_r+0x192>
 800c15c:	ab03      	add	r3, sp, #12
 800c15e:	9300      	str	r3, [sp, #0]
 800c160:	462a      	mov	r2, r5
 800c162:	4b0f      	ldr	r3, [pc, #60]	; (800c1a0 <_svfiprintf_r+0x1f4>)
 800c164:	a904      	add	r1, sp, #16
 800c166:	4638      	mov	r0, r7
 800c168:	f7fd fea2 	bl	8009eb0 <_printf_float>
 800c16c:	1c42      	adds	r2, r0, #1
 800c16e:	4606      	mov	r6, r0
 800c170:	d1d6      	bne.n	800c120 <_svfiprintf_r+0x174>
 800c172:	89ab      	ldrh	r3, [r5, #12]
 800c174:	065b      	lsls	r3, r3, #25
 800c176:	f53f af2d 	bmi.w	800bfd4 <_svfiprintf_r+0x28>
 800c17a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c17c:	b01d      	add	sp, #116	; 0x74
 800c17e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c182:	ab03      	add	r3, sp, #12
 800c184:	9300      	str	r3, [sp, #0]
 800c186:	462a      	mov	r2, r5
 800c188:	4b05      	ldr	r3, [pc, #20]	; (800c1a0 <_svfiprintf_r+0x1f4>)
 800c18a:	a904      	add	r1, sp, #16
 800c18c:	4638      	mov	r0, r7
 800c18e:	f7fe f917 	bl	800a3c0 <_printf_i>
 800c192:	e7eb      	b.n	800c16c <_svfiprintf_r+0x1c0>
 800c194:	0800ccd4 	.word	0x0800ccd4
 800c198:	0800ccde 	.word	0x0800ccde
 800c19c:	08009eb1 	.word	0x08009eb1
 800c1a0:	0800bef9 	.word	0x0800bef9
 800c1a4:	0800ccda 	.word	0x0800ccda

0800c1a8 <__sflush_r>:
 800c1a8:	898a      	ldrh	r2, [r1, #12]
 800c1aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1ae:	4605      	mov	r5, r0
 800c1b0:	0710      	lsls	r0, r2, #28
 800c1b2:	460c      	mov	r4, r1
 800c1b4:	d458      	bmi.n	800c268 <__sflush_r+0xc0>
 800c1b6:	684b      	ldr	r3, [r1, #4]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	dc05      	bgt.n	800c1c8 <__sflush_r+0x20>
 800c1bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	dc02      	bgt.n	800c1c8 <__sflush_r+0x20>
 800c1c2:	2000      	movs	r0, #0
 800c1c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c1ca:	2e00      	cmp	r6, #0
 800c1cc:	d0f9      	beq.n	800c1c2 <__sflush_r+0x1a>
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c1d4:	682f      	ldr	r7, [r5, #0]
 800c1d6:	6a21      	ldr	r1, [r4, #32]
 800c1d8:	602b      	str	r3, [r5, #0]
 800c1da:	d032      	beq.n	800c242 <__sflush_r+0x9a>
 800c1dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c1de:	89a3      	ldrh	r3, [r4, #12]
 800c1e0:	075a      	lsls	r2, r3, #29
 800c1e2:	d505      	bpl.n	800c1f0 <__sflush_r+0x48>
 800c1e4:	6863      	ldr	r3, [r4, #4]
 800c1e6:	1ac0      	subs	r0, r0, r3
 800c1e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c1ea:	b10b      	cbz	r3, 800c1f0 <__sflush_r+0x48>
 800c1ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c1ee:	1ac0      	subs	r0, r0, r3
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	4602      	mov	r2, r0
 800c1f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c1f6:	6a21      	ldr	r1, [r4, #32]
 800c1f8:	4628      	mov	r0, r5
 800c1fa:	47b0      	blx	r6
 800c1fc:	1c43      	adds	r3, r0, #1
 800c1fe:	89a3      	ldrh	r3, [r4, #12]
 800c200:	d106      	bne.n	800c210 <__sflush_r+0x68>
 800c202:	6829      	ldr	r1, [r5, #0]
 800c204:	291d      	cmp	r1, #29
 800c206:	d82b      	bhi.n	800c260 <__sflush_r+0xb8>
 800c208:	4a29      	ldr	r2, [pc, #164]	; (800c2b0 <__sflush_r+0x108>)
 800c20a:	410a      	asrs	r2, r1
 800c20c:	07d6      	lsls	r6, r2, #31
 800c20e:	d427      	bmi.n	800c260 <__sflush_r+0xb8>
 800c210:	2200      	movs	r2, #0
 800c212:	6062      	str	r2, [r4, #4]
 800c214:	04d9      	lsls	r1, r3, #19
 800c216:	6922      	ldr	r2, [r4, #16]
 800c218:	6022      	str	r2, [r4, #0]
 800c21a:	d504      	bpl.n	800c226 <__sflush_r+0x7e>
 800c21c:	1c42      	adds	r2, r0, #1
 800c21e:	d101      	bne.n	800c224 <__sflush_r+0x7c>
 800c220:	682b      	ldr	r3, [r5, #0]
 800c222:	b903      	cbnz	r3, 800c226 <__sflush_r+0x7e>
 800c224:	6560      	str	r0, [r4, #84]	; 0x54
 800c226:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c228:	602f      	str	r7, [r5, #0]
 800c22a:	2900      	cmp	r1, #0
 800c22c:	d0c9      	beq.n	800c1c2 <__sflush_r+0x1a>
 800c22e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c232:	4299      	cmp	r1, r3
 800c234:	d002      	beq.n	800c23c <__sflush_r+0x94>
 800c236:	4628      	mov	r0, r5
 800c238:	f7ff f9e2 	bl	800b600 <_free_r>
 800c23c:	2000      	movs	r0, #0
 800c23e:	6360      	str	r0, [r4, #52]	; 0x34
 800c240:	e7c0      	b.n	800c1c4 <__sflush_r+0x1c>
 800c242:	2301      	movs	r3, #1
 800c244:	4628      	mov	r0, r5
 800c246:	47b0      	blx	r6
 800c248:	1c41      	adds	r1, r0, #1
 800c24a:	d1c8      	bne.n	800c1de <__sflush_r+0x36>
 800c24c:	682b      	ldr	r3, [r5, #0]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d0c5      	beq.n	800c1de <__sflush_r+0x36>
 800c252:	2b1d      	cmp	r3, #29
 800c254:	d001      	beq.n	800c25a <__sflush_r+0xb2>
 800c256:	2b16      	cmp	r3, #22
 800c258:	d101      	bne.n	800c25e <__sflush_r+0xb6>
 800c25a:	602f      	str	r7, [r5, #0]
 800c25c:	e7b1      	b.n	800c1c2 <__sflush_r+0x1a>
 800c25e:	89a3      	ldrh	r3, [r4, #12]
 800c260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c264:	81a3      	strh	r3, [r4, #12]
 800c266:	e7ad      	b.n	800c1c4 <__sflush_r+0x1c>
 800c268:	690f      	ldr	r7, [r1, #16]
 800c26a:	2f00      	cmp	r7, #0
 800c26c:	d0a9      	beq.n	800c1c2 <__sflush_r+0x1a>
 800c26e:	0793      	lsls	r3, r2, #30
 800c270:	680e      	ldr	r6, [r1, #0]
 800c272:	bf08      	it	eq
 800c274:	694b      	ldreq	r3, [r1, #20]
 800c276:	600f      	str	r7, [r1, #0]
 800c278:	bf18      	it	ne
 800c27a:	2300      	movne	r3, #0
 800c27c:	eba6 0807 	sub.w	r8, r6, r7
 800c280:	608b      	str	r3, [r1, #8]
 800c282:	f1b8 0f00 	cmp.w	r8, #0
 800c286:	dd9c      	ble.n	800c1c2 <__sflush_r+0x1a>
 800c288:	6a21      	ldr	r1, [r4, #32]
 800c28a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c28c:	4643      	mov	r3, r8
 800c28e:	463a      	mov	r2, r7
 800c290:	4628      	mov	r0, r5
 800c292:	47b0      	blx	r6
 800c294:	2800      	cmp	r0, #0
 800c296:	dc06      	bgt.n	800c2a6 <__sflush_r+0xfe>
 800c298:	89a3      	ldrh	r3, [r4, #12]
 800c29a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c29e:	81a3      	strh	r3, [r4, #12]
 800c2a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c2a4:	e78e      	b.n	800c1c4 <__sflush_r+0x1c>
 800c2a6:	4407      	add	r7, r0
 800c2a8:	eba8 0800 	sub.w	r8, r8, r0
 800c2ac:	e7e9      	b.n	800c282 <__sflush_r+0xda>
 800c2ae:	bf00      	nop
 800c2b0:	dfbffffe 	.word	0xdfbffffe

0800c2b4 <_fflush_r>:
 800c2b4:	b538      	push	{r3, r4, r5, lr}
 800c2b6:	690b      	ldr	r3, [r1, #16]
 800c2b8:	4605      	mov	r5, r0
 800c2ba:	460c      	mov	r4, r1
 800c2bc:	b913      	cbnz	r3, 800c2c4 <_fflush_r+0x10>
 800c2be:	2500      	movs	r5, #0
 800c2c0:	4628      	mov	r0, r5
 800c2c2:	bd38      	pop	{r3, r4, r5, pc}
 800c2c4:	b118      	cbz	r0, 800c2ce <_fflush_r+0x1a>
 800c2c6:	6a03      	ldr	r3, [r0, #32]
 800c2c8:	b90b      	cbnz	r3, 800c2ce <_fflush_r+0x1a>
 800c2ca:	f7fe fa27 	bl	800a71c <__sinit>
 800c2ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d0f3      	beq.n	800c2be <_fflush_r+0xa>
 800c2d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c2d8:	07d0      	lsls	r0, r2, #31
 800c2da:	d404      	bmi.n	800c2e6 <_fflush_r+0x32>
 800c2dc:	0599      	lsls	r1, r3, #22
 800c2de:	d402      	bmi.n	800c2e6 <_fflush_r+0x32>
 800c2e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2e2:	f7fe fb88 	bl	800a9f6 <__retarget_lock_acquire_recursive>
 800c2e6:	4628      	mov	r0, r5
 800c2e8:	4621      	mov	r1, r4
 800c2ea:	f7ff ff5d 	bl	800c1a8 <__sflush_r>
 800c2ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c2f0:	07da      	lsls	r2, r3, #31
 800c2f2:	4605      	mov	r5, r0
 800c2f4:	d4e4      	bmi.n	800c2c0 <_fflush_r+0xc>
 800c2f6:	89a3      	ldrh	r3, [r4, #12]
 800c2f8:	059b      	lsls	r3, r3, #22
 800c2fa:	d4e1      	bmi.n	800c2c0 <_fflush_r+0xc>
 800c2fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2fe:	f7fe fb7b 	bl	800a9f8 <__retarget_lock_release_recursive>
 800c302:	e7dd      	b.n	800c2c0 <_fflush_r+0xc>

0800c304 <memmove>:
 800c304:	4288      	cmp	r0, r1
 800c306:	b510      	push	{r4, lr}
 800c308:	eb01 0402 	add.w	r4, r1, r2
 800c30c:	d902      	bls.n	800c314 <memmove+0x10>
 800c30e:	4284      	cmp	r4, r0
 800c310:	4623      	mov	r3, r4
 800c312:	d807      	bhi.n	800c324 <memmove+0x20>
 800c314:	1e43      	subs	r3, r0, #1
 800c316:	42a1      	cmp	r1, r4
 800c318:	d008      	beq.n	800c32c <memmove+0x28>
 800c31a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c31e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c322:	e7f8      	b.n	800c316 <memmove+0x12>
 800c324:	4402      	add	r2, r0
 800c326:	4601      	mov	r1, r0
 800c328:	428a      	cmp	r2, r1
 800c32a:	d100      	bne.n	800c32e <memmove+0x2a>
 800c32c:	bd10      	pop	{r4, pc}
 800c32e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c332:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c336:	e7f7      	b.n	800c328 <memmove+0x24>

0800c338 <_sbrk_r>:
 800c338:	b538      	push	{r3, r4, r5, lr}
 800c33a:	4d06      	ldr	r5, [pc, #24]	; (800c354 <_sbrk_r+0x1c>)
 800c33c:	2300      	movs	r3, #0
 800c33e:	4604      	mov	r4, r0
 800c340:	4608      	mov	r0, r1
 800c342:	602b      	str	r3, [r5, #0]
 800c344:	f7f4 fdea 	bl	8000f1c <_sbrk>
 800c348:	1c43      	adds	r3, r0, #1
 800c34a:	d102      	bne.n	800c352 <_sbrk_r+0x1a>
 800c34c:	682b      	ldr	r3, [r5, #0]
 800c34e:	b103      	cbz	r3, 800c352 <_sbrk_r+0x1a>
 800c350:	6023      	str	r3, [r4, #0]
 800c352:	bd38      	pop	{r3, r4, r5, pc}
 800c354:	240054c8 	.word	0x240054c8

0800c358 <__assert_func>:
 800c358:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c35a:	4614      	mov	r4, r2
 800c35c:	461a      	mov	r2, r3
 800c35e:	4b09      	ldr	r3, [pc, #36]	; (800c384 <__assert_func+0x2c>)
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	4605      	mov	r5, r0
 800c364:	68d8      	ldr	r0, [r3, #12]
 800c366:	b14c      	cbz	r4, 800c37c <__assert_func+0x24>
 800c368:	4b07      	ldr	r3, [pc, #28]	; (800c388 <__assert_func+0x30>)
 800c36a:	9100      	str	r1, [sp, #0]
 800c36c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c370:	4906      	ldr	r1, [pc, #24]	; (800c38c <__assert_func+0x34>)
 800c372:	462b      	mov	r3, r5
 800c374:	f000 f872 	bl	800c45c <fiprintf>
 800c378:	f000 f882 	bl	800c480 <abort>
 800c37c:	4b04      	ldr	r3, [pc, #16]	; (800c390 <__assert_func+0x38>)
 800c37e:	461c      	mov	r4, r3
 800c380:	e7f3      	b.n	800c36a <__assert_func+0x12>
 800c382:	bf00      	nop
 800c384:	2400006c 	.word	0x2400006c
 800c388:	0800ccef 	.word	0x0800ccef
 800c38c:	0800ccfc 	.word	0x0800ccfc
 800c390:	0800cd2a 	.word	0x0800cd2a

0800c394 <_calloc_r>:
 800c394:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c396:	fba1 2402 	umull	r2, r4, r1, r2
 800c39a:	b94c      	cbnz	r4, 800c3b0 <_calloc_r+0x1c>
 800c39c:	4611      	mov	r1, r2
 800c39e:	9201      	str	r2, [sp, #4]
 800c3a0:	f7ff f9a2 	bl	800b6e8 <_malloc_r>
 800c3a4:	9a01      	ldr	r2, [sp, #4]
 800c3a6:	4605      	mov	r5, r0
 800c3a8:	b930      	cbnz	r0, 800c3b8 <_calloc_r+0x24>
 800c3aa:	4628      	mov	r0, r5
 800c3ac:	b003      	add	sp, #12
 800c3ae:	bd30      	pop	{r4, r5, pc}
 800c3b0:	220c      	movs	r2, #12
 800c3b2:	6002      	str	r2, [r0, #0]
 800c3b4:	2500      	movs	r5, #0
 800c3b6:	e7f8      	b.n	800c3aa <_calloc_r+0x16>
 800c3b8:	4621      	mov	r1, r4
 800c3ba:	f7fe fa48 	bl	800a84e <memset>
 800c3be:	e7f4      	b.n	800c3aa <_calloc_r+0x16>

0800c3c0 <__ascii_mbtowc>:
 800c3c0:	b082      	sub	sp, #8
 800c3c2:	b901      	cbnz	r1, 800c3c6 <__ascii_mbtowc+0x6>
 800c3c4:	a901      	add	r1, sp, #4
 800c3c6:	b142      	cbz	r2, 800c3da <__ascii_mbtowc+0x1a>
 800c3c8:	b14b      	cbz	r3, 800c3de <__ascii_mbtowc+0x1e>
 800c3ca:	7813      	ldrb	r3, [r2, #0]
 800c3cc:	600b      	str	r3, [r1, #0]
 800c3ce:	7812      	ldrb	r2, [r2, #0]
 800c3d0:	1e10      	subs	r0, r2, #0
 800c3d2:	bf18      	it	ne
 800c3d4:	2001      	movne	r0, #1
 800c3d6:	b002      	add	sp, #8
 800c3d8:	4770      	bx	lr
 800c3da:	4610      	mov	r0, r2
 800c3dc:	e7fb      	b.n	800c3d6 <__ascii_mbtowc+0x16>
 800c3de:	f06f 0001 	mvn.w	r0, #1
 800c3e2:	e7f8      	b.n	800c3d6 <__ascii_mbtowc+0x16>

0800c3e4 <_realloc_r>:
 800c3e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3e8:	4680      	mov	r8, r0
 800c3ea:	4614      	mov	r4, r2
 800c3ec:	460e      	mov	r6, r1
 800c3ee:	b921      	cbnz	r1, 800c3fa <_realloc_r+0x16>
 800c3f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3f4:	4611      	mov	r1, r2
 800c3f6:	f7ff b977 	b.w	800b6e8 <_malloc_r>
 800c3fa:	b92a      	cbnz	r2, 800c408 <_realloc_r+0x24>
 800c3fc:	f7ff f900 	bl	800b600 <_free_r>
 800c400:	4625      	mov	r5, r4
 800c402:	4628      	mov	r0, r5
 800c404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c408:	f000 f841 	bl	800c48e <_malloc_usable_size_r>
 800c40c:	4284      	cmp	r4, r0
 800c40e:	4607      	mov	r7, r0
 800c410:	d802      	bhi.n	800c418 <_realloc_r+0x34>
 800c412:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c416:	d812      	bhi.n	800c43e <_realloc_r+0x5a>
 800c418:	4621      	mov	r1, r4
 800c41a:	4640      	mov	r0, r8
 800c41c:	f7ff f964 	bl	800b6e8 <_malloc_r>
 800c420:	4605      	mov	r5, r0
 800c422:	2800      	cmp	r0, #0
 800c424:	d0ed      	beq.n	800c402 <_realloc_r+0x1e>
 800c426:	42bc      	cmp	r4, r7
 800c428:	4622      	mov	r2, r4
 800c42a:	4631      	mov	r1, r6
 800c42c:	bf28      	it	cs
 800c42e:	463a      	movcs	r2, r7
 800c430:	f7fe fae3 	bl	800a9fa <memcpy>
 800c434:	4631      	mov	r1, r6
 800c436:	4640      	mov	r0, r8
 800c438:	f7ff f8e2 	bl	800b600 <_free_r>
 800c43c:	e7e1      	b.n	800c402 <_realloc_r+0x1e>
 800c43e:	4635      	mov	r5, r6
 800c440:	e7df      	b.n	800c402 <_realloc_r+0x1e>

0800c442 <__ascii_wctomb>:
 800c442:	b149      	cbz	r1, 800c458 <__ascii_wctomb+0x16>
 800c444:	2aff      	cmp	r2, #255	; 0xff
 800c446:	bf85      	ittet	hi
 800c448:	238a      	movhi	r3, #138	; 0x8a
 800c44a:	6003      	strhi	r3, [r0, #0]
 800c44c:	700a      	strbls	r2, [r1, #0]
 800c44e:	f04f 30ff 	movhi.w	r0, #4294967295
 800c452:	bf98      	it	ls
 800c454:	2001      	movls	r0, #1
 800c456:	4770      	bx	lr
 800c458:	4608      	mov	r0, r1
 800c45a:	4770      	bx	lr

0800c45c <fiprintf>:
 800c45c:	b40e      	push	{r1, r2, r3}
 800c45e:	b503      	push	{r0, r1, lr}
 800c460:	4601      	mov	r1, r0
 800c462:	ab03      	add	r3, sp, #12
 800c464:	4805      	ldr	r0, [pc, #20]	; (800c47c <fiprintf+0x20>)
 800c466:	f853 2b04 	ldr.w	r2, [r3], #4
 800c46a:	6800      	ldr	r0, [r0, #0]
 800c46c:	9301      	str	r3, [sp, #4]
 800c46e:	f000 f83f 	bl	800c4f0 <_vfiprintf_r>
 800c472:	b002      	add	sp, #8
 800c474:	f85d eb04 	ldr.w	lr, [sp], #4
 800c478:	b003      	add	sp, #12
 800c47a:	4770      	bx	lr
 800c47c:	2400006c 	.word	0x2400006c

0800c480 <abort>:
 800c480:	b508      	push	{r3, lr}
 800c482:	2006      	movs	r0, #6
 800c484:	f000 fa0c 	bl	800c8a0 <raise>
 800c488:	2001      	movs	r0, #1
 800c48a:	f7f4 fccf 	bl	8000e2c <_exit>

0800c48e <_malloc_usable_size_r>:
 800c48e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c492:	1f18      	subs	r0, r3, #4
 800c494:	2b00      	cmp	r3, #0
 800c496:	bfbc      	itt	lt
 800c498:	580b      	ldrlt	r3, [r1, r0]
 800c49a:	18c0      	addlt	r0, r0, r3
 800c49c:	4770      	bx	lr

0800c49e <__sfputc_r>:
 800c49e:	6893      	ldr	r3, [r2, #8]
 800c4a0:	3b01      	subs	r3, #1
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	b410      	push	{r4}
 800c4a6:	6093      	str	r3, [r2, #8]
 800c4a8:	da08      	bge.n	800c4bc <__sfputc_r+0x1e>
 800c4aa:	6994      	ldr	r4, [r2, #24]
 800c4ac:	42a3      	cmp	r3, r4
 800c4ae:	db01      	blt.n	800c4b4 <__sfputc_r+0x16>
 800c4b0:	290a      	cmp	r1, #10
 800c4b2:	d103      	bne.n	800c4bc <__sfputc_r+0x1e>
 800c4b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4b8:	f000 b934 	b.w	800c724 <__swbuf_r>
 800c4bc:	6813      	ldr	r3, [r2, #0]
 800c4be:	1c58      	adds	r0, r3, #1
 800c4c0:	6010      	str	r0, [r2, #0]
 800c4c2:	7019      	strb	r1, [r3, #0]
 800c4c4:	4608      	mov	r0, r1
 800c4c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4ca:	4770      	bx	lr

0800c4cc <__sfputs_r>:
 800c4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4ce:	4606      	mov	r6, r0
 800c4d0:	460f      	mov	r7, r1
 800c4d2:	4614      	mov	r4, r2
 800c4d4:	18d5      	adds	r5, r2, r3
 800c4d6:	42ac      	cmp	r4, r5
 800c4d8:	d101      	bne.n	800c4de <__sfputs_r+0x12>
 800c4da:	2000      	movs	r0, #0
 800c4dc:	e007      	b.n	800c4ee <__sfputs_r+0x22>
 800c4de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4e2:	463a      	mov	r2, r7
 800c4e4:	4630      	mov	r0, r6
 800c4e6:	f7ff ffda 	bl	800c49e <__sfputc_r>
 800c4ea:	1c43      	adds	r3, r0, #1
 800c4ec:	d1f3      	bne.n	800c4d6 <__sfputs_r+0xa>
 800c4ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c4f0 <_vfiprintf_r>:
 800c4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4f4:	460d      	mov	r5, r1
 800c4f6:	b09d      	sub	sp, #116	; 0x74
 800c4f8:	4614      	mov	r4, r2
 800c4fa:	4698      	mov	r8, r3
 800c4fc:	4606      	mov	r6, r0
 800c4fe:	b118      	cbz	r0, 800c508 <_vfiprintf_r+0x18>
 800c500:	6a03      	ldr	r3, [r0, #32]
 800c502:	b90b      	cbnz	r3, 800c508 <_vfiprintf_r+0x18>
 800c504:	f7fe f90a 	bl	800a71c <__sinit>
 800c508:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c50a:	07d9      	lsls	r1, r3, #31
 800c50c:	d405      	bmi.n	800c51a <_vfiprintf_r+0x2a>
 800c50e:	89ab      	ldrh	r3, [r5, #12]
 800c510:	059a      	lsls	r2, r3, #22
 800c512:	d402      	bmi.n	800c51a <_vfiprintf_r+0x2a>
 800c514:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c516:	f7fe fa6e 	bl	800a9f6 <__retarget_lock_acquire_recursive>
 800c51a:	89ab      	ldrh	r3, [r5, #12]
 800c51c:	071b      	lsls	r3, r3, #28
 800c51e:	d501      	bpl.n	800c524 <_vfiprintf_r+0x34>
 800c520:	692b      	ldr	r3, [r5, #16]
 800c522:	b99b      	cbnz	r3, 800c54c <_vfiprintf_r+0x5c>
 800c524:	4629      	mov	r1, r5
 800c526:	4630      	mov	r0, r6
 800c528:	f000 f93a 	bl	800c7a0 <__swsetup_r>
 800c52c:	b170      	cbz	r0, 800c54c <_vfiprintf_r+0x5c>
 800c52e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c530:	07dc      	lsls	r4, r3, #31
 800c532:	d504      	bpl.n	800c53e <_vfiprintf_r+0x4e>
 800c534:	f04f 30ff 	mov.w	r0, #4294967295
 800c538:	b01d      	add	sp, #116	; 0x74
 800c53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c53e:	89ab      	ldrh	r3, [r5, #12]
 800c540:	0598      	lsls	r0, r3, #22
 800c542:	d4f7      	bmi.n	800c534 <_vfiprintf_r+0x44>
 800c544:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c546:	f7fe fa57 	bl	800a9f8 <__retarget_lock_release_recursive>
 800c54a:	e7f3      	b.n	800c534 <_vfiprintf_r+0x44>
 800c54c:	2300      	movs	r3, #0
 800c54e:	9309      	str	r3, [sp, #36]	; 0x24
 800c550:	2320      	movs	r3, #32
 800c552:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c556:	f8cd 800c 	str.w	r8, [sp, #12]
 800c55a:	2330      	movs	r3, #48	; 0x30
 800c55c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c710 <_vfiprintf_r+0x220>
 800c560:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c564:	f04f 0901 	mov.w	r9, #1
 800c568:	4623      	mov	r3, r4
 800c56a:	469a      	mov	sl, r3
 800c56c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c570:	b10a      	cbz	r2, 800c576 <_vfiprintf_r+0x86>
 800c572:	2a25      	cmp	r2, #37	; 0x25
 800c574:	d1f9      	bne.n	800c56a <_vfiprintf_r+0x7a>
 800c576:	ebba 0b04 	subs.w	fp, sl, r4
 800c57a:	d00b      	beq.n	800c594 <_vfiprintf_r+0xa4>
 800c57c:	465b      	mov	r3, fp
 800c57e:	4622      	mov	r2, r4
 800c580:	4629      	mov	r1, r5
 800c582:	4630      	mov	r0, r6
 800c584:	f7ff ffa2 	bl	800c4cc <__sfputs_r>
 800c588:	3001      	adds	r0, #1
 800c58a:	f000 80a9 	beq.w	800c6e0 <_vfiprintf_r+0x1f0>
 800c58e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c590:	445a      	add	r2, fp
 800c592:	9209      	str	r2, [sp, #36]	; 0x24
 800c594:	f89a 3000 	ldrb.w	r3, [sl]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	f000 80a1 	beq.w	800c6e0 <_vfiprintf_r+0x1f0>
 800c59e:	2300      	movs	r3, #0
 800c5a0:	f04f 32ff 	mov.w	r2, #4294967295
 800c5a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5a8:	f10a 0a01 	add.w	sl, sl, #1
 800c5ac:	9304      	str	r3, [sp, #16]
 800c5ae:	9307      	str	r3, [sp, #28]
 800c5b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c5b4:	931a      	str	r3, [sp, #104]	; 0x68
 800c5b6:	4654      	mov	r4, sl
 800c5b8:	2205      	movs	r2, #5
 800c5ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5be:	4854      	ldr	r0, [pc, #336]	; (800c710 <_vfiprintf_r+0x220>)
 800c5c0:	f7f3 fe8e 	bl	80002e0 <memchr>
 800c5c4:	9a04      	ldr	r2, [sp, #16]
 800c5c6:	b9d8      	cbnz	r0, 800c600 <_vfiprintf_r+0x110>
 800c5c8:	06d1      	lsls	r1, r2, #27
 800c5ca:	bf44      	itt	mi
 800c5cc:	2320      	movmi	r3, #32
 800c5ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5d2:	0713      	lsls	r3, r2, #28
 800c5d4:	bf44      	itt	mi
 800c5d6:	232b      	movmi	r3, #43	; 0x2b
 800c5d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5dc:	f89a 3000 	ldrb.w	r3, [sl]
 800c5e0:	2b2a      	cmp	r3, #42	; 0x2a
 800c5e2:	d015      	beq.n	800c610 <_vfiprintf_r+0x120>
 800c5e4:	9a07      	ldr	r2, [sp, #28]
 800c5e6:	4654      	mov	r4, sl
 800c5e8:	2000      	movs	r0, #0
 800c5ea:	f04f 0c0a 	mov.w	ip, #10
 800c5ee:	4621      	mov	r1, r4
 800c5f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5f4:	3b30      	subs	r3, #48	; 0x30
 800c5f6:	2b09      	cmp	r3, #9
 800c5f8:	d94d      	bls.n	800c696 <_vfiprintf_r+0x1a6>
 800c5fa:	b1b0      	cbz	r0, 800c62a <_vfiprintf_r+0x13a>
 800c5fc:	9207      	str	r2, [sp, #28]
 800c5fe:	e014      	b.n	800c62a <_vfiprintf_r+0x13a>
 800c600:	eba0 0308 	sub.w	r3, r0, r8
 800c604:	fa09 f303 	lsl.w	r3, r9, r3
 800c608:	4313      	orrs	r3, r2
 800c60a:	9304      	str	r3, [sp, #16]
 800c60c:	46a2      	mov	sl, r4
 800c60e:	e7d2      	b.n	800c5b6 <_vfiprintf_r+0xc6>
 800c610:	9b03      	ldr	r3, [sp, #12]
 800c612:	1d19      	adds	r1, r3, #4
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	9103      	str	r1, [sp, #12]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	bfbb      	ittet	lt
 800c61c:	425b      	neglt	r3, r3
 800c61e:	f042 0202 	orrlt.w	r2, r2, #2
 800c622:	9307      	strge	r3, [sp, #28]
 800c624:	9307      	strlt	r3, [sp, #28]
 800c626:	bfb8      	it	lt
 800c628:	9204      	strlt	r2, [sp, #16]
 800c62a:	7823      	ldrb	r3, [r4, #0]
 800c62c:	2b2e      	cmp	r3, #46	; 0x2e
 800c62e:	d10c      	bne.n	800c64a <_vfiprintf_r+0x15a>
 800c630:	7863      	ldrb	r3, [r4, #1]
 800c632:	2b2a      	cmp	r3, #42	; 0x2a
 800c634:	d134      	bne.n	800c6a0 <_vfiprintf_r+0x1b0>
 800c636:	9b03      	ldr	r3, [sp, #12]
 800c638:	1d1a      	adds	r2, r3, #4
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	9203      	str	r2, [sp, #12]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	bfb8      	it	lt
 800c642:	f04f 33ff 	movlt.w	r3, #4294967295
 800c646:	3402      	adds	r4, #2
 800c648:	9305      	str	r3, [sp, #20]
 800c64a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c720 <_vfiprintf_r+0x230>
 800c64e:	7821      	ldrb	r1, [r4, #0]
 800c650:	2203      	movs	r2, #3
 800c652:	4650      	mov	r0, sl
 800c654:	f7f3 fe44 	bl	80002e0 <memchr>
 800c658:	b138      	cbz	r0, 800c66a <_vfiprintf_r+0x17a>
 800c65a:	9b04      	ldr	r3, [sp, #16]
 800c65c:	eba0 000a 	sub.w	r0, r0, sl
 800c660:	2240      	movs	r2, #64	; 0x40
 800c662:	4082      	lsls	r2, r0
 800c664:	4313      	orrs	r3, r2
 800c666:	3401      	adds	r4, #1
 800c668:	9304      	str	r3, [sp, #16]
 800c66a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c66e:	4829      	ldr	r0, [pc, #164]	; (800c714 <_vfiprintf_r+0x224>)
 800c670:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c674:	2206      	movs	r2, #6
 800c676:	f7f3 fe33 	bl	80002e0 <memchr>
 800c67a:	2800      	cmp	r0, #0
 800c67c:	d03f      	beq.n	800c6fe <_vfiprintf_r+0x20e>
 800c67e:	4b26      	ldr	r3, [pc, #152]	; (800c718 <_vfiprintf_r+0x228>)
 800c680:	bb1b      	cbnz	r3, 800c6ca <_vfiprintf_r+0x1da>
 800c682:	9b03      	ldr	r3, [sp, #12]
 800c684:	3307      	adds	r3, #7
 800c686:	f023 0307 	bic.w	r3, r3, #7
 800c68a:	3308      	adds	r3, #8
 800c68c:	9303      	str	r3, [sp, #12]
 800c68e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c690:	443b      	add	r3, r7
 800c692:	9309      	str	r3, [sp, #36]	; 0x24
 800c694:	e768      	b.n	800c568 <_vfiprintf_r+0x78>
 800c696:	fb0c 3202 	mla	r2, ip, r2, r3
 800c69a:	460c      	mov	r4, r1
 800c69c:	2001      	movs	r0, #1
 800c69e:	e7a6      	b.n	800c5ee <_vfiprintf_r+0xfe>
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	3401      	adds	r4, #1
 800c6a4:	9305      	str	r3, [sp, #20]
 800c6a6:	4619      	mov	r1, r3
 800c6a8:	f04f 0c0a 	mov.w	ip, #10
 800c6ac:	4620      	mov	r0, r4
 800c6ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6b2:	3a30      	subs	r2, #48	; 0x30
 800c6b4:	2a09      	cmp	r2, #9
 800c6b6:	d903      	bls.n	800c6c0 <_vfiprintf_r+0x1d0>
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d0c6      	beq.n	800c64a <_vfiprintf_r+0x15a>
 800c6bc:	9105      	str	r1, [sp, #20]
 800c6be:	e7c4      	b.n	800c64a <_vfiprintf_r+0x15a>
 800c6c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6c4:	4604      	mov	r4, r0
 800c6c6:	2301      	movs	r3, #1
 800c6c8:	e7f0      	b.n	800c6ac <_vfiprintf_r+0x1bc>
 800c6ca:	ab03      	add	r3, sp, #12
 800c6cc:	9300      	str	r3, [sp, #0]
 800c6ce:	462a      	mov	r2, r5
 800c6d0:	4b12      	ldr	r3, [pc, #72]	; (800c71c <_vfiprintf_r+0x22c>)
 800c6d2:	a904      	add	r1, sp, #16
 800c6d4:	4630      	mov	r0, r6
 800c6d6:	f7fd fbeb 	bl	8009eb0 <_printf_float>
 800c6da:	4607      	mov	r7, r0
 800c6dc:	1c78      	adds	r0, r7, #1
 800c6de:	d1d6      	bne.n	800c68e <_vfiprintf_r+0x19e>
 800c6e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6e2:	07d9      	lsls	r1, r3, #31
 800c6e4:	d405      	bmi.n	800c6f2 <_vfiprintf_r+0x202>
 800c6e6:	89ab      	ldrh	r3, [r5, #12]
 800c6e8:	059a      	lsls	r2, r3, #22
 800c6ea:	d402      	bmi.n	800c6f2 <_vfiprintf_r+0x202>
 800c6ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6ee:	f7fe f983 	bl	800a9f8 <__retarget_lock_release_recursive>
 800c6f2:	89ab      	ldrh	r3, [r5, #12]
 800c6f4:	065b      	lsls	r3, r3, #25
 800c6f6:	f53f af1d 	bmi.w	800c534 <_vfiprintf_r+0x44>
 800c6fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c6fc:	e71c      	b.n	800c538 <_vfiprintf_r+0x48>
 800c6fe:	ab03      	add	r3, sp, #12
 800c700:	9300      	str	r3, [sp, #0]
 800c702:	462a      	mov	r2, r5
 800c704:	4b05      	ldr	r3, [pc, #20]	; (800c71c <_vfiprintf_r+0x22c>)
 800c706:	a904      	add	r1, sp, #16
 800c708:	4630      	mov	r0, r6
 800c70a:	f7fd fe59 	bl	800a3c0 <_printf_i>
 800c70e:	e7e4      	b.n	800c6da <_vfiprintf_r+0x1ea>
 800c710:	0800ccd4 	.word	0x0800ccd4
 800c714:	0800ccde 	.word	0x0800ccde
 800c718:	08009eb1 	.word	0x08009eb1
 800c71c:	0800c4cd 	.word	0x0800c4cd
 800c720:	0800ccda 	.word	0x0800ccda

0800c724 <__swbuf_r>:
 800c724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c726:	460e      	mov	r6, r1
 800c728:	4614      	mov	r4, r2
 800c72a:	4605      	mov	r5, r0
 800c72c:	b118      	cbz	r0, 800c736 <__swbuf_r+0x12>
 800c72e:	6a03      	ldr	r3, [r0, #32]
 800c730:	b90b      	cbnz	r3, 800c736 <__swbuf_r+0x12>
 800c732:	f7fd fff3 	bl	800a71c <__sinit>
 800c736:	69a3      	ldr	r3, [r4, #24]
 800c738:	60a3      	str	r3, [r4, #8]
 800c73a:	89a3      	ldrh	r3, [r4, #12]
 800c73c:	071a      	lsls	r2, r3, #28
 800c73e:	d525      	bpl.n	800c78c <__swbuf_r+0x68>
 800c740:	6923      	ldr	r3, [r4, #16]
 800c742:	b31b      	cbz	r3, 800c78c <__swbuf_r+0x68>
 800c744:	6823      	ldr	r3, [r4, #0]
 800c746:	6922      	ldr	r2, [r4, #16]
 800c748:	1a98      	subs	r0, r3, r2
 800c74a:	6963      	ldr	r3, [r4, #20]
 800c74c:	b2f6      	uxtb	r6, r6
 800c74e:	4283      	cmp	r3, r0
 800c750:	4637      	mov	r7, r6
 800c752:	dc04      	bgt.n	800c75e <__swbuf_r+0x3a>
 800c754:	4621      	mov	r1, r4
 800c756:	4628      	mov	r0, r5
 800c758:	f7ff fdac 	bl	800c2b4 <_fflush_r>
 800c75c:	b9e0      	cbnz	r0, 800c798 <__swbuf_r+0x74>
 800c75e:	68a3      	ldr	r3, [r4, #8]
 800c760:	3b01      	subs	r3, #1
 800c762:	60a3      	str	r3, [r4, #8]
 800c764:	6823      	ldr	r3, [r4, #0]
 800c766:	1c5a      	adds	r2, r3, #1
 800c768:	6022      	str	r2, [r4, #0]
 800c76a:	701e      	strb	r6, [r3, #0]
 800c76c:	6962      	ldr	r2, [r4, #20]
 800c76e:	1c43      	adds	r3, r0, #1
 800c770:	429a      	cmp	r2, r3
 800c772:	d004      	beq.n	800c77e <__swbuf_r+0x5a>
 800c774:	89a3      	ldrh	r3, [r4, #12]
 800c776:	07db      	lsls	r3, r3, #31
 800c778:	d506      	bpl.n	800c788 <__swbuf_r+0x64>
 800c77a:	2e0a      	cmp	r6, #10
 800c77c:	d104      	bne.n	800c788 <__swbuf_r+0x64>
 800c77e:	4621      	mov	r1, r4
 800c780:	4628      	mov	r0, r5
 800c782:	f7ff fd97 	bl	800c2b4 <_fflush_r>
 800c786:	b938      	cbnz	r0, 800c798 <__swbuf_r+0x74>
 800c788:	4638      	mov	r0, r7
 800c78a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c78c:	4621      	mov	r1, r4
 800c78e:	4628      	mov	r0, r5
 800c790:	f000 f806 	bl	800c7a0 <__swsetup_r>
 800c794:	2800      	cmp	r0, #0
 800c796:	d0d5      	beq.n	800c744 <__swbuf_r+0x20>
 800c798:	f04f 37ff 	mov.w	r7, #4294967295
 800c79c:	e7f4      	b.n	800c788 <__swbuf_r+0x64>
	...

0800c7a0 <__swsetup_r>:
 800c7a0:	b538      	push	{r3, r4, r5, lr}
 800c7a2:	4b2a      	ldr	r3, [pc, #168]	; (800c84c <__swsetup_r+0xac>)
 800c7a4:	4605      	mov	r5, r0
 800c7a6:	6818      	ldr	r0, [r3, #0]
 800c7a8:	460c      	mov	r4, r1
 800c7aa:	b118      	cbz	r0, 800c7b4 <__swsetup_r+0x14>
 800c7ac:	6a03      	ldr	r3, [r0, #32]
 800c7ae:	b90b      	cbnz	r3, 800c7b4 <__swsetup_r+0x14>
 800c7b0:	f7fd ffb4 	bl	800a71c <__sinit>
 800c7b4:	89a3      	ldrh	r3, [r4, #12]
 800c7b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c7ba:	0718      	lsls	r0, r3, #28
 800c7bc:	d422      	bmi.n	800c804 <__swsetup_r+0x64>
 800c7be:	06d9      	lsls	r1, r3, #27
 800c7c0:	d407      	bmi.n	800c7d2 <__swsetup_r+0x32>
 800c7c2:	2309      	movs	r3, #9
 800c7c4:	602b      	str	r3, [r5, #0]
 800c7c6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c7ca:	81a3      	strh	r3, [r4, #12]
 800c7cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c7d0:	e034      	b.n	800c83c <__swsetup_r+0x9c>
 800c7d2:	0758      	lsls	r0, r3, #29
 800c7d4:	d512      	bpl.n	800c7fc <__swsetup_r+0x5c>
 800c7d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c7d8:	b141      	cbz	r1, 800c7ec <__swsetup_r+0x4c>
 800c7da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c7de:	4299      	cmp	r1, r3
 800c7e0:	d002      	beq.n	800c7e8 <__swsetup_r+0x48>
 800c7e2:	4628      	mov	r0, r5
 800c7e4:	f7fe ff0c 	bl	800b600 <_free_r>
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	6363      	str	r3, [r4, #52]	; 0x34
 800c7ec:	89a3      	ldrh	r3, [r4, #12]
 800c7ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c7f2:	81a3      	strh	r3, [r4, #12]
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	6063      	str	r3, [r4, #4]
 800c7f8:	6923      	ldr	r3, [r4, #16]
 800c7fa:	6023      	str	r3, [r4, #0]
 800c7fc:	89a3      	ldrh	r3, [r4, #12]
 800c7fe:	f043 0308 	orr.w	r3, r3, #8
 800c802:	81a3      	strh	r3, [r4, #12]
 800c804:	6923      	ldr	r3, [r4, #16]
 800c806:	b94b      	cbnz	r3, 800c81c <__swsetup_r+0x7c>
 800c808:	89a3      	ldrh	r3, [r4, #12]
 800c80a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c80e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c812:	d003      	beq.n	800c81c <__swsetup_r+0x7c>
 800c814:	4621      	mov	r1, r4
 800c816:	4628      	mov	r0, r5
 800c818:	f000 f884 	bl	800c924 <__smakebuf_r>
 800c81c:	89a0      	ldrh	r0, [r4, #12]
 800c81e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c822:	f010 0301 	ands.w	r3, r0, #1
 800c826:	d00a      	beq.n	800c83e <__swsetup_r+0x9e>
 800c828:	2300      	movs	r3, #0
 800c82a:	60a3      	str	r3, [r4, #8]
 800c82c:	6963      	ldr	r3, [r4, #20]
 800c82e:	425b      	negs	r3, r3
 800c830:	61a3      	str	r3, [r4, #24]
 800c832:	6923      	ldr	r3, [r4, #16]
 800c834:	b943      	cbnz	r3, 800c848 <__swsetup_r+0xa8>
 800c836:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c83a:	d1c4      	bne.n	800c7c6 <__swsetup_r+0x26>
 800c83c:	bd38      	pop	{r3, r4, r5, pc}
 800c83e:	0781      	lsls	r1, r0, #30
 800c840:	bf58      	it	pl
 800c842:	6963      	ldrpl	r3, [r4, #20]
 800c844:	60a3      	str	r3, [r4, #8]
 800c846:	e7f4      	b.n	800c832 <__swsetup_r+0x92>
 800c848:	2000      	movs	r0, #0
 800c84a:	e7f7      	b.n	800c83c <__swsetup_r+0x9c>
 800c84c:	2400006c 	.word	0x2400006c

0800c850 <_raise_r>:
 800c850:	291f      	cmp	r1, #31
 800c852:	b538      	push	{r3, r4, r5, lr}
 800c854:	4604      	mov	r4, r0
 800c856:	460d      	mov	r5, r1
 800c858:	d904      	bls.n	800c864 <_raise_r+0x14>
 800c85a:	2316      	movs	r3, #22
 800c85c:	6003      	str	r3, [r0, #0]
 800c85e:	f04f 30ff 	mov.w	r0, #4294967295
 800c862:	bd38      	pop	{r3, r4, r5, pc}
 800c864:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c866:	b112      	cbz	r2, 800c86e <_raise_r+0x1e>
 800c868:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c86c:	b94b      	cbnz	r3, 800c882 <_raise_r+0x32>
 800c86e:	4620      	mov	r0, r4
 800c870:	f000 f830 	bl	800c8d4 <_getpid_r>
 800c874:	462a      	mov	r2, r5
 800c876:	4601      	mov	r1, r0
 800c878:	4620      	mov	r0, r4
 800c87a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c87e:	f000 b817 	b.w	800c8b0 <_kill_r>
 800c882:	2b01      	cmp	r3, #1
 800c884:	d00a      	beq.n	800c89c <_raise_r+0x4c>
 800c886:	1c59      	adds	r1, r3, #1
 800c888:	d103      	bne.n	800c892 <_raise_r+0x42>
 800c88a:	2316      	movs	r3, #22
 800c88c:	6003      	str	r3, [r0, #0]
 800c88e:	2001      	movs	r0, #1
 800c890:	e7e7      	b.n	800c862 <_raise_r+0x12>
 800c892:	2400      	movs	r4, #0
 800c894:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c898:	4628      	mov	r0, r5
 800c89a:	4798      	blx	r3
 800c89c:	2000      	movs	r0, #0
 800c89e:	e7e0      	b.n	800c862 <_raise_r+0x12>

0800c8a0 <raise>:
 800c8a0:	4b02      	ldr	r3, [pc, #8]	; (800c8ac <raise+0xc>)
 800c8a2:	4601      	mov	r1, r0
 800c8a4:	6818      	ldr	r0, [r3, #0]
 800c8a6:	f7ff bfd3 	b.w	800c850 <_raise_r>
 800c8aa:	bf00      	nop
 800c8ac:	2400006c 	.word	0x2400006c

0800c8b0 <_kill_r>:
 800c8b0:	b538      	push	{r3, r4, r5, lr}
 800c8b2:	4d07      	ldr	r5, [pc, #28]	; (800c8d0 <_kill_r+0x20>)
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	4604      	mov	r4, r0
 800c8b8:	4608      	mov	r0, r1
 800c8ba:	4611      	mov	r1, r2
 800c8bc:	602b      	str	r3, [r5, #0]
 800c8be:	f7f4 faa5 	bl	8000e0c <_kill>
 800c8c2:	1c43      	adds	r3, r0, #1
 800c8c4:	d102      	bne.n	800c8cc <_kill_r+0x1c>
 800c8c6:	682b      	ldr	r3, [r5, #0]
 800c8c8:	b103      	cbz	r3, 800c8cc <_kill_r+0x1c>
 800c8ca:	6023      	str	r3, [r4, #0]
 800c8cc:	bd38      	pop	{r3, r4, r5, pc}
 800c8ce:	bf00      	nop
 800c8d0:	240054c8 	.word	0x240054c8

0800c8d4 <_getpid_r>:
 800c8d4:	f7f4 ba92 	b.w	8000dfc <_getpid>

0800c8d8 <__swhatbuf_r>:
 800c8d8:	b570      	push	{r4, r5, r6, lr}
 800c8da:	460c      	mov	r4, r1
 800c8dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8e0:	2900      	cmp	r1, #0
 800c8e2:	b096      	sub	sp, #88	; 0x58
 800c8e4:	4615      	mov	r5, r2
 800c8e6:	461e      	mov	r6, r3
 800c8e8:	da0d      	bge.n	800c906 <__swhatbuf_r+0x2e>
 800c8ea:	89a3      	ldrh	r3, [r4, #12]
 800c8ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c8f0:	f04f 0100 	mov.w	r1, #0
 800c8f4:	bf0c      	ite	eq
 800c8f6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c8fa:	2340      	movne	r3, #64	; 0x40
 800c8fc:	2000      	movs	r0, #0
 800c8fe:	6031      	str	r1, [r6, #0]
 800c900:	602b      	str	r3, [r5, #0]
 800c902:	b016      	add	sp, #88	; 0x58
 800c904:	bd70      	pop	{r4, r5, r6, pc}
 800c906:	466a      	mov	r2, sp
 800c908:	f000 f848 	bl	800c99c <_fstat_r>
 800c90c:	2800      	cmp	r0, #0
 800c90e:	dbec      	blt.n	800c8ea <__swhatbuf_r+0x12>
 800c910:	9901      	ldr	r1, [sp, #4]
 800c912:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c916:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c91a:	4259      	negs	r1, r3
 800c91c:	4159      	adcs	r1, r3
 800c91e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c922:	e7eb      	b.n	800c8fc <__swhatbuf_r+0x24>

0800c924 <__smakebuf_r>:
 800c924:	898b      	ldrh	r3, [r1, #12]
 800c926:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c928:	079d      	lsls	r5, r3, #30
 800c92a:	4606      	mov	r6, r0
 800c92c:	460c      	mov	r4, r1
 800c92e:	d507      	bpl.n	800c940 <__smakebuf_r+0x1c>
 800c930:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c934:	6023      	str	r3, [r4, #0]
 800c936:	6123      	str	r3, [r4, #16]
 800c938:	2301      	movs	r3, #1
 800c93a:	6163      	str	r3, [r4, #20]
 800c93c:	b002      	add	sp, #8
 800c93e:	bd70      	pop	{r4, r5, r6, pc}
 800c940:	ab01      	add	r3, sp, #4
 800c942:	466a      	mov	r2, sp
 800c944:	f7ff ffc8 	bl	800c8d8 <__swhatbuf_r>
 800c948:	9900      	ldr	r1, [sp, #0]
 800c94a:	4605      	mov	r5, r0
 800c94c:	4630      	mov	r0, r6
 800c94e:	f7fe fecb 	bl	800b6e8 <_malloc_r>
 800c952:	b948      	cbnz	r0, 800c968 <__smakebuf_r+0x44>
 800c954:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c958:	059a      	lsls	r2, r3, #22
 800c95a:	d4ef      	bmi.n	800c93c <__smakebuf_r+0x18>
 800c95c:	f023 0303 	bic.w	r3, r3, #3
 800c960:	f043 0302 	orr.w	r3, r3, #2
 800c964:	81a3      	strh	r3, [r4, #12]
 800c966:	e7e3      	b.n	800c930 <__smakebuf_r+0xc>
 800c968:	89a3      	ldrh	r3, [r4, #12]
 800c96a:	6020      	str	r0, [r4, #0]
 800c96c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c970:	81a3      	strh	r3, [r4, #12]
 800c972:	9b00      	ldr	r3, [sp, #0]
 800c974:	6163      	str	r3, [r4, #20]
 800c976:	9b01      	ldr	r3, [sp, #4]
 800c978:	6120      	str	r0, [r4, #16]
 800c97a:	b15b      	cbz	r3, 800c994 <__smakebuf_r+0x70>
 800c97c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c980:	4630      	mov	r0, r6
 800c982:	f000 f81d 	bl	800c9c0 <_isatty_r>
 800c986:	b128      	cbz	r0, 800c994 <__smakebuf_r+0x70>
 800c988:	89a3      	ldrh	r3, [r4, #12]
 800c98a:	f023 0303 	bic.w	r3, r3, #3
 800c98e:	f043 0301 	orr.w	r3, r3, #1
 800c992:	81a3      	strh	r3, [r4, #12]
 800c994:	89a3      	ldrh	r3, [r4, #12]
 800c996:	431d      	orrs	r5, r3
 800c998:	81a5      	strh	r5, [r4, #12]
 800c99a:	e7cf      	b.n	800c93c <__smakebuf_r+0x18>

0800c99c <_fstat_r>:
 800c99c:	b538      	push	{r3, r4, r5, lr}
 800c99e:	4d07      	ldr	r5, [pc, #28]	; (800c9bc <_fstat_r+0x20>)
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	4604      	mov	r4, r0
 800c9a4:	4608      	mov	r0, r1
 800c9a6:	4611      	mov	r1, r2
 800c9a8:	602b      	str	r3, [r5, #0]
 800c9aa:	f7f4 fa8e 	bl	8000eca <_fstat>
 800c9ae:	1c43      	adds	r3, r0, #1
 800c9b0:	d102      	bne.n	800c9b8 <_fstat_r+0x1c>
 800c9b2:	682b      	ldr	r3, [r5, #0]
 800c9b4:	b103      	cbz	r3, 800c9b8 <_fstat_r+0x1c>
 800c9b6:	6023      	str	r3, [r4, #0]
 800c9b8:	bd38      	pop	{r3, r4, r5, pc}
 800c9ba:	bf00      	nop
 800c9bc:	240054c8 	.word	0x240054c8

0800c9c0 <_isatty_r>:
 800c9c0:	b538      	push	{r3, r4, r5, lr}
 800c9c2:	4d06      	ldr	r5, [pc, #24]	; (800c9dc <_isatty_r+0x1c>)
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	4604      	mov	r4, r0
 800c9c8:	4608      	mov	r0, r1
 800c9ca:	602b      	str	r3, [r5, #0]
 800c9cc:	f7f4 fa8d 	bl	8000eea <_isatty>
 800c9d0:	1c43      	adds	r3, r0, #1
 800c9d2:	d102      	bne.n	800c9da <_isatty_r+0x1a>
 800c9d4:	682b      	ldr	r3, [r5, #0]
 800c9d6:	b103      	cbz	r3, 800c9da <_isatty_r+0x1a>
 800c9d8:	6023      	str	r3, [r4, #0]
 800c9da:	bd38      	pop	{r3, r4, r5, pc}
 800c9dc:	240054c8 	.word	0x240054c8

0800c9e0 <_init>:
 800c9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9e2:	bf00      	nop
 800c9e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9e6:	bc08      	pop	{r3}
 800c9e8:	469e      	mov	lr, r3
 800c9ea:	4770      	bx	lr

0800c9ec <_fini>:
 800c9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ee:	bf00      	nop
 800c9f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9f2:	bc08      	pop	{r3}
 800c9f4:	469e      	mov	lr, r3
 800c9f6:	4770      	bx	lr
